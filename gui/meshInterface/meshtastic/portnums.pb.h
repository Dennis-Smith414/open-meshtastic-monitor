// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: meshtastic/portnums.proto
// Protobuf C++ Version: 6.31.1

#ifndef meshtastic_2fportnums_2eproto_2epb_2eh
#define meshtastic_2fportnums_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_meshtastic_2fportnums_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_meshtastic_2fportnums_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_meshtastic_2fportnums_2eproto;
}  // extern "C"
namespace meshtastic {
enum PortNum : int;
extern const uint32_t PortNum_internal_data_[];
}  // namespace meshtastic
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::meshtastic::PortNum_internal_data_>
    internal::EnumTraitsImpl::value<::meshtastic::PortNum>;
}  // namespace protobuf
}  // namespace google

namespace meshtastic {
enum PortNum : int {
  UNKNOWN_APP = 0,
  TEXT_MESSAGE_APP = 1,
  REMOTE_HARDWARE_APP = 2,
  POSITION_APP = 3,
  NODEINFO_APP = 4,
  ROUTING_APP = 5,
  ADMIN_APP = 6,
  TEXT_MESSAGE_COMPRESSED_APP = 7,
  WAYPOINT_APP = 8,
  AUDIO_APP = 9,
  DETECTION_SENSOR_APP = 10,
  ALERT_APP = 11,
  KEY_VERIFICATION_APP = 12,
  REPLY_APP = 32,
  IP_TUNNEL_APP = 33,
  PAXCOUNTER_APP = 34,
  SERIAL_APP = 64,
  STORE_FORWARD_APP = 65,
  RANGE_TEST_APP = 66,
  TELEMETRY_APP = 67,
  ZPS_APP = 68,
  SIMULATOR_APP = 69,
  TRACEROUTE_APP = 70,
  NEIGHBORINFO_APP = 71,
  ATAK_PLUGIN = 72,
  MAP_REPORT_APP = 73,
  POWERSTRESS_APP = 74,
  RETICULUM_TUNNEL_APP = 76,
  CAYENNE_APP = 77,
  PRIVATE_APP = 256,
  ATAK_FORWARDER = 257,
  MAX = 511,
  PortNum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  PortNum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t PortNum_internal_data_[];
inline constexpr PortNum PortNum_MIN =
    static_cast<PortNum>(0);
inline constexpr PortNum PortNum_MAX =
    static_cast<PortNum>(511);
inline bool PortNum_IsValid(int value) {
  return ::google::protobuf::internal::ValidateEnum(value, PortNum_internal_data_);
}
inline constexpr int PortNum_ARRAYSIZE = 511 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL PortNum_descriptor();
template <typename T>
const ::std::string& PortNum_Name(T value) {
  static_assert(::std::is_same<T, PortNum>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to PortNum_Name().");
  return ::google::protobuf::internal::NameOfEnum(PortNum_descriptor(), value);
}
inline bool PortNum_Parse(
    ::absl::string_view name, PortNum* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<PortNum>(PortNum_descriptor(), name,
                                           value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace meshtastic


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::meshtastic::PortNum> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::meshtastic::PortNum>() {
  return ::meshtastic::PortNum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // meshtastic_2fportnums_2eproto_2epb_2eh
