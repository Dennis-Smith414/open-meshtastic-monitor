// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: meshtastic/config.proto
// Protobuf C++ Version: 6.32.0

#include "meshtastic/config.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace meshtastic {
template <typename>
PROTOBUF_CONSTEXPR Config_SessionkeyConfig::Config_SessionkeyConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(Config_SessionkeyConfig_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Config_SessionkeyConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Config_SessionkeyConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Config_SessionkeyConfigDefaultTypeInternal() {}
  union {
    Config_SessionkeyConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Config_SessionkeyConfigDefaultTypeInternal _Config_SessionkeyConfig_default_instance_;

inline constexpr Config_SecurityConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        admin_key_{},
        public_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        private_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        is_managed_{false},
        serial_enabled_{false},
        debug_log_api_enabled_{false},
        admin_channel_enabled_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Config_SecurityConfig::Config_SecurityConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Config_SecurityConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Config_SecurityConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Config_SecurityConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Config_SecurityConfigDefaultTypeInternal() {}
  union {
    Config_SecurityConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Config_SecurityConfigDefaultTypeInternal _Config_SecurityConfig_default_instance_;

inline constexpr Config_PowerConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        is_power_saving_{false},
        on_battery_shutdown_after_secs_{0u},
        adc_multiplier_override_{0},
        wait_bluetooth_secs_{0u},
        sds_secs_{0u},
        ls_secs_{0u},
        min_wake_secs_{0u},
        device_battery_ina_address_{0u},
        powermon_enables_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR Config_PowerConfig::Config_PowerConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Config_PowerConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Config_PowerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Config_PowerConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Config_PowerConfigDefaultTypeInternal() {}
  union {
    Config_PowerConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Config_PowerConfigDefaultTypeInternal _Config_PowerConfig_default_instance_;

inline constexpr Config_PositionConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_broadcast_secs_{0u},
        position_broadcast_smart_enabled_{false},
        fixed_position_{false},
        gps_enabled_{false},
        gps_update_interval_{0u},
        gps_attempt_time_{0u},
        position_flags_{0u},
        rx_gpio_{0u},
        tx_gpio_{0u},
        broadcast_smart_minimum_distance_{0u},
        broadcast_smart_minimum_interval_secs_{0u},
        gps_en_gpio_{0u},
        gps_mode_{static_cast< ::meshtastic::Config_PositionConfig_GpsMode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Config_PositionConfig::Config_PositionConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Config_PositionConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Config_PositionConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Config_PositionConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Config_PositionConfigDefaultTypeInternal() {}
  union {
    Config_PositionConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Config_PositionConfigDefaultTypeInternal _Config_PositionConfig_default_instance_;

inline constexpr Config_NetworkConfig_IpV4Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ip_{0u},
        gateway_{0u},
        subnet_{0u},
        dns_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Config_NetworkConfig_IpV4Config::Config_NetworkConfig_IpV4Config(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Config_NetworkConfig_IpV4Config_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Config_NetworkConfig_IpV4ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Config_NetworkConfig_IpV4ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Config_NetworkConfig_IpV4ConfigDefaultTypeInternal() {}
  union {
    Config_NetworkConfig_IpV4Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Config_NetworkConfig_IpV4ConfigDefaultTypeInternal _Config_NetworkConfig_IpV4Config_default_instance_;

inline constexpr Config_LoRaConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ignore_incoming_{},
        _ignore_incoming_cached_byte_size_{0},
        modem_preset_{static_cast< ::meshtastic::Config_LoRaConfig_ModemPreset >(0)},
        bandwidth_{0u},
        spread_factor_{0u},
        coding_rate_{0u},
        frequency_offset_{0},
        region_{static_cast< ::meshtastic::Config_LoRaConfig_RegionCode >(0)},
        hop_limit_{0u},
        use_preset_{false},
        tx_enabled_{false},
        override_duty_cycle_{false},
        sx126x_rx_boosted_gain_{false},
        tx_power_{0},
        channel_num_{0u},
        override_frequency_{0},
        pa_fan_disabled_{false},
        ignore_mqtt_{false},
        config_ok_to_mqtt_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Config_LoRaConfig::Config_LoRaConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Config_LoRaConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Config_LoRaConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Config_LoRaConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Config_LoRaConfigDefaultTypeInternal() {}
  union {
    Config_LoRaConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Config_LoRaConfigDefaultTypeInternal _Config_LoRaConfig_default_instance_;

inline constexpr Config_DisplayConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        screen_on_secs_{0u},
        gps_format_{static_cast< ::meshtastic::Config_DisplayConfig_GpsCoordinateFormat >(0)},
        auto_screen_carousel_secs_{0u},
        units_{static_cast< ::meshtastic::Config_DisplayConfig_DisplayUnits >(0)},
        oled_{static_cast< ::meshtastic::Config_DisplayConfig_OledType >(0)},
        compass_north_top_{false},
        flip_screen_{false},
        heading_bold_{false},
        wake_on_tap_or_motion_{false},
        displaymode_{static_cast< ::meshtastic::Config_DisplayConfig_DisplayMode >(0)},
        compass_orientation_{static_cast< ::meshtastic::Config_DisplayConfig_CompassOrientation >(0)},
        use_12h_clock_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Config_DisplayConfig::Config_DisplayConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Config_DisplayConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Config_DisplayConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Config_DisplayConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Config_DisplayConfigDefaultTypeInternal() {}
  union {
    Config_DisplayConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Config_DisplayConfigDefaultTypeInternal _Config_DisplayConfig_default_instance_;

inline constexpr Config_DeviceConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tzdef_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        role_{static_cast< ::meshtastic::Config_DeviceConfig_Role >(0)},
        button_gpio_{0u},
        buzzer_gpio_{0u},
        rebroadcast_mode_{static_cast< ::meshtastic::Config_DeviceConfig_RebroadcastMode >(0)},
        node_info_broadcast_secs_{0u},
        serial_enabled_{false},
        double_tap_as_button_press_{false},
        is_managed_{false},
        disable_triple_click_{false},
        led_heartbeat_disabled_{false},
        buzzer_mode_{static_cast< ::meshtastic::Config_DeviceConfig_BuzzerMode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Config_DeviceConfig::Config_DeviceConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Config_DeviceConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Config_DeviceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Config_DeviceConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Config_DeviceConfigDefaultTypeInternal() {}
  union {
    Config_DeviceConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Config_DeviceConfigDefaultTypeInternal _Config_DeviceConfig_default_instance_;

inline constexpr Config_BluetoothConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        enabled_{false},
        mode_{static_cast< ::meshtastic::Config_BluetoothConfig_PairingMode >(0)},
        fixed_pin_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Config_BluetoothConfig::Config_BluetoothConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Config_BluetoothConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Config_BluetoothConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Config_BluetoothConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Config_BluetoothConfigDefaultTypeInternal() {}
  union {
    Config_BluetoothConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Config_BluetoothConfigDefaultTypeInternal _Config_BluetoothConfig_default_instance_;

inline constexpr Config_NetworkConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        wifi_ssid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        wifi_psk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ntp_server_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rsyslog_server_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ipv4_config_{nullptr},
        wifi_enabled_{false},
        eth_enabled_{false},
        ipv6_enabled_{false},
        address_mode_{static_cast< ::meshtastic::Config_NetworkConfig_AddressMode >(0)},
        enabled_protocols_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Config_NetworkConfig::Config_NetworkConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Config_NetworkConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Config_NetworkConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Config_NetworkConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Config_NetworkConfigDefaultTypeInternal() {}
  union {
    Config_NetworkConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Config_NetworkConfigDefaultTypeInternal _Config_NetworkConfig_default_instance_;

inline constexpr Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : payload_variant_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Config::Config(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Config_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace meshtastic
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_meshtastic_2fconfig_2eproto[15];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_meshtastic_2fconfig_2eproto = nullptr;
const ::uint32_t
    TableStruct_meshtastic_2fconfig_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DeviceConfig, _impl_._has_bits_),
        15, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DeviceConfig, _impl_.role_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DeviceConfig, _impl_.serial_enabled_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DeviceConfig, _impl_.button_gpio_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DeviceConfig, _impl_.buzzer_gpio_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DeviceConfig, _impl_.rebroadcast_mode_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DeviceConfig, _impl_.node_info_broadcast_secs_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DeviceConfig, _impl_.double_tap_as_button_press_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DeviceConfig, _impl_.is_managed_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DeviceConfig, _impl_.disable_triple_click_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DeviceConfig, _impl_.tzdef_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DeviceConfig, _impl_.led_heartbeat_disabled_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DeviceConfig, _impl_.buzzer_mode_),
        1,
        6,
        2,
        3,
        4,
        5,
        7,
        8,
        9,
        0,
        10,
        11,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PositionConfig, _impl_._has_bits_),
        16, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PositionConfig, _impl_.position_broadcast_secs_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PositionConfig, _impl_.position_broadcast_smart_enabled_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PositionConfig, _impl_.fixed_position_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PositionConfig, _impl_.gps_enabled_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PositionConfig, _impl_.gps_update_interval_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PositionConfig, _impl_.gps_attempt_time_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PositionConfig, _impl_.position_flags_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PositionConfig, _impl_.rx_gpio_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PositionConfig, _impl_.tx_gpio_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PositionConfig, _impl_.broadcast_smart_minimum_distance_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PositionConfig, _impl_.broadcast_smart_minimum_interval_secs_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PositionConfig, _impl_.gps_en_gpio_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PositionConfig, _impl_.gps_mode_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PowerConfig, _impl_._has_bits_),
        12, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PowerConfig, _impl_.is_power_saving_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PowerConfig, _impl_.on_battery_shutdown_after_secs_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PowerConfig, _impl_.adc_multiplier_override_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PowerConfig, _impl_.wait_bluetooth_secs_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PowerConfig, _impl_.sds_secs_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PowerConfig, _impl_.ls_secs_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PowerConfig, _impl_.min_wake_secs_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PowerConfig, _impl_.device_battery_ina_address_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_PowerConfig, _impl_.powermon_enables_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_NetworkConfig_IpV4Config, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_NetworkConfig_IpV4Config, _impl_.ip_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_NetworkConfig_IpV4Config, _impl_.gateway_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_NetworkConfig_IpV4Config, _impl_.subnet_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_NetworkConfig_IpV4Config, _impl_.dns_),
        0,
        1,
        2,
        3,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_NetworkConfig, _impl_._has_bits_),
        13, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_NetworkConfig, _impl_.wifi_enabled_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_NetworkConfig, _impl_.wifi_ssid_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_NetworkConfig, _impl_.wifi_psk_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_NetworkConfig, _impl_.ntp_server_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_NetworkConfig, _impl_.eth_enabled_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_NetworkConfig, _impl_.address_mode_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_NetworkConfig, _impl_.ipv4_config_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_NetworkConfig, _impl_.rsyslog_server_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_NetworkConfig, _impl_.enabled_protocols_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_NetworkConfig, _impl_.ipv6_enabled_),
        5,
        0,
        1,
        2,
        6,
        8,
        4,
        3,
        9,
        7,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DisplayConfig, _impl_._has_bits_),
        15, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DisplayConfig, _impl_.screen_on_secs_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DisplayConfig, _impl_.gps_format_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DisplayConfig, _impl_.auto_screen_carousel_secs_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DisplayConfig, _impl_.compass_north_top_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DisplayConfig, _impl_.flip_screen_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DisplayConfig, _impl_.units_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DisplayConfig, _impl_.oled_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DisplayConfig, _impl_.displaymode_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DisplayConfig, _impl_.heading_bold_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DisplayConfig, _impl_.wake_on_tap_or_motion_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DisplayConfig, _impl_.compass_orientation_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_DisplayConfig, _impl_.use_12h_clock_),
        0,
        1,
        2,
        5,
        6,
        3,
        4,
        9,
        7,
        8,
        10,
        11,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_._has_bits_),
        21, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.use_preset_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.modem_preset_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.bandwidth_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.spread_factor_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.coding_rate_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.frequency_offset_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.region_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.hop_limit_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.tx_enabled_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.tx_power_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.channel_num_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.override_duty_cycle_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.sx126x_rx_boosted_gain_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.override_frequency_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.pa_fan_disabled_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.ignore_incoming_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.ignore_mqtt_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_LoRaConfig, _impl_.config_ok_to_mqtt_),
        7,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        11,
        12,
        9,
        10,
        13,
        14,
        ~0u,
        15,
        16,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_BluetoothConfig, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_BluetoothConfig, _impl_.enabled_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_BluetoothConfig, _impl_.mode_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_BluetoothConfig, _impl_.fixed_pin_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_SecurityConfig, _impl_._has_bits_),
        10, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_SecurityConfig, _impl_.public_key_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_SecurityConfig, _impl_.private_key_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_SecurityConfig, _impl_.admin_key_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_SecurityConfig, _impl_.is_managed_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_SecurityConfig, _impl_.serial_enabled_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_SecurityConfig, _impl_.debug_log_api_enabled_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config_SecurityConfig, _impl_.admin_channel_enabled_),
        0,
        1,
        ~0u,
        2,
        3,
        4,
        5,
        0x000, // bitmap
        0x004, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config, _impl_._oneof_case_[0]),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config, _impl_.payload_variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config, _impl_.payload_variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config, _impl_.payload_variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config, _impl_.payload_variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config, _impl_.payload_variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config, _impl_.payload_variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config, _impl_.payload_variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config, _impl_.payload_variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config, _impl_.payload_variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config, _impl_.payload_variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Config, _impl_.payload_variant_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::meshtastic::Config_DeviceConfig)},
        {27, sizeof(::meshtastic::Config_PositionConfig)},
        {56, sizeof(::meshtastic::Config_PowerConfig)},
        {77, sizeof(::meshtastic::Config_NetworkConfig_IpV4Config)},
        {88, sizeof(::meshtastic::Config_NetworkConfig)},
        {111, sizeof(::meshtastic::Config_DisplayConfig)},
        {138, sizeof(::meshtastic::Config_LoRaConfig)},
        {177, sizeof(::meshtastic::Config_BluetoothConfig)},
        {186, sizeof(::meshtastic::Config_SecurityConfig)},
        {203, sizeof(::meshtastic::Config_SessionkeyConfig)},
        {204, sizeof(::meshtastic::Config)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::meshtastic::_Config_DeviceConfig_default_instance_._instance,
    &::meshtastic::_Config_PositionConfig_default_instance_._instance,
    &::meshtastic::_Config_PowerConfig_default_instance_._instance,
    &::meshtastic::_Config_NetworkConfig_IpV4Config_default_instance_._instance,
    &::meshtastic::_Config_NetworkConfig_default_instance_._instance,
    &::meshtastic::_Config_DisplayConfig_default_instance_._instance,
    &::meshtastic::_Config_LoRaConfig_default_instance_._instance,
    &::meshtastic::_Config_BluetoothConfig_default_instance_._instance,
    &::meshtastic::_Config_SecurityConfig_default_instance_._instance,
    &::meshtastic::_Config_SessionkeyConfig_default_instance_._instance,
    &::meshtastic::_Config_default_instance_._instance,
};
const char descriptor_table_protodef_meshtastic_2fconfig_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\027meshtastic/config.proto\022\nmeshtastic\032\032m"
    "eshtastic/device_ui.proto\"\205)\n\006Config\0221\n\006"
    "device\030\001 \001(\0132\037.meshtastic.Config.DeviceC"
    "onfigH\000\0225\n\010position\030\002 \001(\0132!.meshtastic.C"
    "onfig.PositionConfigH\000\022/\n\005power\030\003 \001(\0132\036."
    "meshtastic.Config.PowerConfigH\000\0223\n\007netwo"
    "rk\030\004 \001(\0132 .meshtastic.Config.NetworkConf"
    "igH\000\0223\n\007display\030\005 \001(\0132 .meshtastic.Confi"
    "g.DisplayConfigH\000\022-\n\004lora\030\006 \001(\0132\035.meshta"
    "stic.Config.LoRaConfigH\000\0227\n\tbluetooth\030\007 "
    "\001(\0132\".meshtastic.Config.BluetoothConfigH"
    "\000\0225\n\010security\030\010 \001(\0132!.meshtastic.Config."
    "SecurityConfigH\000\0229\n\nsessionkey\030\t \001(\0132#.m"
    "eshtastic.Config.SessionkeyConfigH\000\022/\n\td"
    "evice_ui\030\n \001(\0132\032.meshtastic.DeviceUIConf"
    "igH\000\032\362\006\n\014DeviceConfig\0222\n\004role\030\001 \001(\0162$.me"
    "shtastic.Config.DeviceConfig.Role\022\032\n\016ser"
    "ial_enabled\030\002 \001(\010B\002\030\001\022\023\n\013button_gpio\030\004 \001"
    "(\r\022\023\n\013buzzer_gpio\030\005 \001(\r\022I\n\020rebroadcast_m"
    "ode\030\006 \001(\0162/.meshtastic.Config.DeviceConf"
    "ig.RebroadcastMode\022 \n\030node_info_broadcas"
    "t_secs\030\007 \001(\r\022\"\n\032double_tap_as_button_pre"
    "ss\030\010 \001(\010\022\026\n\nis_managed\030\t \001(\010B\002\030\001\022\034\n\024disa"
    "ble_triple_click\030\n \001(\010\022\r\n\005tzdef\030\013 \001(\t\022\036\n"
    "\026led_heartbeat_disabled\030\014 \001(\010\022\?\n\013buzzer_"
    "mode\030\r \001(\0162*.meshtastic.Config.DeviceCon"
    "fig.BuzzerMode\"\320\001\n\004Role\022\n\n\006CLIENT\020\000\022\017\n\013C"
    "LIENT_MUTE\020\001\022\n\n\006ROUTER\020\002\022\025\n\rROUTER_CLIEN"
    "T\020\003\032\002\010\001\022\014\n\010REPEATER\020\004\022\013\n\007TRACKER\020\005\022\n\n\006SE"
    "NSOR\020\006\022\007\n\003TAK\020\007\022\021\n\rCLIENT_HIDDEN\020\010\022\022\n\016LO"
    "ST_AND_FOUND\020\t\022\017\n\013TAK_TRACKER\020\n\022\017\n\013ROUTE"
    "R_LATE\020\013\022\017\n\013CLIENT_BASE\020\014\"s\n\017Rebroadcast"
    "Mode\022\007\n\003ALL\020\000\022\025\n\021ALL_SKIP_DECODING\020\001\022\016\n\n"
    "LOCAL_ONLY\020\002\022\016\n\nKNOWN_ONLY\020\003\022\010\n\004NONE\020\004\022\026"
    "\n\022CORE_PORTNUMS_ONLY\020\005\"i\n\nBuzzerMode\022\017\n\013"
    "ALL_ENABLED\020\000\022\014\n\010DISABLED\020\001\022\026\n\022NOTIFICAT"
    "IONS_ONLY\020\002\022\017\n\013SYSTEM_ONLY\020\003\022\023\n\017DIRECT_M"
    "SG_ONLY\020\004\032\221\005\n\016PositionConfig\022\037\n\027position"
    "_broadcast_secs\030\001 \001(\r\022(\n position_broadc"
    "ast_smart_enabled\030\002 \001(\010\022\026\n\016fixed_positio"
    "n\030\003 \001(\010\022\027\n\013gps_enabled\030\004 \001(\010B\002\030\001\022\033\n\023gps_"
    "update_interval\030\005 \001(\r\022\034\n\020gps_attempt_tim"
    "e\030\006 \001(\rB\002\030\001\022\026\n\016position_flags\030\007 \001(\r\022\017\n\007r"
    "x_gpio\030\010 \001(\r\022\017\n\007tx_gpio\030\t \001(\r\022(\n broadca"
    "st_smart_minimum_distance\030\n \001(\r\022-\n%broad"
    "cast_smart_minimum_interval_secs\030\013 \001(\r\022\023"
    "\n\013gps_en_gpio\030\014 \001(\r\022;\n\010gps_mode\030\r \001(\0162)."
    "meshtastic.Config.PositionConfig.GpsMode"
    "\"\253\001\n\rPositionFlags\022\t\n\005UNSET\020\000\022\014\n\010ALTITUD"
    "E\020\001\022\020\n\014ALTITUDE_MSL\020\002\022\026\n\022GEOIDAL_SEPARAT"
    "ION\020\004\022\007\n\003DOP\020\010\022\t\n\005HVDOP\020\020\022\r\n\tSATINVIEW\020 "
    "\022\n\n\006SEQ_NO\020@\022\016\n\tTIMESTAMP\020\200\001\022\014\n\007HEADING\020"
    "\200\002\022\n\n\005SPEED\020\200\004\"5\n\007GpsMode\022\014\n\010DISABLED\020\000\022"
    "\013\n\007ENABLED\020\001\022\017\n\013NOT_PRESENT\020\002\032\204\002\n\013PowerC"
    "onfig\022\027\n\017is_power_saving\030\001 \001(\010\022&\n\036on_bat"
    "tery_shutdown_after_secs\030\002 \001(\r\022\037\n\027adc_mu"
    "ltiplier_override\030\003 \001(\002\022\033\n\023wait_bluetoot"
    "h_secs\030\004 \001(\r\022\020\n\010sds_secs\030\006 \001(\r\022\017\n\007ls_sec"
    "s\030\007 \001(\r\022\025\n\rmin_wake_secs\030\010 \001(\r\022\"\n\032device"
    "_battery_ina_address\030\t \001(\r\022\030\n\020powermon_e"
    "nables\030  \001(\004\032\345\003\n\rNetworkConfig\022\024\n\014wifi_e"
    "nabled\030\001 \001(\010\022\021\n\twifi_ssid\030\003 \001(\t\022\020\n\010wifi_"
    "psk\030\004 \001(\t\022\022\n\nntp_server\030\005 \001(\t\022\023\n\013eth_ena"
    "bled\030\006 \001(\010\022B\n\014address_mode\030\007 \001(\0162,.mesht"
    "astic.Config.NetworkConfig.AddressMode\022@"
    "\n\013ipv4_config\030\010 \001(\0132+.meshtastic.Config."
    "NetworkConfig.IpV4Config\022\026\n\016rsyslog_serv"
    "er\030\t \001(\t\022\031\n\021enabled_protocols\030\n \001(\r\022\024\n\014i"
    "pv6_enabled\030\013 \001(\010\032F\n\nIpV4Config\022\n\n\002ip\030\001 "
    "\001(\007\022\017\n\007gateway\030\002 \001(\007\022\016\n\006subnet\030\003 \001(\007\022\013\n\003"
    "dns\030\004 \001(\007\"#\n\013AddressMode\022\010\n\004DHCP\020\000\022\n\n\006ST"
    "ATIC\020\001\"4\n\rProtocolFlags\022\020\n\014NO_BROADCAST\020"
    "\000\022\021\n\rUDP_BROADCAST\020\001\032\205\010\n\rDisplayConfig\022\026"
    "\n\016screen_on_secs\030\001 \001(\r\022L\n\ngps_format\030\002 \001"
    "(\01624.meshtastic.Config.DisplayConfig.Gps"
    "CoordinateFormatB\002\030\001\022!\n\031auto_screen_caro"
    "usel_secs\030\003 \001(\r\022\035\n\021compass_north_top\030\004 \001"
    "(\010B\002\030\001\022\023\n\013flip_screen\030\005 \001(\010\022<\n\005units\030\006 \001"
    "(\0162-.meshtastic.Config.DisplayConfig.Dis"
    "playUnits\0227\n\004oled\030\007 \001(\0162).meshtastic.Con"
    "fig.DisplayConfig.OledType\022A\n\013displaymod"
    "e\030\010 \001(\0162,.meshtastic.Config.DisplayConfi"
    "g.DisplayMode\022\024\n\014heading_bold\030\t \001(\010\022\035\n\025w"
    "ake_on_tap_or_motion\030\n \001(\010\022P\n\023compass_or"
    "ientation\030\013 \001(\01623.meshtastic.Config.Disp"
    "layConfig.CompassOrientation\022\025\n\ruse_12h_"
    "clock\030\014 \001(\010\"M\n\023GpsCoordinateFormat\022\007\n\003DE"
    "C\020\000\022\007\n\003DMS\020\001\022\007\n\003UTM\020\002\022\010\n\004MGRS\020\003\022\007\n\003OLC\020\004"
    "\022\010\n\004OSGR\020\005\"(\n\014DisplayUnits\022\n\n\006METRIC\020\000\022\014"
    "\n\010IMPERIAL\020\001\"f\n\010OledType\022\r\n\tOLED_AUTO\020\000\022"
    "\020\n\014OLED_SSD1306\020\001\022\017\n\013OLED_SH1106\020\002\022\017\n\013OL"
    "ED_SH1107\020\003\022\027\n\023OLED_SH1107_128_128\020\004\"A\n\013"
    "DisplayMode\022\013\n\007DEFAULT\020\000\022\014\n\010TWOCOLOR\020\001\022\014"
    "\n\010INVERTED\020\002\022\t\n\005COLOR\020\003\"\272\001\n\022CompassOrien"
    "tation\022\r\n\tDEGREES_0\020\000\022\016\n\nDEGREES_90\020\001\022\017\n"
    "\013DEGREES_180\020\002\022\017\n\013DEGREES_270\020\003\022\026\n\022DEGRE"
    "ES_0_INVERTED\020\004\022\027\n\023DEGREES_90_INVERTED\020\005"
    "\022\030\n\024DEGREES_180_INVERTED\020\006\022\030\n\024DEGREES_27"
    "0_INVERTED\020\007\032\332\007\n\nLoRaConfig\022\022\n\nuse_prese"
    "t\030\001 \001(\010\022\?\n\014modem_preset\030\002 \001(\0162).meshtast"
    "ic.Config.LoRaConfig.ModemPreset\022\021\n\tband"
    "width\030\003 \001(\r\022\025\n\rspread_factor\030\004 \001(\r\022\023\n\013co"
    "ding_rate\030\005 \001(\r\022\030\n\020frequency_offset\030\006 \001("
    "\002\0228\n\006region\030\007 \001(\0162(.meshtastic.Config.Lo"
    "RaConfig.RegionCode\022\021\n\thop_limit\030\010 \001(\r\022\022"
    "\n\ntx_enabled\030\t \001(\010\022\020\n\010tx_power\030\n \001(\005\022\023\n\013"
    "channel_num\030\013 \001(\r\022\033\n\023override_duty_cycle"
    "\030\014 \001(\010\022\036\n\026sx126x_rx_boosted_gain\030\r \001(\010\022\032"
    "\n\022override_frequency\030\016 \001(\002\022\027\n\017pa_fan_dis"
    "abled\030\017 \001(\010\022\027\n\017ignore_incoming\030g \003(\r\022\023\n\013"
    "ignore_mqtt\030h \001(\010\022\031\n\021config_ok_to_mqtt\030i"
    " \001(\010\"\256\002\n\nRegionCode\022\t\n\005UNSET\020\000\022\006\n\002US\020\001\022\n"
    "\n\006EU_433\020\002\022\n\n\006EU_868\020\003\022\006\n\002CN\020\004\022\006\n\002JP\020\005\022\007"
    "\n\003ANZ\020\006\022\006\n\002KR\020\007\022\006\n\002TW\020\010\022\006\n\002RU\020\t\022\006\n\002IN\020\n\022"
    "\n\n\006NZ_865\020\013\022\006\n\002TH\020\014\022\013\n\007LORA_24\020\r\022\n\n\006UA_4"
    "33\020\016\022\n\n\006UA_868\020\017\022\n\n\006MY_433\020\020\022\n\n\006MY_919\020\021"
    "\022\n\n\006SG_923\020\022\022\n\n\006PH_433\020\023\022\n\n\006PH_868\020\024\022\n\n\006"
    "PH_915\020\025\022\013\n\007ANZ_433\020\026\022\n\n\006KZ_433\020\027\022\n\n\006KZ_"
    "863\020\030\022\n\n\006NP_865\020\031\022\n\n\006BR_902\020\032\"\251\001\n\013ModemP"
    "reset\022\r\n\tLONG_FAST\020\000\022\r\n\tLONG_SLOW\020\001\022\026\n\016V"
    "ERY_LONG_SLOW\020\002\032\002\010\001\022\017\n\013MEDIUM_SLOW\020\003\022\017\n\013"
    "MEDIUM_FAST\020\004\022\016\n\nSHORT_SLOW\020\005\022\016\n\nSHORT_F"
    "AST\020\006\022\021\n\rLONG_MODERATE\020\007\022\017\n\013SHORT_TURBO\020"
    "\010\032\255\001\n\017BluetoothConfig\022\017\n\007enabled\030\001 \001(\010\022<"
    "\n\004mode\030\002 \001(\0162..meshtastic.Config.Bluetoo"
    "thConfig.PairingMode\022\021\n\tfixed_pin\030\003 \001(\r\""
    "8\n\013PairingMode\022\016\n\nRANDOM_PIN\020\000\022\r\n\tFIXED_"
    "PIN\020\001\022\n\n\006NO_PIN\020\002\032\266\001\n\016SecurityConfig\022\022\n\n"
    "public_key\030\001 \001(\014\022\023\n\013private_key\030\002 \001(\014\022\021\n"
    "\tadmin_key\030\003 \003(\014\022\022\n\nis_managed\030\004 \001(\010\022\026\n\016"
    "serial_enabled\030\005 \001(\010\022\035\n\025debug_log_api_en"
    "abled\030\006 \001(\010\022\035\n\025admin_channel_enabled\030\010 \001"
    "(\010\032\022\n\020SessionkeyConfigB\021\n\017payload_varian"
    "tBa\n\023com.geeksville.meshB\014ConfigProtosZ\""
    "github.com/meshtastic/go/generated\252\002\024Mes"
    "htastic.Protobufs\272\002\000b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_meshtastic_2fconfig_2eproto_deps[1] = {
        &::descriptor_table_meshtastic_2fdevice_5fui_2eproto,
};
static ::absl::once_flag descriptor_table_meshtastic_2fconfig_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_meshtastic_2fconfig_2eproto = {
    false,
    false,
    5428,
    descriptor_table_protodef_meshtastic_2fconfig_2eproto,
    "meshtastic/config.proto",
    &descriptor_table_meshtastic_2fconfig_2eproto_once,
    descriptor_table_meshtastic_2fconfig_2eproto_deps,
    1,
    11,
    schemas,
    file_default_instances,
    TableStruct_meshtastic_2fconfig_2eproto::offsets,
    file_level_enum_descriptors_meshtastic_2fconfig_2eproto,
    file_level_service_descriptors_meshtastic_2fconfig_2eproto,
};
namespace meshtastic {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Config_DeviceConfig_Role_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fconfig_2eproto);
  return file_level_enum_descriptors_meshtastic_2fconfig_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Config_DeviceConfig_Role_internal_data_[] = {
    851968u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Config_DeviceConfig_RebroadcastMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fconfig_2eproto);
  return file_level_enum_descriptors_meshtastic_2fconfig_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t Config_DeviceConfig_RebroadcastMode_internal_data_[] = {
    393216u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Config_DeviceConfig_BuzzerMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fconfig_2eproto);
  return file_level_enum_descriptors_meshtastic_2fconfig_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t Config_DeviceConfig_BuzzerMode_internal_data_[] = {
    327680u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Config_PositionConfig_PositionFlags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fconfig_2eproto);
  return file_level_enum_descriptors_meshtastic_2fconfig_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t Config_PositionConfig_PositionFlags_internal_data_[] = {
    196608u, 196672u, 536879138u, 536870912u, 256u, 128u, 512u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Config_PositionConfig_GpsMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fconfig_2eproto);
  return file_level_enum_descriptors_meshtastic_2fconfig_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t Config_PositionConfig_GpsMode_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Config_NetworkConfig_AddressMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fconfig_2eproto);
  return file_level_enum_descriptors_meshtastic_2fconfig_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t Config_NetworkConfig_AddressMode_internal_data_[] = {
    131072u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Config_NetworkConfig_ProtocolFlags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fconfig_2eproto);
  return file_level_enum_descriptors_meshtastic_2fconfig_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t Config_NetworkConfig_ProtocolFlags_internal_data_[] = {
    131072u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Config_DisplayConfig_GpsCoordinateFormat_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fconfig_2eproto);
  return file_level_enum_descriptors_meshtastic_2fconfig_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t Config_DisplayConfig_GpsCoordinateFormat_internal_data_[] = {
    393216u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Config_DisplayConfig_DisplayUnits_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fconfig_2eproto);
  return file_level_enum_descriptors_meshtastic_2fconfig_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t Config_DisplayConfig_DisplayUnits_internal_data_[] = {
    131072u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Config_DisplayConfig_OledType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fconfig_2eproto);
  return file_level_enum_descriptors_meshtastic_2fconfig_2eproto[9];
}
PROTOBUF_CONSTINIT const uint32_t Config_DisplayConfig_OledType_internal_data_[] = {
    327680u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Config_DisplayConfig_DisplayMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fconfig_2eproto);
  return file_level_enum_descriptors_meshtastic_2fconfig_2eproto[10];
}
PROTOBUF_CONSTINIT const uint32_t Config_DisplayConfig_DisplayMode_internal_data_[] = {
    262144u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Config_DisplayConfig_CompassOrientation_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fconfig_2eproto);
  return file_level_enum_descriptors_meshtastic_2fconfig_2eproto[11];
}
PROTOBUF_CONSTINIT const uint32_t Config_DisplayConfig_CompassOrientation_internal_data_[] = {
    524288u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Config_LoRaConfig_RegionCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fconfig_2eproto);
  return file_level_enum_descriptors_meshtastic_2fconfig_2eproto[12];
}
PROTOBUF_CONSTINIT const uint32_t Config_LoRaConfig_RegionCode_internal_data_[] = {
    1769472u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Config_LoRaConfig_ModemPreset_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fconfig_2eproto);
  return file_level_enum_descriptors_meshtastic_2fconfig_2eproto[13];
}
PROTOBUF_CONSTINIT const uint32_t Config_LoRaConfig_ModemPreset_internal_data_[] = {
    589824u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Config_BluetoothConfig_PairingMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fconfig_2eproto);
  return file_level_enum_descriptors_meshtastic_2fconfig_2eproto[14];
}
PROTOBUF_CONSTINIT const uint32_t Config_BluetoothConfig_PairingMode_internal_data_[] = {
    196608u, 0u, };
// ===================================================================

class Config_DeviceConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Config_DeviceConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_._has_bits_);
};

Config_DeviceConfig::Config_DeviceConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_DeviceConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.Config.DeviceConfig)
}
PROTOBUF_NDEBUG_INLINE Config_DeviceConfig::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::meshtastic::Config_DeviceConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        tzdef_(arena, from.tzdef_) {}

Config_DeviceConfig::Config_DeviceConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Config_DeviceConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_DeviceConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Config_DeviceConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, role_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, role_),
           offsetof(Impl_, buzzer_mode_) -
               offsetof(Impl_, role_) +
               sizeof(Impl_::buzzer_mode_));

  // @@protoc_insertion_point(copy_constructor:meshtastic.Config.DeviceConfig)
}
PROTOBUF_NDEBUG_INLINE Config_DeviceConfig::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        tzdef_(arena) {}

inline void Config_DeviceConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, role_),
           0,
           offsetof(Impl_, buzzer_mode_) -
               offsetof(Impl_, role_) +
               sizeof(Impl_::buzzer_mode_));
}
Config_DeviceConfig::~Config_DeviceConfig() {
  // @@protoc_insertion_point(destructor:meshtastic.Config.DeviceConfig)
  SharedDtor(*this);
}
inline void Config_DeviceConfig::SharedDtor(MessageLite& self) {
  Config_DeviceConfig& this_ = static_cast<Config_DeviceConfig&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.tzdef_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Config_DeviceConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Config_DeviceConfig(arena);
}
constexpr auto Config_DeviceConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Config_DeviceConfig),
                                            alignof(Config_DeviceConfig));
}
constexpr auto Config_DeviceConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Config_DeviceConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Config_DeviceConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Config_DeviceConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Config_DeviceConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Config_DeviceConfig>(), &Config_DeviceConfig::ByteSizeLong,
              &Config_DeviceConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_._cached_size_),
          false,
      },
      &Config_DeviceConfig::kDescriptorMethods,
      &descriptor_table_meshtastic_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Config_DeviceConfig_class_data_ =
        Config_DeviceConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Config_DeviceConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Config_DeviceConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Config_DeviceConfig_class_data_.tc_table);
  return Config_DeviceConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 0, 52, 2>
Config_DeviceConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959108,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Config_DeviceConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::Config_DeviceConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .meshtastic.Config.DeviceConfig.Role role = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_DeviceConfig, _impl_.role_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.role_)}},
    // bool serial_enabled = 2 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_DeviceConfig, _impl_.serial_enabled_), 6>(),
     {16, 6, 0, PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.serial_enabled_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 button_gpio = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_DeviceConfig, _impl_.button_gpio_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.button_gpio_)}},
    // uint32 buzzer_gpio = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_DeviceConfig, _impl_.buzzer_gpio_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.buzzer_gpio_)}},
    // .meshtastic.Config.DeviceConfig.RebroadcastMode rebroadcast_mode = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_DeviceConfig, _impl_.rebroadcast_mode_), 4>(),
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.rebroadcast_mode_)}},
    // uint32 node_info_broadcast_secs = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_DeviceConfig, _impl_.node_info_broadcast_secs_), 5>(),
     {56, 5, 0, PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.node_info_broadcast_secs_)}},
    // bool double_tap_as_button_press = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_DeviceConfig, _impl_.double_tap_as_button_press_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.double_tap_as_button_press_)}},
    // bool is_managed = 9 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_DeviceConfig, _impl_.is_managed_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.is_managed_)}},
    // bool disable_triple_click = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_DeviceConfig, _impl_.disable_triple_click_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.disable_triple_click_)}},
    // string tzdef = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 0, 0, PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.tzdef_)}},
    // bool led_heartbeat_disabled = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_DeviceConfig, _impl_.led_heartbeat_disabled_), 10>(),
     {96, 10, 0, PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.led_heartbeat_disabled_)}},
    // .meshtastic.Config.DeviceConfig.BuzzerMode buzzer_mode = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_DeviceConfig, _impl_.buzzer_mode_), 11>(),
     {104, 11, 0, PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.buzzer_mode_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .meshtastic.Config.DeviceConfig.Role role = 1;
    {PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.role_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // bool serial_enabled = 2 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.serial_enabled_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // uint32 button_gpio = 4;
    {PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.button_gpio_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 buzzer_gpio = 5;
    {PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.buzzer_gpio_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .meshtastic.Config.DeviceConfig.RebroadcastMode rebroadcast_mode = 6;
    {PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.rebroadcast_mode_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // uint32 node_info_broadcast_secs = 7;
    {PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.node_info_broadcast_secs_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bool double_tap_as_button_press = 8;
    {PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.double_tap_as_button_press_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool is_managed = 9 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.is_managed_), _Internal::kHasBitsOffset + 8, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool disable_triple_click = 10;
    {PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.disable_triple_click_), _Internal::kHasBitsOffset + 9, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string tzdef = 11;
    {PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.tzdef_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool led_heartbeat_disabled = 12;
    {PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.led_heartbeat_disabled_), _Internal::kHasBitsOffset + 10, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .meshtastic.Config.DeviceConfig.BuzzerMode buzzer_mode = 13;
    {PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.buzzer_mode_), _Internal::kHasBitsOffset + 11, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\36\0\0\0\0\0\0\0\0\0\5\0\0\0\0\0"
    "meshtastic.Config.DeviceConfig"
    "tzdef"
  }},
};
PROTOBUF_NOINLINE void Config_DeviceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.Config.DeviceConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.tzdef_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x000000feU) != 0) {
    ::memset(&_impl_.role_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.double_tap_as_button_press_) -
        reinterpret_cast<char*>(&_impl_.role_)) + sizeof(_impl_.double_tap_as_button_press_));
  }
  if ((cached_has_bits & 0x00000f00U) != 0) {
    ::memset(&_impl_.is_managed_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.buzzer_mode_) -
        reinterpret_cast<char*>(&_impl_.is_managed_)) + sizeof(_impl_.buzzer_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Config_DeviceConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Config_DeviceConfig& this_ = static_cast<const Config_DeviceConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Config_DeviceConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Config_DeviceConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.Config.DeviceConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .meshtastic.Config.DeviceConfig.Role role = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_role() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_role(), target);
    }
  }

  // bool serial_enabled = 2 [deprecated = true];
  if ((this_._impl_._has_bits_[0] & 0x00000040U) != 0) {
    if (this_._internal_serial_enabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this_._internal_serial_enabled(), target);
    }
  }

  // uint32 button_gpio = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_button_gpio() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_button_gpio(), target);
    }
  }

  // uint32 buzzer_gpio = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_buzzer_gpio() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          5, this_._internal_buzzer_gpio(), target);
    }
  }

  // .meshtastic.Config.DeviceConfig.RebroadcastMode rebroadcast_mode = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_rebroadcast_mode() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          6, this_._internal_rebroadcast_mode(), target);
    }
  }

  // uint32 node_info_broadcast_secs = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (this_._internal_node_info_broadcast_secs() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          7, this_._internal_node_info_broadcast_secs(), target);
    }
  }

  // bool double_tap_as_button_press = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000080U) != 0) {
    if (this_._internal_double_tap_as_button_press() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          8, this_._internal_double_tap_as_button_press(), target);
    }
  }

  // bool is_managed = 9 [deprecated = true];
  if ((this_._impl_._has_bits_[0] & 0x00000100U) != 0) {
    if (this_._internal_is_managed() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          9, this_._internal_is_managed(), target);
    }
  }

  // bool disable_triple_click = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000200U) != 0) {
    if (this_._internal_disable_triple_click() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          10, this_._internal_disable_triple_click(), target);
    }
  }

  // string tzdef = 11;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_tzdef().empty()) {
      const ::std::string& _s = this_._internal_tzdef();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "meshtastic.Config.DeviceConfig.tzdef");
      target = stream->WriteStringMaybeAliased(11, _s, target);
    }
  }

  // bool led_heartbeat_disabled = 12;
  if ((this_._impl_._has_bits_[0] & 0x00000400U) != 0) {
    if (this_._internal_led_heartbeat_disabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          12, this_._internal_led_heartbeat_disabled(), target);
    }
  }

  // .meshtastic.Config.DeviceConfig.BuzzerMode buzzer_mode = 13;
  if ((this_._impl_._has_bits_[0] & 0x00000800U) != 0) {
    if (this_._internal_buzzer_mode() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          13, this_._internal_buzzer_mode(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.Config.DeviceConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Config_DeviceConfig::ByteSizeLong(const MessageLite& base) {
  const Config_DeviceConfig& this_ = static_cast<const Config_DeviceConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Config_DeviceConfig::ByteSizeLong() const {
  const Config_DeviceConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.Config.DeviceConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    // string tzdef = 11;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_tzdef().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_tzdef());
      }
    }
    // .meshtastic.Config.DeviceConfig.Role role = 1;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_role() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_role());
      }
    }
    // uint32 button_gpio = 4;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_button_gpio() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_button_gpio());
      }
    }
    // uint32 buzzer_gpio = 5;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_buzzer_gpio() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_buzzer_gpio());
      }
    }
    // .meshtastic.Config.DeviceConfig.RebroadcastMode rebroadcast_mode = 6;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_rebroadcast_mode() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_rebroadcast_mode());
      }
    }
    // uint32 node_info_broadcast_secs = 7;
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (this_._internal_node_info_broadcast_secs() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_node_info_broadcast_secs());
      }
    }
    // bool serial_enabled = 2 [deprecated = true];
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (this_._internal_serial_enabled() != 0) {
        total_size += 2;
      }
    }
    // bool double_tap_as_button_press = 8;
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (this_._internal_double_tap_as_button_press() != 0) {
        total_size += 2;
      }
    }
  }
  if ((cached_has_bits & 0x00000f00U) != 0) {
    // bool is_managed = 9 [deprecated = true];
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (this_._internal_is_managed() != 0) {
        total_size += 2;
      }
    }
    // bool disable_triple_click = 10;
    if ((cached_has_bits & 0x00000200U) != 0) {
      if (this_._internal_disable_triple_click() != 0) {
        total_size += 2;
      }
    }
    // bool led_heartbeat_disabled = 12;
    if ((cached_has_bits & 0x00000400U) != 0) {
      if (this_._internal_led_heartbeat_disabled() != 0) {
        total_size += 2;
      }
    }
    // .meshtastic.Config.DeviceConfig.BuzzerMode buzzer_mode = 13;
    if ((cached_has_bits & 0x00000800U) != 0) {
      if (this_._internal_buzzer_mode() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_buzzer_mode());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Config_DeviceConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Config_DeviceConfig*>(&to_msg);
  auto& from = static_cast<const Config_DeviceConfig&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.Config.DeviceConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_tzdef().empty()) {
        _this->_internal_set_tzdef(from._internal_tzdef());
      } else {
        if (_this->_impl_.tzdef_.IsDefault()) {
          _this->_internal_set_tzdef("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_role() != 0) {
        _this->_impl_.role_ = from._impl_.role_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_button_gpio() != 0) {
        _this->_impl_.button_gpio_ = from._impl_.button_gpio_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_buzzer_gpio() != 0) {
        _this->_impl_.buzzer_gpio_ = from._impl_.buzzer_gpio_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_rebroadcast_mode() != 0) {
        _this->_impl_.rebroadcast_mode_ = from._impl_.rebroadcast_mode_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (from._internal_node_info_broadcast_secs() != 0) {
        _this->_impl_.node_info_broadcast_secs_ = from._impl_.node_info_broadcast_secs_;
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (from._internal_serial_enabled() != 0) {
        _this->_impl_.serial_enabled_ = from._impl_.serial_enabled_;
      }
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (from._internal_double_tap_as_button_press() != 0) {
        _this->_impl_.double_tap_as_button_press_ = from._impl_.double_tap_as_button_press_;
      }
    }
  }
  if ((cached_has_bits & 0x00000f00U) != 0) {
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (from._internal_is_managed() != 0) {
        _this->_impl_.is_managed_ = from._impl_.is_managed_;
      }
    }
    if ((cached_has_bits & 0x00000200U) != 0) {
      if (from._internal_disable_triple_click() != 0) {
        _this->_impl_.disable_triple_click_ = from._impl_.disable_triple_click_;
      }
    }
    if ((cached_has_bits & 0x00000400U) != 0) {
      if (from._internal_led_heartbeat_disabled() != 0) {
        _this->_impl_.led_heartbeat_disabled_ = from._impl_.led_heartbeat_disabled_;
      }
    }
    if ((cached_has_bits & 0x00000800U) != 0) {
      if (from._internal_buzzer_mode() != 0) {
        _this->_impl_.buzzer_mode_ = from._impl_.buzzer_mode_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config_DeviceConfig::CopyFrom(const Config_DeviceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.Config.DeviceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Config_DeviceConfig::InternalSwap(Config_DeviceConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tzdef_, &other->_impl_.tzdef_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.buzzer_mode_)
      + sizeof(Config_DeviceConfig::_impl_.buzzer_mode_)
      - PROTOBUF_FIELD_OFFSET(Config_DeviceConfig, _impl_.role_)>(
          reinterpret_cast<char*>(&_impl_.role_),
          reinterpret_cast<char*>(&other->_impl_.role_));
}

::google::protobuf::Metadata Config_DeviceConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Config_PositionConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Config_PositionConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_._has_bits_);
};

Config_PositionConfig::Config_PositionConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_PositionConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.Config.PositionConfig)
}
Config_PositionConfig::Config_PositionConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Config_PositionConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_PositionConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE Config_PositionConfig::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Config_PositionConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_broadcast_secs_),
           0,
           offsetof(Impl_, gps_mode_) -
               offsetof(Impl_, position_broadcast_secs_) +
               sizeof(Impl_::gps_mode_));
}
Config_PositionConfig::~Config_PositionConfig() {
  // @@protoc_insertion_point(destructor:meshtastic.Config.PositionConfig)
  SharedDtor(*this);
}
inline void Config_PositionConfig::SharedDtor(MessageLite& self) {
  Config_PositionConfig& this_ = static_cast<Config_PositionConfig&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Config_PositionConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Config_PositionConfig(arena);
}
constexpr auto Config_PositionConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Config_PositionConfig),
                                            alignof(Config_PositionConfig));
}
constexpr auto Config_PositionConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Config_PositionConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Config_PositionConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Config_PositionConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Config_PositionConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Config_PositionConfig>(), &Config_PositionConfig::ByteSizeLong,
              &Config_PositionConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_._cached_size_),
          false,
      },
      &Config_PositionConfig::kDescriptorMethods,
      &descriptor_table_meshtastic_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Config_PositionConfig_class_data_ =
        Config_PositionConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Config_PositionConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Config_PositionConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Config_PositionConfig_class_data_.tc_table);
  return Config_PositionConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 0, 0, 2>
Config_PositionConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Config_PositionConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::Config_PositionConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 position_broadcast_secs = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_PositionConfig, _impl_.position_broadcast_secs_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.position_broadcast_secs_)}},
    // bool position_broadcast_smart_enabled = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_PositionConfig, _impl_.position_broadcast_smart_enabled_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.position_broadcast_smart_enabled_)}},
    // bool fixed_position = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_PositionConfig, _impl_.fixed_position_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.fixed_position_)}},
    // bool gps_enabled = 4 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_PositionConfig, _impl_.gps_enabled_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.gps_enabled_)}},
    // uint32 gps_update_interval = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_PositionConfig, _impl_.gps_update_interval_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.gps_update_interval_)}},
    // uint32 gps_attempt_time = 6 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_PositionConfig, _impl_.gps_attempt_time_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.gps_attempt_time_)}},
    // uint32 position_flags = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_PositionConfig, _impl_.position_flags_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.position_flags_)}},
    // uint32 rx_gpio = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_PositionConfig, _impl_.rx_gpio_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.rx_gpio_)}},
    // uint32 tx_gpio = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_PositionConfig, _impl_.tx_gpio_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.tx_gpio_)}},
    // uint32 broadcast_smart_minimum_distance = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_PositionConfig, _impl_.broadcast_smart_minimum_distance_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.broadcast_smart_minimum_distance_)}},
    // uint32 broadcast_smart_minimum_interval_secs = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_PositionConfig, _impl_.broadcast_smart_minimum_interval_secs_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.broadcast_smart_minimum_interval_secs_)}},
    // uint32 gps_en_gpio = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_PositionConfig, _impl_.gps_en_gpio_), 11>(),
     {96, 11, 0, PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.gps_en_gpio_)}},
    // .meshtastic.Config.PositionConfig.GpsMode gps_mode = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_PositionConfig, _impl_.gps_mode_), 12>(),
     {104, 12, 0, PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.gps_mode_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 position_broadcast_secs = 1;
    {PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.position_broadcast_secs_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bool position_broadcast_smart_enabled = 2;
    {PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.position_broadcast_smart_enabled_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool fixed_position = 3;
    {PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.fixed_position_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool gps_enabled = 4 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.gps_enabled_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // uint32 gps_update_interval = 5;
    {PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.gps_update_interval_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 gps_attempt_time = 6 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.gps_attempt_time_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 position_flags = 7;
    {PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.position_flags_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 rx_gpio = 8;
    {PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.rx_gpio_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 tx_gpio = 9;
    {PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.tx_gpio_), _Internal::kHasBitsOffset + 8, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 broadcast_smart_minimum_distance = 10;
    {PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.broadcast_smart_minimum_distance_), _Internal::kHasBitsOffset + 9, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 broadcast_smart_minimum_interval_secs = 11;
    {PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.broadcast_smart_minimum_interval_secs_), _Internal::kHasBitsOffset + 10, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 gps_en_gpio = 12;
    {PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.gps_en_gpio_), _Internal::kHasBitsOffset + 11, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .meshtastic.Config.PositionConfig.GpsMode gps_mode = 13;
    {PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.gps_mode_), _Internal::kHasBitsOffset + 12, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Config_PositionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.Config.PositionConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    ::memset(&_impl_.position_broadcast_secs_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.rx_gpio_) -
        reinterpret_cast<char*>(&_impl_.position_broadcast_secs_)) + sizeof(_impl_.rx_gpio_));
  }
  if ((cached_has_bits & 0x00001f00U) != 0) {
    ::memset(&_impl_.tx_gpio_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.gps_mode_) -
        reinterpret_cast<char*>(&_impl_.tx_gpio_)) + sizeof(_impl_.gps_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Config_PositionConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Config_PositionConfig& this_ = static_cast<const Config_PositionConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Config_PositionConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Config_PositionConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.Config.PositionConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 position_broadcast_secs = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (this_._internal_position_broadcast_secs() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_position_broadcast_secs(), target);
    }
  }

  // bool position_broadcast_smart_enabled = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_position_broadcast_smart_enabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this_._internal_position_broadcast_smart_enabled(), target);
    }
  }

  // bool fixed_position = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_fixed_position() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_fixed_position(), target);
    }
  }

  // bool gps_enabled = 4 [deprecated = true];
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_gps_enabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          4, this_._internal_gps_enabled(), target);
    }
  }

  // uint32 gps_update_interval = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_gps_update_interval() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          5, this_._internal_gps_update_interval(), target);
    }
  }

  // uint32 gps_attempt_time = 6 [deprecated = true];
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (this_._internal_gps_attempt_time() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          6, this_._internal_gps_attempt_time(), target);
    }
  }

  // uint32 position_flags = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040U) != 0) {
    if (this_._internal_position_flags() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          7, this_._internal_position_flags(), target);
    }
  }

  // uint32 rx_gpio = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000080U) != 0) {
    if (this_._internal_rx_gpio() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          8, this_._internal_rx_gpio(), target);
    }
  }

  // uint32 tx_gpio = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000100U) != 0) {
    if (this_._internal_tx_gpio() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          9, this_._internal_tx_gpio(), target);
    }
  }

  // uint32 broadcast_smart_minimum_distance = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000200U) != 0) {
    if (this_._internal_broadcast_smart_minimum_distance() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          10, this_._internal_broadcast_smart_minimum_distance(), target);
    }
  }

  // uint32 broadcast_smart_minimum_interval_secs = 11;
  if ((this_._impl_._has_bits_[0] & 0x00000400U) != 0) {
    if (this_._internal_broadcast_smart_minimum_interval_secs() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          11, this_._internal_broadcast_smart_minimum_interval_secs(), target);
    }
  }

  // uint32 gps_en_gpio = 12;
  if ((this_._impl_._has_bits_[0] & 0x00000800U) != 0) {
    if (this_._internal_gps_en_gpio() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          12, this_._internal_gps_en_gpio(), target);
    }
  }

  // .meshtastic.Config.PositionConfig.GpsMode gps_mode = 13;
  if ((this_._impl_._has_bits_[0] & 0x00001000U) != 0) {
    if (this_._internal_gps_mode() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          13, this_._internal_gps_mode(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.Config.PositionConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Config_PositionConfig::ByteSizeLong(const MessageLite& base) {
  const Config_PositionConfig& this_ = static_cast<const Config_PositionConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Config_PositionConfig::ByteSizeLong() const {
  const Config_PositionConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.Config.PositionConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    // uint32 position_broadcast_secs = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (this_._internal_position_broadcast_secs() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_position_broadcast_secs());
      }
    }
    // bool position_broadcast_smart_enabled = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_position_broadcast_smart_enabled() != 0) {
        total_size += 2;
      }
    }
    // bool fixed_position = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_fixed_position() != 0) {
        total_size += 2;
      }
    }
    // bool gps_enabled = 4 [deprecated = true];
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_gps_enabled() != 0) {
        total_size += 2;
      }
    }
    // uint32 gps_update_interval = 5;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_gps_update_interval() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_gps_update_interval());
      }
    }
    // uint32 gps_attempt_time = 6 [deprecated = true];
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (this_._internal_gps_attempt_time() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_gps_attempt_time());
      }
    }
    // uint32 position_flags = 7;
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (this_._internal_position_flags() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_position_flags());
      }
    }
    // uint32 rx_gpio = 8;
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (this_._internal_rx_gpio() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_rx_gpio());
      }
    }
  }
  if ((cached_has_bits & 0x00001f00U) != 0) {
    // uint32 tx_gpio = 9;
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (this_._internal_tx_gpio() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_tx_gpio());
      }
    }
    // uint32 broadcast_smart_minimum_distance = 10;
    if ((cached_has_bits & 0x00000200U) != 0) {
      if (this_._internal_broadcast_smart_minimum_distance() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_broadcast_smart_minimum_distance());
      }
    }
    // uint32 broadcast_smart_minimum_interval_secs = 11;
    if ((cached_has_bits & 0x00000400U) != 0) {
      if (this_._internal_broadcast_smart_minimum_interval_secs() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_broadcast_smart_minimum_interval_secs());
      }
    }
    // uint32 gps_en_gpio = 12;
    if ((cached_has_bits & 0x00000800U) != 0) {
      if (this_._internal_gps_en_gpio() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_gps_en_gpio());
      }
    }
    // .meshtastic.Config.PositionConfig.GpsMode gps_mode = 13;
    if ((cached_has_bits & 0x00001000U) != 0) {
      if (this_._internal_gps_mode() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_gps_mode());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Config_PositionConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Config_PositionConfig*>(&to_msg);
  auto& from = static_cast<const Config_PositionConfig&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.Config.PositionConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (from._internal_position_broadcast_secs() != 0) {
        _this->_impl_.position_broadcast_secs_ = from._impl_.position_broadcast_secs_;
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_position_broadcast_smart_enabled() != 0) {
        _this->_impl_.position_broadcast_smart_enabled_ = from._impl_.position_broadcast_smart_enabled_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_fixed_position() != 0) {
        _this->_impl_.fixed_position_ = from._impl_.fixed_position_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_gps_enabled() != 0) {
        _this->_impl_.gps_enabled_ = from._impl_.gps_enabled_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_gps_update_interval() != 0) {
        _this->_impl_.gps_update_interval_ = from._impl_.gps_update_interval_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (from._internal_gps_attempt_time() != 0) {
        _this->_impl_.gps_attempt_time_ = from._impl_.gps_attempt_time_;
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (from._internal_position_flags() != 0) {
        _this->_impl_.position_flags_ = from._impl_.position_flags_;
      }
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (from._internal_rx_gpio() != 0) {
        _this->_impl_.rx_gpio_ = from._impl_.rx_gpio_;
      }
    }
  }
  if ((cached_has_bits & 0x00001f00U) != 0) {
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (from._internal_tx_gpio() != 0) {
        _this->_impl_.tx_gpio_ = from._impl_.tx_gpio_;
      }
    }
    if ((cached_has_bits & 0x00000200U) != 0) {
      if (from._internal_broadcast_smart_minimum_distance() != 0) {
        _this->_impl_.broadcast_smart_minimum_distance_ = from._impl_.broadcast_smart_minimum_distance_;
      }
    }
    if ((cached_has_bits & 0x00000400U) != 0) {
      if (from._internal_broadcast_smart_minimum_interval_secs() != 0) {
        _this->_impl_.broadcast_smart_minimum_interval_secs_ = from._impl_.broadcast_smart_minimum_interval_secs_;
      }
    }
    if ((cached_has_bits & 0x00000800U) != 0) {
      if (from._internal_gps_en_gpio() != 0) {
        _this->_impl_.gps_en_gpio_ = from._impl_.gps_en_gpio_;
      }
    }
    if ((cached_has_bits & 0x00001000U) != 0) {
      if (from._internal_gps_mode() != 0) {
        _this->_impl_.gps_mode_ = from._impl_.gps_mode_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config_PositionConfig::CopyFrom(const Config_PositionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.Config.PositionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Config_PositionConfig::InternalSwap(Config_PositionConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.gps_mode_)
      + sizeof(Config_PositionConfig::_impl_.gps_mode_)
      - PROTOBUF_FIELD_OFFSET(Config_PositionConfig, _impl_.position_broadcast_secs_)>(
          reinterpret_cast<char*>(&_impl_.position_broadcast_secs_),
          reinterpret_cast<char*>(&other->_impl_.position_broadcast_secs_));
}

::google::protobuf::Metadata Config_PositionConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Config_PowerConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Config_PowerConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_._has_bits_);
};

Config_PowerConfig::Config_PowerConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_PowerConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.Config.PowerConfig)
}
Config_PowerConfig::Config_PowerConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Config_PowerConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_PowerConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE Config_PowerConfig::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Config_PowerConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_power_saving_),
           0,
           offsetof(Impl_, powermon_enables_) -
               offsetof(Impl_, is_power_saving_) +
               sizeof(Impl_::powermon_enables_));
}
Config_PowerConfig::~Config_PowerConfig() {
  // @@protoc_insertion_point(destructor:meshtastic.Config.PowerConfig)
  SharedDtor(*this);
}
inline void Config_PowerConfig::SharedDtor(MessageLite& self) {
  Config_PowerConfig& this_ = static_cast<Config_PowerConfig&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Config_PowerConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Config_PowerConfig(arena);
}
constexpr auto Config_PowerConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Config_PowerConfig),
                                            alignof(Config_PowerConfig));
}
constexpr auto Config_PowerConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Config_PowerConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Config_PowerConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Config_PowerConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Config_PowerConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Config_PowerConfig>(), &Config_PowerConfig::ByteSizeLong,
              &Config_PowerConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_._cached_size_),
          false,
      },
      &Config_PowerConfig::kDescriptorMethods,
      &descriptor_table_meshtastic_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Config_PowerConfig_class_data_ =
        Config_PowerConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Config_PowerConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Config_PowerConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Config_PowerConfig_class_data_.tc_table);
  return Config_PowerConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 0, 2>
Config_PowerConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_._has_bits_),
    0, // no _extensions_
    32, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    2147483152,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Config_PowerConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::Config_PowerConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint64 powermon_enables = 32;
    {::_pbi::TcParser::FastV64S2,
     {640, 8, 0, PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.powermon_enables_)}},
    // bool is_power_saving = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_PowerConfig, _impl_.is_power_saving_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.is_power_saving_)}},
    // uint32 on_battery_shutdown_after_secs = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_PowerConfig, _impl_.on_battery_shutdown_after_secs_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.on_battery_shutdown_after_secs_)}},
    // float adc_multiplier_override = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.adc_multiplier_override_)}},
    // uint32 wait_bluetooth_secs = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_PowerConfig, _impl_.wait_bluetooth_secs_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.wait_bluetooth_secs_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 sds_secs = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_PowerConfig, _impl_.sds_secs_), 4>(),
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.sds_secs_)}},
    // uint32 ls_secs = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_PowerConfig, _impl_.ls_secs_), 5>(),
     {56, 5, 0, PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.ls_secs_)}},
    // uint32 min_wake_secs = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_PowerConfig, _impl_.min_wake_secs_), 6>(),
     {64, 6, 0, PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.min_wake_secs_)}},
    // uint32 device_battery_ina_address = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_PowerConfig, _impl_.device_battery_ina_address_), 7>(),
     {72, 7, 0, PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.device_battery_ina_address_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool is_power_saving = 1;
    {PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.is_power_saving_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // uint32 on_battery_shutdown_after_secs = 2;
    {PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.on_battery_shutdown_after_secs_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // float adc_multiplier_override = 3;
    {PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.adc_multiplier_override_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // uint32 wait_bluetooth_secs = 4;
    {PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.wait_bluetooth_secs_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 sds_secs = 6;
    {PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.sds_secs_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 ls_secs = 7;
    {PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.ls_secs_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 min_wake_secs = 8;
    {PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.min_wake_secs_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 device_battery_ina_address = 9;
    {PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.device_battery_ina_address_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint64 powermon_enables = 32;
    {PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.powermon_enables_), _Internal::kHasBitsOffset + 8, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Config_PowerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.Config.PowerConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    ::memset(&_impl_.is_power_saving_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.device_battery_ina_address_) -
        reinterpret_cast<char*>(&_impl_.is_power_saving_)) + sizeof(_impl_.device_battery_ina_address_));
  }
  _impl_.powermon_enables_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Config_PowerConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Config_PowerConfig& this_ = static_cast<const Config_PowerConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Config_PowerConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Config_PowerConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.Config.PowerConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool is_power_saving = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (this_._internal_is_power_saving() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_is_power_saving(), target);
    }
  }

  // uint32 on_battery_shutdown_after_secs = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_on_battery_shutdown_after_secs() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_on_battery_shutdown_after_secs(), target);
    }
  }

  // float adc_multiplier_override = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_adc_multiplier_override()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          3, this_._internal_adc_multiplier_override(), target);
    }
  }

  // uint32 wait_bluetooth_secs = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_wait_bluetooth_secs() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_wait_bluetooth_secs(), target);
    }
  }

  // uint32 sds_secs = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_sds_secs() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          6, this_._internal_sds_secs(), target);
    }
  }

  // uint32 ls_secs = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (this_._internal_ls_secs() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          7, this_._internal_ls_secs(), target);
    }
  }

  // uint32 min_wake_secs = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000040U) != 0) {
    if (this_._internal_min_wake_secs() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          8, this_._internal_min_wake_secs(), target);
    }
  }

  // uint32 device_battery_ina_address = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000080U) != 0) {
    if (this_._internal_device_battery_ina_address() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          9, this_._internal_device_battery_ina_address(), target);
    }
  }

  // uint64 powermon_enables = 32;
  if ((this_._impl_._has_bits_[0] & 0x00000100U) != 0) {
    if (this_._internal_powermon_enables() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          32, this_._internal_powermon_enables(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.Config.PowerConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Config_PowerConfig::ByteSizeLong(const MessageLite& base) {
  const Config_PowerConfig& this_ = static_cast<const Config_PowerConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Config_PowerConfig::ByteSizeLong() const {
  const Config_PowerConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.Config.PowerConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    // bool is_power_saving = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (this_._internal_is_power_saving() != 0) {
        total_size += 2;
      }
    }
    // uint32 on_battery_shutdown_after_secs = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_on_battery_shutdown_after_secs() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_on_battery_shutdown_after_secs());
      }
    }
    // float adc_multiplier_override = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_adc_multiplier_override()) != 0) {
        total_size += 5;
      }
    }
    // uint32 wait_bluetooth_secs = 4;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_wait_bluetooth_secs() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_wait_bluetooth_secs());
      }
    }
    // uint32 sds_secs = 6;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_sds_secs() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_sds_secs());
      }
    }
    // uint32 ls_secs = 7;
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (this_._internal_ls_secs() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_ls_secs());
      }
    }
    // uint32 min_wake_secs = 8;
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (this_._internal_min_wake_secs() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_min_wake_secs());
      }
    }
    // uint32 device_battery_ina_address = 9;
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (this_._internal_device_battery_ina_address() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_device_battery_ina_address());
      }
    }
  }
   {
    // uint64 powermon_enables = 32;
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (this_._internal_powermon_enables() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                        this_._internal_powermon_enables());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Config_PowerConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Config_PowerConfig*>(&to_msg);
  auto& from = static_cast<const Config_PowerConfig&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.Config.PowerConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (from._internal_is_power_saving() != 0) {
        _this->_impl_.is_power_saving_ = from._impl_.is_power_saving_;
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_on_battery_shutdown_after_secs() != 0) {
        _this->_impl_.on_battery_shutdown_after_secs_ = from._impl_.on_battery_shutdown_after_secs_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_adc_multiplier_override()) != 0) {
        _this->_impl_.adc_multiplier_override_ = from._impl_.adc_multiplier_override_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_wait_bluetooth_secs() != 0) {
        _this->_impl_.wait_bluetooth_secs_ = from._impl_.wait_bluetooth_secs_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_sds_secs() != 0) {
        _this->_impl_.sds_secs_ = from._impl_.sds_secs_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (from._internal_ls_secs() != 0) {
        _this->_impl_.ls_secs_ = from._impl_.ls_secs_;
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (from._internal_min_wake_secs() != 0) {
        _this->_impl_.min_wake_secs_ = from._impl_.min_wake_secs_;
      }
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (from._internal_device_battery_ina_address() != 0) {
        _this->_impl_.device_battery_ina_address_ = from._impl_.device_battery_ina_address_;
      }
    }
  }
  if ((cached_has_bits & 0x00000100U) != 0) {
    if (from._internal_powermon_enables() != 0) {
      _this->_impl_.powermon_enables_ = from._impl_.powermon_enables_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config_PowerConfig::CopyFrom(const Config_PowerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.Config.PowerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Config_PowerConfig::InternalSwap(Config_PowerConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.powermon_enables_)
      + sizeof(Config_PowerConfig::_impl_.powermon_enables_)
      - PROTOBUF_FIELD_OFFSET(Config_PowerConfig, _impl_.is_power_saving_)>(
          reinterpret_cast<char*>(&_impl_.is_power_saving_),
          reinterpret_cast<char*>(&other->_impl_.is_power_saving_));
}

::google::protobuf::Metadata Config_PowerConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Config_NetworkConfig_IpV4Config::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Config_NetworkConfig_IpV4Config>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Config_NetworkConfig_IpV4Config, _impl_._has_bits_);
};

Config_NetworkConfig_IpV4Config::Config_NetworkConfig_IpV4Config(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_NetworkConfig_IpV4Config_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.Config.NetworkConfig.IpV4Config)
}
Config_NetworkConfig_IpV4Config::Config_NetworkConfig_IpV4Config(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Config_NetworkConfig_IpV4Config& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_NetworkConfig_IpV4Config_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE Config_NetworkConfig_IpV4Config::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Config_NetworkConfig_IpV4Config::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ip_),
           0,
           offsetof(Impl_, dns_) -
               offsetof(Impl_, ip_) +
               sizeof(Impl_::dns_));
}
Config_NetworkConfig_IpV4Config::~Config_NetworkConfig_IpV4Config() {
  // @@protoc_insertion_point(destructor:meshtastic.Config.NetworkConfig.IpV4Config)
  SharedDtor(*this);
}
inline void Config_NetworkConfig_IpV4Config::SharedDtor(MessageLite& self) {
  Config_NetworkConfig_IpV4Config& this_ = static_cast<Config_NetworkConfig_IpV4Config&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Config_NetworkConfig_IpV4Config::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Config_NetworkConfig_IpV4Config(arena);
}
constexpr auto Config_NetworkConfig_IpV4Config::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Config_NetworkConfig_IpV4Config),
                                            alignof(Config_NetworkConfig_IpV4Config));
}
constexpr auto Config_NetworkConfig_IpV4Config::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Config_NetworkConfig_IpV4Config_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Config_NetworkConfig_IpV4Config::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Config_NetworkConfig_IpV4Config>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Config_NetworkConfig_IpV4Config::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Config_NetworkConfig_IpV4Config>(), &Config_NetworkConfig_IpV4Config::ByteSizeLong,
              &Config_NetworkConfig_IpV4Config::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Config_NetworkConfig_IpV4Config, _impl_._cached_size_),
          false,
      },
      &Config_NetworkConfig_IpV4Config::kDescriptorMethods,
      &descriptor_table_meshtastic_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Config_NetworkConfig_IpV4Config_class_data_ =
        Config_NetworkConfig_IpV4Config::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Config_NetworkConfig_IpV4Config::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Config_NetworkConfig_IpV4Config_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Config_NetworkConfig_IpV4Config_class_data_.tc_table);
  return Config_NetworkConfig_IpV4Config_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2>
Config_NetworkConfig_IpV4Config::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config_NetworkConfig_IpV4Config, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Config_NetworkConfig_IpV4Config_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::Config_NetworkConfig_IpV4Config>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // fixed32 dns = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(Config_NetworkConfig_IpV4Config, _impl_.dns_)}},
    // fixed32 ip = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(Config_NetworkConfig_IpV4Config, _impl_.ip_)}},
    // fixed32 gateway = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(Config_NetworkConfig_IpV4Config, _impl_.gateway_)}},
    // fixed32 subnet = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(Config_NetworkConfig_IpV4Config, _impl_.subnet_)}},
  }}, {{
    65535, 65535
  }}, {{
    // fixed32 ip = 1;
    {PROTOBUF_FIELD_OFFSET(Config_NetworkConfig_IpV4Config, _impl_.ip_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // fixed32 gateway = 2;
    {PROTOBUF_FIELD_OFFSET(Config_NetworkConfig_IpV4Config, _impl_.gateway_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // fixed32 subnet = 3;
    {PROTOBUF_FIELD_OFFSET(Config_NetworkConfig_IpV4Config, _impl_.subnet_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // fixed32 dns = 4;
    {PROTOBUF_FIELD_OFFSET(Config_NetworkConfig_IpV4Config, _impl_.dns_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Config_NetworkConfig_IpV4Config::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.Config.NetworkConfig.IpV4Config)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fU) != 0) {
    ::memset(&_impl_.ip_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.dns_) -
        reinterpret_cast<char*>(&_impl_.ip_)) + sizeof(_impl_.dns_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Config_NetworkConfig_IpV4Config::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Config_NetworkConfig_IpV4Config& this_ = static_cast<const Config_NetworkConfig_IpV4Config&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Config_NetworkConfig_IpV4Config::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Config_NetworkConfig_IpV4Config& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.Config.NetworkConfig.IpV4Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // fixed32 ip = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (this_._internal_ip() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
          1, this_._internal_ip(), target);
    }
  }

  // fixed32 gateway = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_gateway() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
          2, this_._internal_gateway(), target);
    }
  }

  // fixed32 subnet = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_subnet() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
          3, this_._internal_subnet(), target);
    }
  }

  // fixed32 dns = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_dns() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
          4, this_._internal_dns(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.Config.NetworkConfig.IpV4Config)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Config_NetworkConfig_IpV4Config::ByteSizeLong(const MessageLite& base) {
  const Config_NetworkConfig_IpV4Config& this_ = static_cast<const Config_NetworkConfig_IpV4Config&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Config_NetworkConfig_IpV4Config::ByteSizeLong() const {
  const Config_NetworkConfig_IpV4Config& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.Config.NetworkConfig.IpV4Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fU) != 0) {
    // fixed32 ip = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (this_._internal_ip() != 0) {
        total_size += 5;
      }
    }
    // fixed32 gateway = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_gateway() != 0) {
        total_size += 5;
      }
    }
    // fixed32 subnet = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_subnet() != 0) {
        total_size += 5;
      }
    }
    // fixed32 dns = 4;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_dns() != 0) {
        total_size += 5;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Config_NetworkConfig_IpV4Config::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Config_NetworkConfig_IpV4Config*>(&to_msg);
  auto& from = static_cast<const Config_NetworkConfig_IpV4Config&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.Config.NetworkConfig.IpV4Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (from._internal_ip() != 0) {
        _this->_impl_.ip_ = from._impl_.ip_;
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_gateway() != 0) {
        _this->_impl_.gateway_ = from._impl_.gateway_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_subnet() != 0) {
        _this->_impl_.subnet_ = from._impl_.subnet_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_dns() != 0) {
        _this->_impl_.dns_ = from._impl_.dns_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config_NetworkConfig_IpV4Config::CopyFrom(const Config_NetworkConfig_IpV4Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.Config.NetworkConfig.IpV4Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Config_NetworkConfig_IpV4Config::InternalSwap(Config_NetworkConfig_IpV4Config* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config_NetworkConfig_IpV4Config, _impl_.dns_)
      + sizeof(Config_NetworkConfig_IpV4Config::_impl_.dns_)
      - PROTOBUF_FIELD_OFFSET(Config_NetworkConfig_IpV4Config, _impl_.ip_)>(
          reinterpret_cast<char*>(&_impl_.ip_),
          reinterpret_cast<char*>(&other->_impl_.ip_));
}

::google::protobuf::Metadata Config_NetworkConfig_IpV4Config::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Config_NetworkConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Config_NetworkConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_._has_bits_);
};

Config_NetworkConfig::Config_NetworkConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_NetworkConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.Config.NetworkConfig)
}
PROTOBUF_NDEBUG_INLINE Config_NetworkConfig::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::meshtastic::Config_NetworkConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        wifi_ssid_(arena, from.wifi_ssid_),
        wifi_psk_(arena, from.wifi_psk_),
        ntp_server_(arena, from.ntp_server_),
        rsyslog_server_(arena, from.rsyslog_server_) {}

Config_NetworkConfig::Config_NetworkConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Config_NetworkConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_NetworkConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Config_NetworkConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ipv4_config_ = ((cached_has_bits & 0x00000010U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ipv4_config_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, wifi_enabled_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, wifi_enabled_),
           offsetof(Impl_, enabled_protocols_) -
               offsetof(Impl_, wifi_enabled_) +
               sizeof(Impl_::enabled_protocols_));

  // @@protoc_insertion_point(copy_constructor:meshtastic.Config.NetworkConfig)
}
PROTOBUF_NDEBUG_INLINE Config_NetworkConfig::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        wifi_ssid_(arena),
        wifi_psk_(arena),
        ntp_server_(arena),
        rsyslog_server_(arena) {}

inline void Config_NetworkConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ipv4_config_),
           0,
           offsetof(Impl_, enabled_protocols_) -
               offsetof(Impl_, ipv4_config_) +
               sizeof(Impl_::enabled_protocols_));
}
Config_NetworkConfig::~Config_NetworkConfig() {
  // @@protoc_insertion_point(destructor:meshtastic.Config.NetworkConfig)
  SharedDtor(*this);
}
inline void Config_NetworkConfig::SharedDtor(MessageLite& self) {
  Config_NetworkConfig& this_ = static_cast<Config_NetworkConfig&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.wifi_ssid_.Destroy();
  this_._impl_.wifi_psk_.Destroy();
  this_._impl_.ntp_server_.Destroy();
  this_._impl_.rsyslog_server_.Destroy();
  delete this_._impl_.ipv4_config_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Config_NetworkConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Config_NetworkConfig(arena);
}
constexpr auto Config_NetworkConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Config_NetworkConfig),
                                            alignof(Config_NetworkConfig));
}
constexpr auto Config_NetworkConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Config_NetworkConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Config_NetworkConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Config_NetworkConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Config_NetworkConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Config_NetworkConfig>(), &Config_NetworkConfig::ByteSizeLong,
              &Config_NetworkConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_._cached_size_),
          false,
      },
      &Config_NetworkConfig::kDescriptorMethods,
      &descriptor_table_meshtastic_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Config_NetworkConfig_class_data_ =
        Config_NetworkConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Config_NetworkConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Config_NetworkConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Config_NetworkConfig_class_data_.tc_table);
  return Config_NetworkConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 1, 89, 2>
Config_NetworkConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965250,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Config_NetworkConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::Config_NetworkConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool wifi_enabled = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_NetworkConfig, _impl_.wifi_enabled_), 5>(),
     {8, 5, 0, PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.wifi_enabled_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string wifi_ssid = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.wifi_ssid_)}},
    // string wifi_psk = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.wifi_psk_)}},
    // string ntp_server = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.ntp_server_)}},
    // bool eth_enabled = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_NetworkConfig, _impl_.eth_enabled_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.eth_enabled_)}},
    // .meshtastic.Config.NetworkConfig.AddressMode address_mode = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_NetworkConfig, _impl_.address_mode_), 8>(),
     {56, 8, 0, PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.address_mode_)}},
    // .meshtastic.Config.NetworkConfig.IpV4Config ipv4_config = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 4, 0, PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.ipv4_config_)}},
    // string rsyslog_server = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 3, 0, PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.rsyslog_server_)}},
    // uint32 enabled_protocols = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_NetworkConfig, _impl_.enabled_protocols_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.enabled_protocols_)}},
    // bool ipv6_enabled = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_NetworkConfig, _impl_.ipv6_enabled_), 7>(),
     {88, 7, 0, PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.ipv6_enabled_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool wifi_enabled = 1;
    {PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.wifi_enabled_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string wifi_ssid = 3;
    {PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.wifi_ssid_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string wifi_psk = 4;
    {PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.wifi_psk_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ntp_server = 5;
    {PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.ntp_server_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool eth_enabled = 6;
    {PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.eth_enabled_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .meshtastic.Config.NetworkConfig.AddressMode address_mode = 7;
    {PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.address_mode_), _Internal::kHasBitsOffset + 8, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .meshtastic.Config.NetworkConfig.IpV4Config ipv4_config = 8;
    {PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.ipv4_config_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string rsyslog_server = 9;
    {PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.rsyslog_server_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 enabled_protocols = 10;
    {PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.enabled_protocols_), _Internal::kHasBitsOffset + 9, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bool ipv6_enabled = 11;
    {PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.ipv6_enabled_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::meshtastic::Config_NetworkConfig_IpV4Config>()},
  }},
  {{
    "\37\0\11\10\12\0\0\0\16\0\0\0\0\0\0\0"
    "meshtastic.Config.NetworkConfig"
    "wifi_ssid"
    "wifi_psk"
    "ntp_server"
    "rsyslog_server"
  }},
};
PROTOBUF_NOINLINE void Config_NetworkConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.Config.NetworkConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.wifi_ssid_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.wifi_psk_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      _impl_.ntp_server_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      _impl_.rsyslog_server_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      ABSL_DCHECK(_impl_.ipv4_config_ != nullptr);
      _impl_.ipv4_config_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000e0U) != 0) {
    ::memset(&_impl_.wifi_enabled_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ipv6_enabled_) -
        reinterpret_cast<char*>(&_impl_.wifi_enabled_)) + sizeof(_impl_.ipv6_enabled_));
  }
  if ((cached_has_bits & 0x00000300U) != 0) {
    ::memset(&_impl_.address_mode_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.enabled_protocols_) -
        reinterpret_cast<char*>(&_impl_.address_mode_)) + sizeof(_impl_.enabled_protocols_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Config_NetworkConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Config_NetworkConfig& this_ = static_cast<const Config_NetworkConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Config_NetworkConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Config_NetworkConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.Config.NetworkConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool wifi_enabled = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (this_._internal_wifi_enabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_wifi_enabled(), target);
    }
  }

  // string wifi_ssid = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_wifi_ssid().empty()) {
      const ::std::string& _s = this_._internal_wifi_ssid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "meshtastic.Config.NetworkConfig.wifi_ssid");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string wifi_psk = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_wifi_psk().empty()) {
      const ::std::string& _s = this_._internal_wifi_psk();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "meshtastic.Config.NetworkConfig.wifi_psk");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // string ntp_server = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (!this_._internal_ntp_server().empty()) {
      const ::std::string& _s = this_._internal_ntp_server();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "meshtastic.Config.NetworkConfig.ntp_server");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // bool eth_enabled = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000040U) != 0) {
    if (this_._internal_eth_enabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          6, this_._internal_eth_enabled(), target);
    }
  }

  // .meshtastic.Config.NetworkConfig.AddressMode address_mode = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000100U) != 0) {
    if (this_._internal_address_mode() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          7, this_._internal_address_mode(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .meshtastic.Config.NetworkConfig.IpV4Config ipv4_config = 8;
  if ((cached_has_bits & 0x00000010U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.ipv4_config_, this_._impl_.ipv4_config_->GetCachedSize(), target,
        stream);
  }

  // string rsyslog_server = 9;
  if ((cached_has_bits & 0x00000008U) != 0) {
    if (!this_._internal_rsyslog_server().empty()) {
      const ::std::string& _s = this_._internal_rsyslog_server();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "meshtastic.Config.NetworkConfig.rsyslog_server");
      target = stream->WriteStringMaybeAliased(9, _s, target);
    }
  }

  // uint32 enabled_protocols = 10;
  if ((cached_has_bits & 0x00000200U) != 0) {
    if (this_._internal_enabled_protocols() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          10, this_._internal_enabled_protocols(), target);
    }
  }

  // bool ipv6_enabled = 11;
  if ((cached_has_bits & 0x00000080U) != 0) {
    if (this_._internal_ipv6_enabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          11, this_._internal_ipv6_enabled(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.Config.NetworkConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Config_NetworkConfig::ByteSizeLong(const MessageLite& base) {
  const Config_NetworkConfig& this_ = static_cast<const Config_NetworkConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Config_NetworkConfig::ByteSizeLong() const {
  const Config_NetworkConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.Config.NetworkConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    // string wifi_ssid = 3;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_wifi_ssid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_wifi_ssid());
      }
    }
    // string wifi_psk = 4;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_wifi_psk().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_wifi_psk());
      }
    }
    // string ntp_server = 5;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (!this_._internal_ntp_server().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_ntp_server());
      }
    }
    // string rsyslog_server = 9;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (!this_._internal_rsyslog_server().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_rsyslog_server());
      }
    }
    // .meshtastic.Config.NetworkConfig.IpV4Config ipv4_config = 8;
    if ((cached_has_bits & 0x00000010U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ipv4_config_);
    }
    // bool wifi_enabled = 1;
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (this_._internal_wifi_enabled() != 0) {
        total_size += 2;
      }
    }
    // bool eth_enabled = 6;
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (this_._internal_eth_enabled() != 0) {
        total_size += 2;
      }
    }
    // bool ipv6_enabled = 11;
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (this_._internal_ipv6_enabled() != 0) {
        total_size += 2;
      }
    }
  }
  if ((cached_has_bits & 0x00000300U) != 0) {
    // .meshtastic.Config.NetworkConfig.AddressMode address_mode = 7;
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (this_._internal_address_mode() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_address_mode());
      }
    }
    // uint32 enabled_protocols = 10;
    if ((cached_has_bits & 0x00000200U) != 0) {
      if (this_._internal_enabled_protocols() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_enabled_protocols());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Config_NetworkConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Config_NetworkConfig*>(&to_msg);
  auto& from = static_cast<const Config_NetworkConfig&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.Config.NetworkConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_wifi_ssid().empty()) {
        _this->_internal_set_wifi_ssid(from._internal_wifi_ssid());
      } else {
        if (_this->_impl_.wifi_ssid_.IsDefault()) {
          _this->_internal_set_wifi_ssid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_wifi_psk().empty()) {
        _this->_internal_set_wifi_psk(from._internal_wifi_psk());
      } else {
        if (_this->_impl_.wifi_psk_.IsDefault()) {
          _this->_internal_set_wifi_psk("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (!from._internal_ntp_server().empty()) {
        _this->_internal_set_ntp_server(from._internal_ntp_server());
      } else {
        if (_this->_impl_.ntp_server_.IsDefault()) {
          _this->_internal_set_ntp_server("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (!from._internal_rsyslog_server().empty()) {
        _this->_internal_set_rsyslog_server(from._internal_rsyslog_server());
      } else {
        if (_this->_impl_.rsyslog_server_.IsDefault()) {
          _this->_internal_set_rsyslog_server("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      ABSL_DCHECK(from._impl_.ipv4_config_ != nullptr);
      if (_this->_impl_.ipv4_config_ == nullptr) {
        _this->_impl_.ipv4_config_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ipv4_config_);
      } else {
        _this->_impl_.ipv4_config_->MergeFrom(*from._impl_.ipv4_config_);
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (from._internal_wifi_enabled() != 0) {
        _this->_impl_.wifi_enabled_ = from._impl_.wifi_enabled_;
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (from._internal_eth_enabled() != 0) {
        _this->_impl_.eth_enabled_ = from._impl_.eth_enabled_;
      }
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (from._internal_ipv6_enabled() != 0) {
        _this->_impl_.ipv6_enabled_ = from._impl_.ipv6_enabled_;
      }
    }
  }
  if ((cached_has_bits & 0x00000300U) != 0) {
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (from._internal_address_mode() != 0) {
        _this->_impl_.address_mode_ = from._impl_.address_mode_;
      }
    }
    if ((cached_has_bits & 0x00000200U) != 0) {
      if (from._internal_enabled_protocols() != 0) {
        _this->_impl_.enabled_protocols_ = from._impl_.enabled_protocols_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config_NetworkConfig::CopyFrom(const Config_NetworkConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.Config.NetworkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Config_NetworkConfig::InternalSwap(Config_NetworkConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.wifi_ssid_, &other->_impl_.wifi_ssid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.wifi_psk_, &other->_impl_.wifi_psk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ntp_server_, &other->_impl_.ntp_server_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rsyslog_server_, &other->_impl_.rsyslog_server_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.enabled_protocols_)
      + sizeof(Config_NetworkConfig::_impl_.enabled_protocols_)
      - PROTOBUF_FIELD_OFFSET(Config_NetworkConfig, _impl_.ipv4_config_)>(
          reinterpret_cast<char*>(&_impl_.ipv4_config_),
          reinterpret_cast<char*>(&other->_impl_.ipv4_config_));
}

::google::protobuf::Metadata Config_NetworkConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Config_DisplayConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Config_DisplayConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_._has_bits_);
};

Config_DisplayConfig::Config_DisplayConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_DisplayConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.Config.DisplayConfig)
}
Config_DisplayConfig::Config_DisplayConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Config_DisplayConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_DisplayConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE Config_DisplayConfig::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Config_DisplayConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, screen_on_secs_),
           0,
           offsetof(Impl_, use_12h_clock_) -
               offsetof(Impl_, screen_on_secs_) +
               sizeof(Impl_::use_12h_clock_));
}
Config_DisplayConfig::~Config_DisplayConfig() {
  // @@protoc_insertion_point(destructor:meshtastic.Config.DisplayConfig)
  SharedDtor(*this);
}
inline void Config_DisplayConfig::SharedDtor(MessageLite& self) {
  Config_DisplayConfig& this_ = static_cast<Config_DisplayConfig&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Config_DisplayConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Config_DisplayConfig(arena);
}
constexpr auto Config_DisplayConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Config_DisplayConfig),
                                            alignof(Config_DisplayConfig));
}
constexpr auto Config_DisplayConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Config_DisplayConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Config_DisplayConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Config_DisplayConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Config_DisplayConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Config_DisplayConfig>(), &Config_DisplayConfig::ByteSizeLong,
              &Config_DisplayConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_._cached_size_),
          false,
      },
      &Config_DisplayConfig::kDescriptorMethods,
      &descriptor_table_meshtastic_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Config_DisplayConfig_class_data_ =
        Config_DisplayConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Config_DisplayConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Config_DisplayConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Config_DisplayConfig_class_data_.tc_table);
  return Config_DisplayConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 0, 0, 2>
Config_DisplayConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Config_DisplayConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::Config_DisplayConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 screen_on_secs = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_DisplayConfig, _impl_.screen_on_secs_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.screen_on_secs_)}},
    // .meshtastic.Config.DisplayConfig.GpsCoordinateFormat gps_format = 2 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_DisplayConfig, _impl_.gps_format_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.gps_format_)}},
    // uint32 auto_screen_carousel_secs = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_DisplayConfig, _impl_.auto_screen_carousel_secs_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.auto_screen_carousel_secs_)}},
    // bool compass_north_top = 4 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_DisplayConfig, _impl_.compass_north_top_), 5>(),
     {32, 5, 0, PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.compass_north_top_)}},
    // bool flip_screen = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_DisplayConfig, _impl_.flip_screen_), 6>(),
     {40, 6, 0, PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.flip_screen_)}},
    // .meshtastic.Config.DisplayConfig.DisplayUnits units = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_DisplayConfig, _impl_.units_), 3>(),
     {48, 3, 0, PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.units_)}},
    // .meshtastic.Config.DisplayConfig.OledType oled = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_DisplayConfig, _impl_.oled_), 4>(),
     {56, 4, 0, PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.oled_)}},
    // .meshtastic.Config.DisplayConfig.DisplayMode displaymode = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_DisplayConfig, _impl_.displaymode_), 9>(),
     {64, 9, 0, PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.displaymode_)}},
    // bool heading_bold = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_DisplayConfig, _impl_.heading_bold_), 7>(),
     {72, 7, 0, PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.heading_bold_)}},
    // bool wake_on_tap_or_motion = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_DisplayConfig, _impl_.wake_on_tap_or_motion_), 8>(),
     {80, 8, 0, PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.wake_on_tap_or_motion_)}},
    // .meshtastic.Config.DisplayConfig.CompassOrientation compass_orientation = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_DisplayConfig, _impl_.compass_orientation_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.compass_orientation_)}},
    // bool use_12h_clock = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_DisplayConfig, _impl_.use_12h_clock_), 11>(),
     {96, 11, 0, PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.use_12h_clock_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 screen_on_secs = 1;
    {PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.screen_on_secs_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .meshtastic.Config.DisplayConfig.GpsCoordinateFormat gps_format = 2 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.gps_format_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // uint32 auto_screen_carousel_secs = 3;
    {PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.auto_screen_carousel_secs_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bool compass_north_top = 4 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.compass_north_top_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool flip_screen = 5;
    {PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.flip_screen_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .meshtastic.Config.DisplayConfig.DisplayUnits units = 6;
    {PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.units_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .meshtastic.Config.DisplayConfig.OledType oled = 7;
    {PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.oled_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .meshtastic.Config.DisplayConfig.DisplayMode displaymode = 8;
    {PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.displaymode_), _Internal::kHasBitsOffset + 9, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // bool heading_bold = 9;
    {PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.heading_bold_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool wake_on_tap_or_motion = 10;
    {PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.wake_on_tap_or_motion_), _Internal::kHasBitsOffset + 8, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .meshtastic.Config.DisplayConfig.CompassOrientation compass_orientation = 11;
    {PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.compass_orientation_), _Internal::kHasBitsOffset + 10, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // bool use_12h_clock = 12;
    {PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.use_12h_clock_), _Internal::kHasBitsOffset + 11, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Config_DisplayConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.Config.DisplayConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    ::memset(&_impl_.screen_on_secs_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.heading_bold_) -
        reinterpret_cast<char*>(&_impl_.screen_on_secs_)) + sizeof(_impl_.heading_bold_));
  }
  if ((cached_has_bits & 0x00000f00U) != 0) {
    ::memset(&_impl_.wake_on_tap_or_motion_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.use_12h_clock_) -
        reinterpret_cast<char*>(&_impl_.wake_on_tap_or_motion_)) + sizeof(_impl_.use_12h_clock_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Config_DisplayConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Config_DisplayConfig& this_ = static_cast<const Config_DisplayConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Config_DisplayConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Config_DisplayConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.Config.DisplayConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 screen_on_secs = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (this_._internal_screen_on_secs() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_screen_on_secs(), target);
    }
  }

  // .meshtastic.Config.DisplayConfig.GpsCoordinateFormat gps_format = 2 [deprecated = true];
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_gps_format() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_gps_format(), target);
    }
  }

  // uint32 auto_screen_carousel_secs = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_auto_screen_carousel_secs() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_auto_screen_carousel_secs(), target);
    }
  }

  // bool compass_north_top = 4 [deprecated = true];
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (this_._internal_compass_north_top() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          4, this_._internal_compass_north_top(), target);
    }
  }

  // bool flip_screen = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000040U) != 0) {
    if (this_._internal_flip_screen() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_flip_screen(), target);
    }
  }

  // .meshtastic.Config.DisplayConfig.DisplayUnits units = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_units() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          6, this_._internal_units(), target);
    }
  }

  // .meshtastic.Config.DisplayConfig.OledType oled = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_oled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          7, this_._internal_oled(), target);
    }
  }

  // .meshtastic.Config.DisplayConfig.DisplayMode displaymode = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000200U) != 0) {
    if (this_._internal_displaymode() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          8, this_._internal_displaymode(), target);
    }
  }

  // bool heading_bold = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000080U) != 0) {
    if (this_._internal_heading_bold() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          9, this_._internal_heading_bold(), target);
    }
  }

  // bool wake_on_tap_or_motion = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000100U) != 0) {
    if (this_._internal_wake_on_tap_or_motion() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          10, this_._internal_wake_on_tap_or_motion(), target);
    }
  }

  // .meshtastic.Config.DisplayConfig.CompassOrientation compass_orientation = 11;
  if ((this_._impl_._has_bits_[0] & 0x00000400U) != 0) {
    if (this_._internal_compass_orientation() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          11, this_._internal_compass_orientation(), target);
    }
  }

  // bool use_12h_clock = 12;
  if ((this_._impl_._has_bits_[0] & 0x00000800U) != 0) {
    if (this_._internal_use_12h_clock() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          12, this_._internal_use_12h_clock(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.Config.DisplayConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Config_DisplayConfig::ByteSizeLong(const MessageLite& base) {
  const Config_DisplayConfig& this_ = static_cast<const Config_DisplayConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Config_DisplayConfig::ByteSizeLong() const {
  const Config_DisplayConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.Config.DisplayConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    // uint32 screen_on_secs = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (this_._internal_screen_on_secs() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_screen_on_secs());
      }
    }
    // .meshtastic.Config.DisplayConfig.GpsCoordinateFormat gps_format = 2 [deprecated = true];
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_gps_format() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_gps_format());
      }
    }
    // uint32 auto_screen_carousel_secs = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_auto_screen_carousel_secs() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_auto_screen_carousel_secs());
      }
    }
    // .meshtastic.Config.DisplayConfig.DisplayUnits units = 6;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_units() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_units());
      }
    }
    // .meshtastic.Config.DisplayConfig.OledType oled = 7;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_oled() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_oled());
      }
    }
    // bool compass_north_top = 4 [deprecated = true];
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (this_._internal_compass_north_top() != 0) {
        total_size += 2;
      }
    }
    // bool flip_screen = 5;
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (this_._internal_flip_screen() != 0) {
        total_size += 2;
      }
    }
    // bool heading_bold = 9;
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (this_._internal_heading_bold() != 0) {
        total_size += 2;
      }
    }
  }
  if ((cached_has_bits & 0x00000f00U) != 0) {
    // bool wake_on_tap_or_motion = 10;
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (this_._internal_wake_on_tap_or_motion() != 0) {
        total_size += 2;
      }
    }
    // .meshtastic.Config.DisplayConfig.DisplayMode displaymode = 8;
    if ((cached_has_bits & 0x00000200U) != 0) {
      if (this_._internal_displaymode() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_displaymode());
      }
    }
    // .meshtastic.Config.DisplayConfig.CompassOrientation compass_orientation = 11;
    if ((cached_has_bits & 0x00000400U) != 0) {
      if (this_._internal_compass_orientation() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_compass_orientation());
      }
    }
    // bool use_12h_clock = 12;
    if ((cached_has_bits & 0x00000800U) != 0) {
      if (this_._internal_use_12h_clock() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Config_DisplayConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Config_DisplayConfig*>(&to_msg);
  auto& from = static_cast<const Config_DisplayConfig&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.Config.DisplayConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (from._internal_screen_on_secs() != 0) {
        _this->_impl_.screen_on_secs_ = from._impl_.screen_on_secs_;
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_gps_format() != 0) {
        _this->_impl_.gps_format_ = from._impl_.gps_format_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_auto_screen_carousel_secs() != 0) {
        _this->_impl_.auto_screen_carousel_secs_ = from._impl_.auto_screen_carousel_secs_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_units() != 0) {
        _this->_impl_.units_ = from._impl_.units_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_oled() != 0) {
        _this->_impl_.oled_ = from._impl_.oled_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (from._internal_compass_north_top() != 0) {
        _this->_impl_.compass_north_top_ = from._impl_.compass_north_top_;
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (from._internal_flip_screen() != 0) {
        _this->_impl_.flip_screen_ = from._impl_.flip_screen_;
      }
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (from._internal_heading_bold() != 0) {
        _this->_impl_.heading_bold_ = from._impl_.heading_bold_;
      }
    }
  }
  if ((cached_has_bits & 0x00000f00U) != 0) {
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (from._internal_wake_on_tap_or_motion() != 0) {
        _this->_impl_.wake_on_tap_or_motion_ = from._impl_.wake_on_tap_or_motion_;
      }
    }
    if ((cached_has_bits & 0x00000200U) != 0) {
      if (from._internal_displaymode() != 0) {
        _this->_impl_.displaymode_ = from._impl_.displaymode_;
      }
    }
    if ((cached_has_bits & 0x00000400U) != 0) {
      if (from._internal_compass_orientation() != 0) {
        _this->_impl_.compass_orientation_ = from._impl_.compass_orientation_;
      }
    }
    if ((cached_has_bits & 0x00000800U) != 0) {
      if (from._internal_use_12h_clock() != 0) {
        _this->_impl_.use_12h_clock_ = from._impl_.use_12h_clock_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config_DisplayConfig::CopyFrom(const Config_DisplayConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.Config.DisplayConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Config_DisplayConfig::InternalSwap(Config_DisplayConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.use_12h_clock_)
      + sizeof(Config_DisplayConfig::_impl_.use_12h_clock_)
      - PROTOBUF_FIELD_OFFSET(Config_DisplayConfig, _impl_.screen_on_secs_)>(
          reinterpret_cast<char*>(&_impl_.screen_on_secs_),
          reinterpret_cast<char*>(&other->_impl_.screen_on_secs_));
}

::google::protobuf::Metadata Config_DisplayConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Config_LoRaConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Config_LoRaConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_._has_bits_);
};

Config_LoRaConfig::Config_LoRaConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_LoRaConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.Config.LoRaConfig)
}
PROTOBUF_NDEBUG_INLINE Config_LoRaConfig::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::meshtastic::Config_LoRaConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ignore_incoming_{visibility, arena, from.ignore_incoming_},
        _ignore_incoming_cached_byte_size_{0} {}

Config_LoRaConfig::Config_LoRaConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Config_LoRaConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_LoRaConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Config_LoRaConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, modem_preset_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, modem_preset_),
           offsetof(Impl_, config_ok_to_mqtt_) -
               offsetof(Impl_, modem_preset_) +
               sizeof(Impl_::config_ok_to_mqtt_));

  // @@protoc_insertion_point(copy_constructor:meshtastic.Config.LoRaConfig)
}
PROTOBUF_NDEBUG_INLINE Config_LoRaConfig::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        ignore_incoming_{visibility, arena},
        _ignore_incoming_cached_byte_size_{0} {}

inline void Config_LoRaConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, modem_preset_),
           0,
           offsetof(Impl_, config_ok_to_mqtt_) -
               offsetof(Impl_, modem_preset_) +
               sizeof(Impl_::config_ok_to_mqtt_));
}
Config_LoRaConfig::~Config_LoRaConfig() {
  // @@protoc_insertion_point(destructor:meshtastic.Config.LoRaConfig)
  SharedDtor(*this);
}
inline void Config_LoRaConfig::SharedDtor(MessageLite& self) {
  Config_LoRaConfig& this_ = static_cast<Config_LoRaConfig&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Config_LoRaConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Config_LoRaConfig(arena);
}
constexpr auto Config_LoRaConfig::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.ignore_incoming_) +
          decltype(Config_LoRaConfig::_impl_.ignore_incoming_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Config_LoRaConfig), alignof(Config_LoRaConfig), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Config_LoRaConfig::PlacementNew_,
                                 sizeof(Config_LoRaConfig),
                                 alignof(Config_LoRaConfig));
  }
}
constexpr auto Config_LoRaConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Config_LoRaConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Config_LoRaConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Config_LoRaConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Config_LoRaConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Config_LoRaConfig>(), &Config_LoRaConfig::ByteSizeLong,
              &Config_LoRaConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_._cached_size_),
          false,
      },
      &Config_LoRaConfig::kDescriptorMethods,
      &descriptor_table_meshtastic_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Config_LoRaConfig_class_data_ =
        Config_LoRaConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Config_LoRaConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Config_LoRaConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Config_LoRaConfig_class_data_.tc_table);
  return Config_LoRaConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 18, 0, 0, 7>
Config_LoRaConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_._has_bits_),
    0, // no _extensions_
    105, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    18,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Config_LoRaConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::Config_LoRaConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool use_preset = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_LoRaConfig, _impl_.use_preset_), 7>(),
     {8, 7, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.use_preset_)}},
    // .meshtastic.Config.LoRaConfig.ModemPreset modem_preset = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_LoRaConfig, _impl_.modem_preset_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.modem_preset_)}},
    // uint32 bandwidth = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_LoRaConfig, _impl_.bandwidth_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.bandwidth_)}},
    // uint32 spread_factor = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_LoRaConfig, _impl_.spread_factor_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.spread_factor_)}},
    // uint32 coding_rate = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_LoRaConfig, _impl_.coding_rate_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.coding_rate_)}},
    // float frequency_offset = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 4, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.frequency_offset_)}},
    // .meshtastic.Config.LoRaConfig.RegionCode region = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_LoRaConfig, _impl_.region_), 5>(),
     {56, 5, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.region_)}},
    // uint32 hop_limit = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_LoRaConfig, _impl_.hop_limit_), 6>(),
     {64, 6, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.hop_limit_)}},
    // bool tx_enabled = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_LoRaConfig, _impl_.tx_enabled_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.tx_enabled_)}},
    // int32 tx_power = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_LoRaConfig, _impl_.tx_power_), 11>(),
     {80, 11, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.tx_power_)}},
    // uint32 channel_num = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_LoRaConfig, _impl_.channel_num_), 12>(),
     {88, 12, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.channel_num_)}},
    // bool override_duty_cycle = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_LoRaConfig, _impl_.override_duty_cycle_), 9>(),
     {96, 9, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.override_duty_cycle_)}},
    // bool sx126x_rx_boosted_gain = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_LoRaConfig, _impl_.sx126x_rx_boosted_gain_), 10>(),
     {104, 10, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.sx126x_rx_boosted_gain_)}},
    // float override_frequency = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 13, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.override_frequency_)}},
    // bool pa_fan_disabled = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_LoRaConfig, _impl_.pa_fan_disabled_), 14>(),
     {120, 14, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.pa_fan_disabled_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated uint32 ignore_incoming = 103;
    {::_pbi::TcParser::FastV32P2,
     {1722, 63, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.ignore_incoming_)}},
    // bool ignore_mqtt = 104;
    {::_pbi::TcParser::FastV8S2,
     {1728, 15, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.ignore_mqtt_)}},
    // bool config_ok_to_mqtt = 105;
    {::_pbi::TcParser::FastV8S2,
     {1736, 16, 0, PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.config_ok_to_mqtt_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    103, 0, 1,
    65528, 15,
    65535, 65535
  }}, {{
    // bool use_preset = 1;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.use_preset_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .meshtastic.Config.LoRaConfig.ModemPreset modem_preset = 2;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.modem_preset_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // uint32 bandwidth = 3;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.bandwidth_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 spread_factor = 4;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.spread_factor_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 coding_rate = 5;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.coding_rate_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // float frequency_offset = 6;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.frequency_offset_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // .meshtastic.Config.LoRaConfig.RegionCode region = 7;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.region_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // uint32 hop_limit = 8;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.hop_limit_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bool tx_enabled = 9;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.tx_enabled_), _Internal::kHasBitsOffset + 8, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // int32 tx_power = 10;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.tx_power_), _Internal::kHasBitsOffset + 11, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // uint32 channel_num = 11;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.channel_num_), _Internal::kHasBitsOffset + 12, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bool override_duty_cycle = 12;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.override_duty_cycle_), _Internal::kHasBitsOffset + 9, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool sx126x_rx_boosted_gain = 13;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.sx126x_rx_boosted_gain_), _Internal::kHasBitsOffset + 10, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // float override_frequency = 14;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.override_frequency_), _Internal::kHasBitsOffset + 13, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // bool pa_fan_disabled = 15;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.pa_fan_disabled_), _Internal::kHasBitsOffset + 14, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated uint32 ignore_incoming = 103;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.ignore_incoming_), -1, 0, (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // bool ignore_mqtt = 104;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.ignore_mqtt_), _Internal::kHasBitsOffset + 15, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool config_ok_to_mqtt = 105;
    {PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.config_ok_to_mqtt_), _Internal::kHasBitsOffset + 16, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Config_LoRaConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.Config.LoRaConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ignore_incoming_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    ::memset(&_impl_.modem_preset_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.use_preset_) -
        reinterpret_cast<char*>(&_impl_.modem_preset_)) + sizeof(_impl_.use_preset_));
  }
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    ::memset(&_impl_.tx_enabled_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ignore_mqtt_) -
        reinterpret_cast<char*>(&_impl_.tx_enabled_)) + sizeof(_impl_.ignore_mqtt_));
  }
  _impl_.config_ok_to_mqtt_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Config_LoRaConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Config_LoRaConfig& this_ = static_cast<const Config_LoRaConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Config_LoRaConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Config_LoRaConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.Config.LoRaConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool use_preset = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000080U) != 0) {
    if (this_._internal_use_preset() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_use_preset(), target);
    }
  }

  // .meshtastic.Config.LoRaConfig.ModemPreset modem_preset = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (this_._internal_modem_preset() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_modem_preset(), target);
    }
  }

  // uint32 bandwidth = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_bandwidth() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_bandwidth(), target);
    }
  }

  // uint32 spread_factor = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_spread_factor() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_spread_factor(), target);
    }
  }

  // uint32 coding_rate = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_coding_rate() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          5, this_._internal_coding_rate(), target);
    }
  }

  // float frequency_offset = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_frequency_offset()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          6, this_._internal_frequency_offset(), target);
    }
  }

  // .meshtastic.Config.LoRaConfig.RegionCode region = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (this_._internal_region() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          7, this_._internal_region(), target);
    }
  }

  // uint32 hop_limit = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000040U) != 0) {
    if (this_._internal_hop_limit() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          8, this_._internal_hop_limit(), target);
    }
  }

  // bool tx_enabled = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000100U) != 0) {
    if (this_._internal_tx_enabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          9, this_._internal_tx_enabled(), target);
    }
  }

  // int32 tx_power = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000800U) != 0) {
    if (this_._internal_tx_power() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<10>(
              stream, this_._internal_tx_power(), target);
    }
  }

  // uint32 channel_num = 11;
  if ((this_._impl_._has_bits_[0] & 0x00001000U) != 0) {
    if (this_._internal_channel_num() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          11, this_._internal_channel_num(), target);
    }
  }

  // bool override_duty_cycle = 12;
  if ((this_._impl_._has_bits_[0] & 0x00000200U) != 0) {
    if (this_._internal_override_duty_cycle() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          12, this_._internal_override_duty_cycle(), target);
    }
  }

  // bool sx126x_rx_boosted_gain = 13;
  if ((this_._impl_._has_bits_[0] & 0x00000400U) != 0) {
    if (this_._internal_sx126x_rx_boosted_gain() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          13, this_._internal_sx126x_rx_boosted_gain(), target);
    }
  }

  // float override_frequency = 14;
  if ((this_._impl_._has_bits_[0] & 0x00002000U) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_override_frequency()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          14, this_._internal_override_frequency(), target);
    }
  }

  // bool pa_fan_disabled = 15;
  if ((this_._impl_._has_bits_[0] & 0x00004000U) != 0) {
    if (this_._internal_pa_fan_disabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          15, this_._internal_pa_fan_disabled(), target);
    }
  }

  // repeated uint32 ignore_incoming = 103;
  {
    int byte_size = this_._impl_._ignore_incoming_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          103, this_._internal_ignore_incoming(), byte_size, target);
    }
  }

  // bool ignore_mqtt = 104;
  if ((this_._impl_._has_bits_[0] & 0x00008000U) != 0) {
    if (this_._internal_ignore_mqtt() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          104, this_._internal_ignore_mqtt(), target);
    }
  }

  // bool config_ok_to_mqtt = 105;
  if ((this_._impl_._has_bits_[0] & 0x00010000U) != 0) {
    if (this_._internal_config_ok_to_mqtt() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          105, this_._internal_config_ok_to_mqtt(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.Config.LoRaConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Config_LoRaConfig::ByteSizeLong(const MessageLite& base) {
  const Config_LoRaConfig& this_ = static_cast<const Config_LoRaConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Config_LoRaConfig::ByteSizeLong() const {
  const Config_LoRaConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.Config.LoRaConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated uint32 ignore_incoming = 103;
    {
      total_size +=
          ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
              this_._internal_ignore_incoming(), 2,
              this_._impl_._ignore_incoming_cached_byte_size_);
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    // .meshtastic.Config.LoRaConfig.ModemPreset modem_preset = 2;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (this_._internal_modem_preset() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_modem_preset());
      }
    }
    // uint32 bandwidth = 3;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_bandwidth() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_bandwidth());
      }
    }
    // uint32 spread_factor = 4;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_spread_factor() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_spread_factor());
      }
    }
    // uint32 coding_rate = 5;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_coding_rate() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_coding_rate());
      }
    }
    // float frequency_offset = 6;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_frequency_offset()) != 0) {
        total_size += 5;
      }
    }
    // .meshtastic.Config.LoRaConfig.RegionCode region = 7;
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (this_._internal_region() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_region());
      }
    }
    // uint32 hop_limit = 8;
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (this_._internal_hop_limit() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_hop_limit());
      }
    }
    // bool use_preset = 1;
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (this_._internal_use_preset() != 0) {
        total_size += 2;
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    // bool tx_enabled = 9;
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (this_._internal_tx_enabled() != 0) {
        total_size += 2;
      }
    }
    // bool override_duty_cycle = 12;
    if ((cached_has_bits & 0x00000200U) != 0) {
      if (this_._internal_override_duty_cycle() != 0) {
        total_size += 2;
      }
    }
    // bool sx126x_rx_boosted_gain = 13;
    if ((cached_has_bits & 0x00000400U) != 0) {
      if (this_._internal_sx126x_rx_boosted_gain() != 0) {
        total_size += 2;
      }
    }
    // int32 tx_power = 10;
    if ((cached_has_bits & 0x00000800U) != 0) {
      if (this_._internal_tx_power() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_tx_power());
      }
    }
    // uint32 channel_num = 11;
    if ((cached_has_bits & 0x00001000U) != 0) {
      if (this_._internal_channel_num() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_channel_num());
      }
    }
    // float override_frequency = 14;
    if ((cached_has_bits & 0x00002000U) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_override_frequency()) != 0) {
        total_size += 5;
      }
    }
    // bool pa_fan_disabled = 15;
    if ((cached_has_bits & 0x00004000U) != 0) {
      if (this_._internal_pa_fan_disabled() != 0) {
        total_size += 2;
      }
    }
    // bool ignore_mqtt = 104;
    if ((cached_has_bits & 0x00008000U) != 0) {
      if (this_._internal_ignore_mqtt() != 0) {
        total_size += 3;
      }
    }
  }
   {
    // bool config_ok_to_mqtt = 105;
    if ((cached_has_bits & 0x00010000U) != 0) {
      if (this_._internal_config_ok_to_mqtt() != 0) {
        total_size += 3;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Config_LoRaConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Config_LoRaConfig*>(&to_msg);
  auto& from = static_cast<const Config_LoRaConfig&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.Config.LoRaConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ignore_incoming()->MergeFrom(from._internal_ignore_incoming());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (from._internal_modem_preset() != 0) {
        _this->_impl_.modem_preset_ = from._impl_.modem_preset_;
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_bandwidth() != 0) {
        _this->_impl_.bandwidth_ = from._impl_.bandwidth_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_spread_factor() != 0) {
        _this->_impl_.spread_factor_ = from._impl_.spread_factor_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_coding_rate() != 0) {
        _this->_impl_.coding_rate_ = from._impl_.coding_rate_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_frequency_offset()) != 0) {
        _this->_impl_.frequency_offset_ = from._impl_.frequency_offset_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (from._internal_region() != 0) {
        _this->_impl_.region_ = from._impl_.region_;
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (from._internal_hop_limit() != 0) {
        _this->_impl_.hop_limit_ = from._impl_.hop_limit_;
      }
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (from._internal_use_preset() != 0) {
        _this->_impl_.use_preset_ = from._impl_.use_preset_;
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (from._internal_tx_enabled() != 0) {
        _this->_impl_.tx_enabled_ = from._impl_.tx_enabled_;
      }
    }
    if ((cached_has_bits & 0x00000200U) != 0) {
      if (from._internal_override_duty_cycle() != 0) {
        _this->_impl_.override_duty_cycle_ = from._impl_.override_duty_cycle_;
      }
    }
    if ((cached_has_bits & 0x00000400U) != 0) {
      if (from._internal_sx126x_rx_boosted_gain() != 0) {
        _this->_impl_.sx126x_rx_boosted_gain_ = from._impl_.sx126x_rx_boosted_gain_;
      }
    }
    if ((cached_has_bits & 0x00000800U) != 0) {
      if (from._internal_tx_power() != 0) {
        _this->_impl_.tx_power_ = from._impl_.tx_power_;
      }
    }
    if ((cached_has_bits & 0x00001000U) != 0) {
      if (from._internal_channel_num() != 0) {
        _this->_impl_.channel_num_ = from._impl_.channel_num_;
      }
    }
    if ((cached_has_bits & 0x00002000U) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_override_frequency()) != 0) {
        _this->_impl_.override_frequency_ = from._impl_.override_frequency_;
      }
    }
    if ((cached_has_bits & 0x00004000U) != 0) {
      if (from._internal_pa_fan_disabled() != 0) {
        _this->_impl_.pa_fan_disabled_ = from._impl_.pa_fan_disabled_;
      }
    }
    if ((cached_has_bits & 0x00008000U) != 0) {
      if (from._internal_ignore_mqtt() != 0) {
        _this->_impl_.ignore_mqtt_ = from._impl_.ignore_mqtt_;
      }
    }
  }
  if ((cached_has_bits & 0x00010000U) != 0) {
    if (from._internal_config_ok_to_mqtt() != 0) {
      _this->_impl_.config_ok_to_mqtt_ = from._impl_.config_ok_to_mqtt_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config_LoRaConfig::CopyFrom(const Config_LoRaConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.Config.LoRaConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Config_LoRaConfig::InternalSwap(Config_LoRaConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ignore_incoming_.InternalSwap(&other->_impl_.ignore_incoming_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.config_ok_to_mqtt_)
      + sizeof(Config_LoRaConfig::_impl_.config_ok_to_mqtt_)
      - PROTOBUF_FIELD_OFFSET(Config_LoRaConfig, _impl_.modem_preset_)>(
          reinterpret_cast<char*>(&_impl_.modem_preset_),
          reinterpret_cast<char*>(&other->_impl_.modem_preset_));
}

::google::protobuf::Metadata Config_LoRaConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Config_BluetoothConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Config_BluetoothConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Config_BluetoothConfig, _impl_._has_bits_);
};

Config_BluetoothConfig::Config_BluetoothConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_BluetoothConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.Config.BluetoothConfig)
}
Config_BluetoothConfig::Config_BluetoothConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Config_BluetoothConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_BluetoothConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE Config_BluetoothConfig::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Config_BluetoothConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enabled_),
           0,
           offsetof(Impl_, fixed_pin_) -
               offsetof(Impl_, enabled_) +
               sizeof(Impl_::fixed_pin_));
}
Config_BluetoothConfig::~Config_BluetoothConfig() {
  // @@protoc_insertion_point(destructor:meshtastic.Config.BluetoothConfig)
  SharedDtor(*this);
}
inline void Config_BluetoothConfig::SharedDtor(MessageLite& self) {
  Config_BluetoothConfig& this_ = static_cast<Config_BluetoothConfig&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Config_BluetoothConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Config_BluetoothConfig(arena);
}
constexpr auto Config_BluetoothConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Config_BluetoothConfig),
                                            alignof(Config_BluetoothConfig));
}
constexpr auto Config_BluetoothConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Config_BluetoothConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Config_BluetoothConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Config_BluetoothConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Config_BluetoothConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Config_BluetoothConfig>(), &Config_BluetoothConfig::ByteSizeLong,
              &Config_BluetoothConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Config_BluetoothConfig, _impl_._cached_size_),
          false,
      },
      &Config_BluetoothConfig::kDescriptorMethods,
      &descriptor_table_meshtastic_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Config_BluetoothConfig_class_data_ =
        Config_BluetoothConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Config_BluetoothConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Config_BluetoothConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Config_BluetoothConfig_class_data_.tc_table);
  return Config_BluetoothConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2>
Config_BluetoothConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config_BluetoothConfig, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Config_BluetoothConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::Config_BluetoothConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool enabled = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_BluetoothConfig, _impl_.enabled_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Config_BluetoothConfig, _impl_.enabled_)}},
    // .meshtastic.Config.BluetoothConfig.PairingMode mode = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_BluetoothConfig, _impl_.mode_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Config_BluetoothConfig, _impl_.mode_)}},
    // uint32 fixed_pin = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Config_BluetoothConfig, _impl_.fixed_pin_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(Config_BluetoothConfig, _impl_.fixed_pin_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool enabled = 1;
    {PROTOBUF_FIELD_OFFSET(Config_BluetoothConfig, _impl_.enabled_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .meshtastic.Config.BluetoothConfig.PairingMode mode = 2;
    {PROTOBUF_FIELD_OFFSET(Config_BluetoothConfig, _impl_.mode_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // uint32 fixed_pin = 3;
    {PROTOBUF_FIELD_OFFSET(Config_BluetoothConfig, _impl_.fixed_pin_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Config_BluetoothConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.Config.BluetoothConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    ::memset(&_impl_.enabled_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.fixed_pin_) -
        reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.fixed_pin_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Config_BluetoothConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Config_BluetoothConfig& this_ = static_cast<const Config_BluetoothConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Config_BluetoothConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Config_BluetoothConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.Config.BluetoothConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool enabled = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (this_._internal_enabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_enabled(), target);
    }
  }

  // .meshtastic.Config.BluetoothConfig.PairingMode mode = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_mode() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_mode(), target);
    }
  }

  // uint32 fixed_pin = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_fixed_pin() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_fixed_pin(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.Config.BluetoothConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Config_BluetoothConfig::ByteSizeLong(const MessageLite& base) {
  const Config_BluetoothConfig& this_ = static_cast<const Config_BluetoothConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Config_BluetoothConfig::ByteSizeLong() const {
  const Config_BluetoothConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.Config.BluetoothConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    // bool enabled = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (this_._internal_enabled() != 0) {
        total_size += 2;
      }
    }
    // .meshtastic.Config.BluetoothConfig.PairingMode mode = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_mode() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_mode());
      }
    }
    // uint32 fixed_pin = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_fixed_pin() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_fixed_pin());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Config_BluetoothConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Config_BluetoothConfig*>(&to_msg);
  auto& from = static_cast<const Config_BluetoothConfig&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.Config.BluetoothConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (from._internal_enabled() != 0) {
        _this->_impl_.enabled_ = from._impl_.enabled_;
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_mode() != 0) {
        _this->_impl_.mode_ = from._impl_.mode_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_fixed_pin() != 0) {
        _this->_impl_.fixed_pin_ = from._impl_.fixed_pin_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config_BluetoothConfig::CopyFrom(const Config_BluetoothConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.Config.BluetoothConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Config_BluetoothConfig::InternalSwap(Config_BluetoothConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config_BluetoothConfig, _impl_.fixed_pin_)
      + sizeof(Config_BluetoothConfig::_impl_.fixed_pin_)
      - PROTOBUF_FIELD_OFFSET(Config_BluetoothConfig, _impl_.enabled_)>(
          reinterpret_cast<char*>(&_impl_.enabled_),
          reinterpret_cast<char*>(&other->_impl_.enabled_));
}

::google::protobuf::Metadata Config_BluetoothConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Config_SecurityConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Config_SecurityConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_._has_bits_);
};

Config_SecurityConfig::Config_SecurityConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_SecurityConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.Config.SecurityConfig)
}
PROTOBUF_NDEBUG_INLINE Config_SecurityConfig::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::meshtastic::Config_SecurityConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        admin_key_{visibility, arena, from.admin_key_},
        public_key_(arena, from.public_key_),
        private_key_(arena, from.private_key_) {}

Config_SecurityConfig::Config_SecurityConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Config_SecurityConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_SecurityConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Config_SecurityConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_managed_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, is_managed_),
           offsetof(Impl_, admin_channel_enabled_) -
               offsetof(Impl_, is_managed_) +
               sizeof(Impl_::admin_channel_enabled_));

  // @@protoc_insertion_point(copy_constructor:meshtastic.Config.SecurityConfig)
}
PROTOBUF_NDEBUG_INLINE Config_SecurityConfig::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        admin_key_{visibility, arena},
        public_key_(arena),
        private_key_(arena) {}

inline void Config_SecurityConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_managed_),
           0,
           offsetof(Impl_, admin_channel_enabled_) -
               offsetof(Impl_, is_managed_) +
               sizeof(Impl_::admin_channel_enabled_));
}
Config_SecurityConfig::~Config_SecurityConfig() {
  // @@protoc_insertion_point(destructor:meshtastic.Config.SecurityConfig)
  SharedDtor(*this);
}
inline void Config_SecurityConfig::SharedDtor(MessageLite& self) {
  Config_SecurityConfig& this_ = static_cast<Config_SecurityConfig&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.public_key_.Destroy();
  this_._impl_.private_key_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Config_SecurityConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Config_SecurityConfig(arena);
}
constexpr auto Config_SecurityConfig::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.admin_key_) +
          decltype(Config_SecurityConfig::_impl_.admin_key_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Config_SecurityConfig), alignof(Config_SecurityConfig), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Config_SecurityConfig::PlacementNew_,
                                 sizeof(Config_SecurityConfig),
                                 alignof(Config_SecurityConfig));
  }
}
constexpr auto Config_SecurityConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Config_SecurityConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Config_SecurityConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Config_SecurityConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Config_SecurityConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Config_SecurityConfig>(), &Config_SecurityConfig::ByteSizeLong,
              &Config_SecurityConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_._cached_size_),
          false,
      },
      &Config_SecurityConfig::kDescriptorMethods,
      &descriptor_table_meshtastic_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Config_SecurityConfig_class_data_ =
        Config_SecurityConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Config_SecurityConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Config_SecurityConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Config_SecurityConfig_class_data_.tc_table);
  return Config_SecurityConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2>
Config_SecurityConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Config_SecurityConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::Config_SecurityConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool admin_channel_enabled = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_SecurityConfig, _impl_.admin_channel_enabled_), 5>(),
     {64, 5, 0, PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.admin_channel_enabled_)}},
    // bytes public_key = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.public_key_)}},
    // bytes private_key = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.private_key_)}},
    // repeated bytes admin_key = 3;
    {::_pbi::TcParser::FastBR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.admin_key_)}},
    // bool is_managed = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_SecurityConfig, _impl_.is_managed_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.is_managed_)}},
    // bool serial_enabled = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_SecurityConfig, _impl_.serial_enabled_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.serial_enabled_)}},
    // bool debug_log_api_enabled = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Config_SecurityConfig, _impl_.debug_log_api_enabled_), 4>(),
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.debug_log_api_enabled_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes public_key = 1;
    {PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.public_key_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes private_key = 2;
    {PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.private_key_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated bytes admin_key = 3;
    {PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.admin_key_), -1, 0, (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // bool is_managed = 4;
    {PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.is_managed_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool serial_enabled = 5;
    {PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.serial_enabled_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool debug_log_api_enabled = 6;
    {PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.debug_log_api_enabled_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool admin_channel_enabled = 8;
    {PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.admin_channel_enabled_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Config_SecurityConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.Config.SecurityConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.admin_key_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.public_key_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.private_key_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.is_managed_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.admin_channel_enabled_) -
      reinterpret_cast<char*>(&_impl_.is_managed_)) + sizeof(_impl_.admin_channel_enabled_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Config_SecurityConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Config_SecurityConfig& this_ = static_cast<const Config_SecurityConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Config_SecurityConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Config_SecurityConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.Config.SecurityConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes public_key = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_public_key().empty()) {
      const ::std::string& _s = this_._internal_public_key();
      target = stream->WriteBytesMaybeAliased(1, _s, target);
    }
  }

  // bytes private_key = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_private_key().empty()) {
      const ::std::string& _s = this_._internal_private_key();
      target = stream->WriteBytesMaybeAliased(2, _s, target);
    }
  }

  // repeated bytes admin_key = 3;
  for (int i = 0, n = this_._internal_admin_key_size(); i < n; ++i) {
    const auto& s = this_._internal_admin_key().Get(i);
    target = stream->WriteBytes(3, s, target);
  }

  // bool is_managed = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_is_managed() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          4, this_._internal_is_managed(), target);
    }
  }

  // bool serial_enabled = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_serial_enabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_serial_enabled(), target);
    }
  }

  // bool debug_log_api_enabled = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_debug_log_api_enabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          6, this_._internal_debug_log_api_enabled(), target);
    }
  }

  // bool admin_channel_enabled = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (this_._internal_admin_channel_enabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          8, this_._internal_admin_channel_enabled(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.Config.SecurityConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Config_SecurityConfig::ByteSizeLong(const MessageLite& base) {
  const Config_SecurityConfig& this_ = static_cast<const Config_SecurityConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Config_SecurityConfig::ByteSizeLong() const {
  const Config_SecurityConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.Config.SecurityConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated bytes admin_key = 3;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_admin_key().size());
      for (int i = 0, n = this_._internal_admin_key().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
            this_._internal_admin_key().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    // bytes public_key = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_public_key().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_public_key());
      }
    }
    // bytes private_key = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_private_key().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_private_key());
      }
    }
    // bool is_managed = 4;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_is_managed() != 0) {
        total_size += 2;
      }
    }
    // bool serial_enabled = 5;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_serial_enabled() != 0) {
        total_size += 2;
      }
    }
    // bool debug_log_api_enabled = 6;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_debug_log_api_enabled() != 0) {
        total_size += 2;
      }
    }
    // bool admin_channel_enabled = 8;
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (this_._internal_admin_channel_enabled() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Config_SecurityConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Config_SecurityConfig*>(&to_msg);
  auto& from = static_cast<const Config_SecurityConfig&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.Config.SecurityConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_admin_key()->MergeFrom(from._internal_admin_key());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_public_key().empty()) {
        _this->_internal_set_public_key(from._internal_public_key());
      } else {
        if (_this->_impl_.public_key_.IsDefault()) {
          _this->_internal_set_public_key("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_private_key().empty()) {
        _this->_internal_set_private_key(from._internal_private_key());
      } else {
        if (_this->_impl_.private_key_.IsDefault()) {
          _this->_internal_set_private_key("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_is_managed() != 0) {
        _this->_impl_.is_managed_ = from._impl_.is_managed_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_serial_enabled() != 0) {
        _this->_impl_.serial_enabled_ = from._impl_.serial_enabled_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_debug_log_api_enabled() != 0) {
        _this->_impl_.debug_log_api_enabled_ = from._impl_.debug_log_api_enabled_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (from._internal_admin_channel_enabled() != 0) {
        _this->_impl_.admin_channel_enabled_ = from._impl_.admin_channel_enabled_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config_SecurityConfig::CopyFrom(const Config_SecurityConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.Config.SecurityConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Config_SecurityConfig::InternalSwap(Config_SecurityConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.admin_key_.InternalSwap(&other->_impl_.admin_key_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.public_key_, &other->_impl_.public_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.private_key_, &other->_impl_.private_key_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.admin_channel_enabled_)
      + sizeof(Config_SecurityConfig::_impl_.admin_channel_enabled_)
      - PROTOBUF_FIELD_OFFSET(Config_SecurityConfig, _impl_.is_managed_)>(
          reinterpret_cast<char*>(&_impl_.is_managed_),
          reinterpret_cast<char*>(&other->_impl_.is_managed_));
}

::google::protobuf::Metadata Config_SecurityConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Config_SessionkeyConfig::_Internal {
 public:
};

Config_SessionkeyConfig::Config_SessionkeyConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, Config_SessionkeyConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:meshtastic.Config.SessionkeyConfig)
}
Config_SessionkeyConfig::Config_SessionkeyConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Config_SessionkeyConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, Config_SessionkeyConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Config_SessionkeyConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:meshtastic.Config.SessionkeyConfig)
}

inline void* PROTOBUF_NONNULL Config_SessionkeyConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Config_SessionkeyConfig(arena);
}
constexpr auto Config_SessionkeyConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Config_SessionkeyConfig),
                                            alignof(Config_SessionkeyConfig));
}
constexpr auto Config_SessionkeyConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Config_SessionkeyConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Config_SessionkeyConfig::MergeImpl,
          ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Config_SessionkeyConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Config_SessionkeyConfig::SharedDtor,
          ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Config_SessionkeyConfig>(), &Config_SessionkeyConfig::ByteSizeLong,
              &Config_SessionkeyConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Config_SessionkeyConfig, _impl_._cached_size_),
          false,
      },
      &Config_SessionkeyConfig::kDescriptorMethods,
      &descriptor_table_meshtastic_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Config_SessionkeyConfig_class_data_ =
        Config_SessionkeyConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Config_SessionkeyConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Config_SessionkeyConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Config_SessionkeyConfig_class_data_.tc_table);
  return Config_SessionkeyConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2>
Config_SessionkeyConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Config_SessionkeyConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::Config_SessionkeyConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, // no field_entries, or aux_entries
  {{
  }},
};







::google::protobuf::Metadata Config_SessionkeyConfig::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Config::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::meshtastic::Config, _impl_._oneof_case_);
};

void Config::set_allocated_device(::meshtastic::Config_DeviceConfig* PROTOBUF_NULLABLE device) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload_variant();
  if (device) {
    ::google::protobuf::Arena* submessage_arena = device->GetArena();
    if (message_arena != submessage_arena) {
      device = ::google::protobuf::internal::GetOwnedMessage(message_arena, device, submessage_arena);
    }
    set_has_device();
    _impl_.payload_variant_.device_ = device;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Config.device)
}
void Config::set_allocated_position(::meshtastic::Config_PositionConfig* PROTOBUF_NULLABLE position) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload_variant();
  if (position) {
    ::google::protobuf::Arena* submessage_arena = position->GetArena();
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(message_arena, position, submessage_arena);
    }
    set_has_position();
    _impl_.payload_variant_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Config.position)
}
void Config::set_allocated_power(::meshtastic::Config_PowerConfig* PROTOBUF_NULLABLE power) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload_variant();
  if (power) {
    ::google::protobuf::Arena* submessage_arena = power->GetArena();
    if (message_arena != submessage_arena) {
      power = ::google::protobuf::internal::GetOwnedMessage(message_arena, power, submessage_arena);
    }
    set_has_power();
    _impl_.payload_variant_.power_ = power;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Config.power)
}
void Config::set_allocated_network(::meshtastic::Config_NetworkConfig* PROTOBUF_NULLABLE network) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload_variant();
  if (network) {
    ::google::protobuf::Arena* submessage_arena = network->GetArena();
    if (message_arena != submessage_arena) {
      network = ::google::protobuf::internal::GetOwnedMessage(message_arena, network, submessage_arena);
    }
    set_has_network();
    _impl_.payload_variant_.network_ = network;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Config.network)
}
void Config::set_allocated_display(::meshtastic::Config_DisplayConfig* PROTOBUF_NULLABLE display) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload_variant();
  if (display) {
    ::google::protobuf::Arena* submessage_arena = display->GetArena();
    if (message_arena != submessage_arena) {
      display = ::google::protobuf::internal::GetOwnedMessage(message_arena, display, submessage_arena);
    }
    set_has_display();
    _impl_.payload_variant_.display_ = display;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Config.display)
}
void Config::set_allocated_lora(::meshtastic::Config_LoRaConfig* PROTOBUF_NULLABLE lora) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload_variant();
  if (lora) {
    ::google::protobuf::Arena* submessage_arena = lora->GetArena();
    if (message_arena != submessage_arena) {
      lora = ::google::protobuf::internal::GetOwnedMessage(message_arena, lora, submessage_arena);
    }
    set_has_lora();
    _impl_.payload_variant_.lora_ = lora;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Config.lora)
}
void Config::set_allocated_bluetooth(::meshtastic::Config_BluetoothConfig* PROTOBUF_NULLABLE bluetooth) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload_variant();
  if (bluetooth) {
    ::google::protobuf::Arena* submessage_arena = bluetooth->GetArena();
    if (message_arena != submessage_arena) {
      bluetooth = ::google::protobuf::internal::GetOwnedMessage(message_arena, bluetooth, submessage_arena);
    }
    set_has_bluetooth();
    _impl_.payload_variant_.bluetooth_ = bluetooth;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Config.bluetooth)
}
void Config::set_allocated_security(::meshtastic::Config_SecurityConfig* PROTOBUF_NULLABLE security) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload_variant();
  if (security) {
    ::google::protobuf::Arena* submessage_arena = security->GetArena();
    if (message_arena != submessage_arena) {
      security = ::google::protobuf::internal::GetOwnedMessage(message_arena, security, submessage_arena);
    }
    set_has_security();
    _impl_.payload_variant_.security_ = security;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Config.security)
}
void Config::set_allocated_sessionkey(::meshtastic::Config_SessionkeyConfig* PROTOBUF_NULLABLE sessionkey) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload_variant();
  if (sessionkey) {
    ::google::protobuf::Arena* submessage_arena = sessionkey->GetArena();
    if (message_arena != submessage_arena) {
      sessionkey = ::google::protobuf::internal::GetOwnedMessage(message_arena, sessionkey, submessage_arena);
    }
    set_has_sessionkey();
    _impl_.payload_variant_.sessionkey_ = sessionkey;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Config.sessionkey)
}
void Config::set_allocated_device_ui(::meshtastic::DeviceUIConfig* PROTOBUF_NULLABLE device_ui) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload_variant();
  if (device_ui) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(device_ui)->GetArena();
    if (message_arena != submessage_arena) {
      device_ui = ::google::protobuf::internal::GetOwnedMessage(message_arena, device_ui, submessage_arena);
    }
    set_has_device_ui();
    _impl_.payload_variant_.device_ui_ = device_ui;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Config.device_ui)
}
void Config::clear_device_ui() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_variant_case() == kDeviceUi) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_variant_.device_ui_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_variant_.device_ui_);
    }
    clear_has_payload_variant();
  }
}
Config::Config(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.Config)
}
PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::meshtastic::Config& from_msg)
      : payload_variant_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Config::Config(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Config& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Config_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Config* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (payload_variant_case()) {
    case PAYLOAD_VARIANT_NOT_SET:
      break;
      case kDevice:
        _impl_.payload_variant_.device_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.device_);
        break;
      case kPosition:
        _impl_.payload_variant_.position_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.position_);
        break;
      case kPower:
        _impl_.payload_variant_.power_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.power_);
        break;
      case kNetwork:
        _impl_.payload_variant_.network_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.network_);
        break;
      case kDisplay:
        _impl_.payload_variant_.display_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.display_);
        break;
      case kLora:
        _impl_.payload_variant_.lora_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.lora_);
        break;
      case kBluetooth:
        _impl_.payload_variant_.bluetooth_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.bluetooth_);
        break;
      case kSecurity:
        _impl_.payload_variant_.security_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.security_);
        break;
      case kSessionkey:
        _impl_.payload_variant_.sessionkey_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.sessionkey_);
        break;
      case kDeviceUi:
        _impl_.payload_variant_.device_ui_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.device_ui_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:meshtastic.Config)
}
PROTOBUF_NDEBUG_INLINE Config::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : payload_variant_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Config::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Config::~Config() {
  // @@protoc_insertion_point(destructor:meshtastic.Config)
  SharedDtor(*this);
}
inline void Config::SharedDtor(MessageLite& self) {
  Config& this_ = static_cast<Config&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_payload_variant()) {
    this_.clear_payload_variant();
  }
  this_._impl_.~Impl_();
}

void Config::clear_payload_variant() {
// @@protoc_insertion_point(one_of_clear_start:meshtastic.Config)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (payload_variant_case()) {
    case kDevice: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_variant_.device_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_variant_.device_);
      }
      break;
    }
    case kPosition: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_variant_.position_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_variant_.position_);
      }
      break;
    }
    case kPower: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_variant_.power_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_variant_.power_);
      }
      break;
    }
    case kNetwork: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_variant_.network_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_variant_.network_);
      }
      break;
    }
    case kDisplay: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_variant_.display_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_variant_.display_);
      }
      break;
    }
    case kLora: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_variant_.lora_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_variant_.lora_);
      }
      break;
    }
    case kBluetooth: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_variant_.bluetooth_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_variant_.bluetooth_);
      }
      break;
    }
    case kSecurity: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_variant_.security_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_variant_.security_);
      }
      break;
    }
    case kSessionkey: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_variant_.sessionkey_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_variant_.sessionkey_);
      }
      break;
    }
    case kDeviceUi: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_variant_.device_ui_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_variant_.device_ui_);
      }
      break;
    }
    case PAYLOAD_VARIANT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_VARIANT_NOT_SET;
}


inline void* PROTOBUF_NONNULL Config::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Config(arena);
}
constexpr auto Config::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Config),
                                            alignof(Config));
}
constexpr auto Config::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Config_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Config::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Config>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Config::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Config>(), &Config::ByteSizeLong,
              &Config::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Config, _impl_._cached_size_),
          false,
      },
      &Config::kDescriptorMethods,
      &descriptor_table_meshtastic_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Config_class_data_ =
        Config::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Config::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Config_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Config_class_data_.tc_table);
  return Config_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 10, 10, 0, 2>
Config::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    10,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Config_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::Config>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .meshtastic.Config.DeviceConfig device = 1;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.payload_variant_.device_), _Internal::kOneofCaseOffset + 0, 0, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.Config.PositionConfig position = 2;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.payload_variant_.position_), _Internal::kOneofCaseOffset + 0, 1, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.Config.PowerConfig power = 3;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.payload_variant_.power_), _Internal::kOneofCaseOffset + 0, 2, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.Config.NetworkConfig network = 4;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.payload_variant_.network_), _Internal::kOneofCaseOffset + 0, 3, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.Config.DisplayConfig display = 5;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.payload_variant_.display_), _Internal::kOneofCaseOffset + 0, 4, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.Config.LoRaConfig lora = 6;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.payload_variant_.lora_), _Internal::kOneofCaseOffset + 0, 5, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.Config.BluetoothConfig bluetooth = 7;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.payload_variant_.bluetooth_), _Internal::kOneofCaseOffset + 0, 6, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.Config.SecurityConfig security = 8;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.payload_variant_.security_), _Internal::kOneofCaseOffset + 0, 7, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.Config.SessionkeyConfig sessionkey = 9;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.payload_variant_.sessionkey_), _Internal::kOneofCaseOffset + 0, 8, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.DeviceUIConfig device_ui = 10;
    {PROTOBUF_FIELD_OFFSET(Config, _impl_.payload_variant_.device_ui_), _Internal::kOneofCaseOffset + 0, 9, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::meshtastic::Config_DeviceConfig>()},
      {::_pbi::TcParser::GetTable<::meshtastic::Config_PositionConfig>()},
      {::_pbi::TcParser::GetTable<::meshtastic::Config_PowerConfig>()},
      {::_pbi::TcParser::GetTable<::meshtastic::Config_NetworkConfig>()},
      {::_pbi::TcParser::GetTable<::meshtastic::Config_DisplayConfig>()},
      {::_pbi::TcParser::GetTable<::meshtastic::Config_LoRaConfig>()},
      {::_pbi::TcParser::GetTable<::meshtastic::Config_BluetoothConfig>()},
      {::_pbi::TcParser::GetTable<::meshtastic::Config_SecurityConfig>()},
      {::_pbi::TcParser::GetTable<::meshtastic::Config_SessionkeyConfig>()},
      {::_pbi::TcParser::GetTable<::meshtastic::DeviceUIConfig>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.Config)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload_variant();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Config::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Config& this_ = static_cast<const Config&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Config::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Config& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (this_.payload_variant_case()) {
    case kDevice: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *this_._impl_.payload_variant_.device_, this_._impl_.payload_variant_.device_->GetCachedSize(), target,
          stream);
      break;
    }
    case kPosition: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.payload_variant_.position_, this_._impl_.payload_variant_.position_->GetCachedSize(), target,
          stream);
      break;
    }
    case kPower: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *this_._impl_.payload_variant_.power_, this_._impl_.payload_variant_.power_->GetCachedSize(), target,
          stream);
      break;
    }
    case kNetwork: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *this_._impl_.payload_variant_.network_, this_._impl_.payload_variant_.network_->GetCachedSize(), target,
          stream);
      break;
    }
    case kDisplay: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *this_._impl_.payload_variant_.display_, this_._impl_.payload_variant_.display_->GetCachedSize(), target,
          stream);
      break;
    }
    case kLora: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *this_._impl_.payload_variant_.lora_, this_._impl_.payload_variant_.lora_->GetCachedSize(), target,
          stream);
      break;
    }
    case kBluetooth: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, *this_._impl_.payload_variant_.bluetooth_, this_._impl_.payload_variant_.bluetooth_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSecurity: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, *this_._impl_.payload_variant_.security_, this_._impl_.payload_variant_.security_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSessionkey: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, *this_._impl_.payload_variant_.sessionkey_, this_._impl_.payload_variant_.sessionkey_->GetCachedSize(), target,
          stream);
      break;
    }
    case kDeviceUi: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, *this_._impl_.payload_variant_.device_ui_, this_._impl_.payload_variant_.device_ui_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.Config)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Config::ByteSizeLong(const MessageLite& base) {
  const Config& this_ = static_cast<const Config&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Config::ByteSizeLong() const {
  const Config& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (this_.payload_variant_case()) {
    // .meshtastic.Config.DeviceConfig device = 1;
    case kDevice: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_variant_.device_);
      break;
    }
    // .meshtastic.Config.PositionConfig position = 2;
    case kPosition: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_variant_.position_);
      break;
    }
    // .meshtastic.Config.PowerConfig power = 3;
    case kPower: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_variant_.power_);
      break;
    }
    // .meshtastic.Config.NetworkConfig network = 4;
    case kNetwork: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_variant_.network_);
      break;
    }
    // .meshtastic.Config.DisplayConfig display = 5;
    case kDisplay: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_variant_.display_);
      break;
    }
    // .meshtastic.Config.LoRaConfig lora = 6;
    case kLora: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_variant_.lora_);
      break;
    }
    // .meshtastic.Config.BluetoothConfig bluetooth = 7;
    case kBluetooth: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_variant_.bluetooth_);
      break;
    }
    // .meshtastic.Config.SecurityConfig security = 8;
    case kSecurity: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_variant_.security_);
      break;
    }
    // .meshtastic.Config.SessionkeyConfig sessionkey = 9;
    case kSessionkey: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_variant_.sessionkey_);
      break;
    }
    // .meshtastic.DeviceUIConfig device_ui = 10;
    case kDeviceUi: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_variant_.device_ui_);
      break;
    }
    case PAYLOAD_VARIANT_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Config::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_payload_variant();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kDevice: {
        if (oneof_needs_init) {
          _this->_impl_.payload_variant_.device_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.device_);
        } else {
          _this->_impl_.payload_variant_.device_->MergeFrom(*from._impl_.payload_variant_.device_);
        }
        break;
      }
      case kPosition: {
        if (oneof_needs_init) {
          _this->_impl_.payload_variant_.position_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.position_);
        } else {
          _this->_impl_.payload_variant_.position_->MergeFrom(*from._impl_.payload_variant_.position_);
        }
        break;
      }
      case kPower: {
        if (oneof_needs_init) {
          _this->_impl_.payload_variant_.power_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.power_);
        } else {
          _this->_impl_.payload_variant_.power_->MergeFrom(*from._impl_.payload_variant_.power_);
        }
        break;
      }
      case kNetwork: {
        if (oneof_needs_init) {
          _this->_impl_.payload_variant_.network_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.network_);
        } else {
          _this->_impl_.payload_variant_.network_->MergeFrom(*from._impl_.payload_variant_.network_);
        }
        break;
      }
      case kDisplay: {
        if (oneof_needs_init) {
          _this->_impl_.payload_variant_.display_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.display_);
        } else {
          _this->_impl_.payload_variant_.display_->MergeFrom(*from._impl_.payload_variant_.display_);
        }
        break;
      }
      case kLora: {
        if (oneof_needs_init) {
          _this->_impl_.payload_variant_.lora_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.lora_);
        } else {
          _this->_impl_.payload_variant_.lora_->MergeFrom(*from._impl_.payload_variant_.lora_);
        }
        break;
      }
      case kBluetooth: {
        if (oneof_needs_init) {
          _this->_impl_.payload_variant_.bluetooth_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.bluetooth_);
        } else {
          _this->_impl_.payload_variant_.bluetooth_->MergeFrom(*from._impl_.payload_variant_.bluetooth_);
        }
        break;
      }
      case kSecurity: {
        if (oneof_needs_init) {
          _this->_impl_.payload_variant_.security_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.security_);
        } else {
          _this->_impl_.payload_variant_.security_->MergeFrom(*from._impl_.payload_variant_.security_);
        }
        break;
      }
      case kSessionkey: {
        if (oneof_needs_init) {
          _this->_impl_.payload_variant_.sessionkey_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.sessionkey_);
        } else {
          _this->_impl_.payload_variant_.sessionkey_->MergeFrom(*from._impl_.payload_variant_.sessionkey_);
        }
        break;
      }
      case kDeviceUi: {
        if (oneof_needs_init) {
          _this->_impl_.payload_variant_.device_ui_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_variant_.device_ui_);
        } else {
          _this->_impl_.payload_variant_.device_ui_->MergeFrom(*from._impl_.payload_variant_.device_ui_);
        }
        break;
      }
      case PAYLOAD_VARIANT_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Config::InternalSwap(Config* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_variant_, other->_impl_.payload_variant_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace meshtastic
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_meshtastic_2fconfig_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
