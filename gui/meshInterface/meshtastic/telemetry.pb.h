// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: meshtastic/telemetry.proto
// Protobuf C++ Version: 6.31.1

#ifndef meshtastic_2ftelemetry_2eproto_2epb_2eh
#define meshtastic_2ftelemetry_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_meshtastic_2ftelemetry_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_meshtastic_2ftelemetry_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_meshtastic_2ftelemetry_2eproto;
}  // extern "C"
namespace meshtastic {
enum TelemetrySensorType : int;
extern const uint32_t TelemetrySensorType_internal_data_[];
class AirQualityMetrics;
struct AirQualityMetricsDefaultTypeInternal;
extern AirQualityMetricsDefaultTypeInternal _AirQualityMetrics_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull AirQualityMetrics_class_data_;
class DeviceMetrics;
struct DeviceMetricsDefaultTypeInternal;
extern DeviceMetricsDefaultTypeInternal _DeviceMetrics_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DeviceMetrics_class_data_;
class EnvironmentMetrics;
struct EnvironmentMetricsDefaultTypeInternal;
extern EnvironmentMetricsDefaultTypeInternal _EnvironmentMetrics_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull EnvironmentMetrics_class_data_;
class HealthMetrics;
struct HealthMetricsDefaultTypeInternal;
extern HealthMetricsDefaultTypeInternal _HealthMetrics_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull HealthMetrics_class_data_;
class HostMetrics;
struct HostMetricsDefaultTypeInternal;
extern HostMetricsDefaultTypeInternal _HostMetrics_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull HostMetrics_class_data_;
class LocalStats;
struct LocalStatsDefaultTypeInternal;
extern LocalStatsDefaultTypeInternal _LocalStats_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull LocalStats_class_data_;
class Nau7802Config;
struct Nau7802ConfigDefaultTypeInternal;
extern Nau7802ConfigDefaultTypeInternal _Nau7802Config_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Nau7802Config_class_data_;
class PowerMetrics;
struct PowerMetricsDefaultTypeInternal;
extern PowerMetricsDefaultTypeInternal _PowerMetrics_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull PowerMetrics_class_data_;
class Telemetry;
struct TelemetryDefaultTypeInternal;
extern TelemetryDefaultTypeInternal _Telemetry_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Telemetry_class_data_;
}  // namespace meshtastic
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::meshtastic::TelemetrySensorType_internal_data_>
    internal::EnumTraitsImpl::value<::meshtastic::TelemetrySensorType>;
}  // namespace protobuf
}  // namespace google

namespace meshtastic {
enum TelemetrySensorType : int {
  SENSOR_UNSET = 0,
  BME280 = 1,
  BME680 = 2,
  MCP9808 = 3,
  INA260 = 4,
  INA219 = 5,
  BMP280 = 6,
  SHTC3 = 7,
  LPS22 = 8,
  QMC6310 = 9,
  QMI8658 = 10,
  QMC5883L = 11,
  SHT31 = 12,
  PMSA003I = 13,
  INA3221 = 14,
  BMP085 = 15,
  RCWL9620 = 16,
  SHT4X = 17,
  VEML7700 = 18,
  MLX90632 = 19,
  OPT3001 = 20,
  LTR390UV = 21,
  TSL25911FN = 22,
  AHT10 = 23,
  DFROBOT_LARK = 24,
  NAU7802 = 25,
  BMP3XX = 26,
  ICM20948 = 27,
  MAX17048 = 28,
  CUSTOM_SENSOR = 29,
  MAX30102 = 30,
  MLX90614 = 31,
  SCD4X = 32,
  RADSENS = 33,
  INA226 = 34,
  DFROBOT_RAIN = 35,
  DPS310 = 36,
  RAK12035 = 37,
  MAX17261 = 38,
  PCT2075 = 39,
  ADS1X15 = 40,
  ADS1X15_ALT = 41,
  SFA30 = 42,
  SEN5X = 43,
  TSL2561 = 44,
  TelemetrySensorType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  TelemetrySensorType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t TelemetrySensorType_internal_data_[];
inline constexpr TelemetrySensorType TelemetrySensorType_MIN =
    static_cast<TelemetrySensorType>(0);
inline constexpr TelemetrySensorType TelemetrySensorType_MAX =
    static_cast<TelemetrySensorType>(44);
inline bool TelemetrySensorType_IsValid(int value) {
  return 0 <= value && value <= 44;
}
inline constexpr int TelemetrySensorType_ARRAYSIZE = 44 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TelemetrySensorType_descriptor();
template <typename T>
const ::std::string& TelemetrySensorType_Name(T value) {
  static_assert(::std::is_same<T, TelemetrySensorType>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to TelemetrySensorType_Name().");
  return TelemetrySensorType_Name(static_cast<TelemetrySensorType>(value));
}
template <>
inline const ::std::string& TelemetrySensorType_Name(TelemetrySensorType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TelemetrySensorType_descriptor, 0, 44>(
      static_cast<int>(value));
}
inline bool TelemetrySensorType_Parse(
    ::absl::string_view name, TelemetrySensorType* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<TelemetrySensorType>(TelemetrySensorType_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class PowerMetrics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.PowerMetrics) */ {
 public:
  inline PowerMetrics() : PowerMetrics(nullptr) {}
  ~PowerMetrics() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PowerMetrics* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PowerMetrics));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PowerMetrics(::google::protobuf::internal::ConstantInitialized);

  inline PowerMetrics(const PowerMetrics& from) : PowerMetrics(nullptr, from) {}
  inline PowerMetrics(PowerMetrics&& from) noexcept
      : PowerMetrics(nullptr, ::std::move(from)) {}
  inline PowerMetrics& operator=(const PowerMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerMetrics& operator=(PowerMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PowerMetrics& default_instance() {
    return *reinterpret_cast<const PowerMetrics*>(
        &_PowerMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(PowerMetrics& a, PowerMetrics& b) { a.Swap(&b); }
  inline void Swap(PowerMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PowerMetrics* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PowerMetrics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PowerMetrics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PowerMetrics& from) { PowerMetrics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PowerMetrics* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.PowerMetrics"; }

 protected:
  explicit PowerMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  PowerMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const PowerMetrics& from);
  PowerMetrics(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, PowerMetrics&& from) noexcept
      : PowerMetrics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCh1VoltageFieldNumber = 1,
    kCh1CurrentFieldNumber = 2,
    kCh2VoltageFieldNumber = 3,
    kCh2CurrentFieldNumber = 4,
    kCh3VoltageFieldNumber = 5,
    kCh3CurrentFieldNumber = 6,
    kCh4VoltageFieldNumber = 7,
    kCh4CurrentFieldNumber = 8,
    kCh5VoltageFieldNumber = 9,
    kCh5CurrentFieldNumber = 10,
    kCh6VoltageFieldNumber = 11,
    kCh6CurrentFieldNumber = 12,
    kCh7VoltageFieldNumber = 13,
    kCh7CurrentFieldNumber = 14,
    kCh8VoltageFieldNumber = 15,
    kCh8CurrentFieldNumber = 16,
  };
  // optional float ch1_voltage = 1;
  bool has_ch1_voltage() const;
  void clear_ch1_voltage() ;
  float ch1_voltage() const;
  void set_ch1_voltage(float value);

  private:
  float _internal_ch1_voltage() const;
  void _internal_set_ch1_voltage(float value);

  public:
  // optional float ch1_current = 2;
  bool has_ch1_current() const;
  void clear_ch1_current() ;
  float ch1_current() const;
  void set_ch1_current(float value);

  private:
  float _internal_ch1_current() const;
  void _internal_set_ch1_current(float value);

  public:
  // optional float ch2_voltage = 3;
  bool has_ch2_voltage() const;
  void clear_ch2_voltage() ;
  float ch2_voltage() const;
  void set_ch2_voltage(float value);

  private:
  float _internal_ch2_voltage() const;
  void _internal_set_ch2_voltage(float value);

  public:
  // optional float ch2_current = 4;
  bool has_ch2_current() const;
  void clear_ch2_current() ;
  float ch2_current() const;
  void set_ch2_current(float value);

  private:
  float _internal_ch2_current() const;
  void _internal_set_ch2_current(float value);

  public:
  // optional float ch3_voltage = 5;
  bool has_ch3_voltage() const;
  void clear_ch3_voltage() ;
  float ch3_voltage() const;
  void set_ch3_voltage(float value);

  private:
  float _internal_ch3_voltage() const;
  void _internal_set_ch3_voltage(float value);

  public:
  // optional float ch3_current = 6;
  bool has_ch3_current() const;
  void clear_ch3_current() ;
  float ch3_current() const;
  void set_ch3_current(float value);

  private:
  float _internal_ch3_current() const;
  void _internal_set_ch3_current(float value);

  public:
  // optional float ch4_voltage = 7;
  bool has_ch4_voltage() const;
  void clear_ch4_voltage() ;
  float ch4_voltage() const;
  void set_ch4_voltage(float value);

  private:
  float _internal_ch4_voltage() const;
  void _internal_set_ch4_voltage(float value);

  public:
  // optional float ch4_current = 8;
  bool has_ch4_current() const;
  void clear_ch4_current() ;
  float ch4_current() const;
  void set_ch4_current(float value);

  private:
  float _internal_ch4_current() const;
  void _internal_set_ch4_current(float value);

  public:
  // optional float ch5_voltage = 9;
  bool has_ch5_voltage() const;
  void clear_ch5_voltage() ;
  float ch5_voltage() const;
  void set_ch5_voltage(float value);

  private:
  float _internal_ch5_voltage() const;
  void _internal_set_ch5_voltage(float value);

  public:
  // optional float ch5_current = 10;
  bool has_ch5_current() const;
  void clear_ch5_current() ;
  float ch5_current() const;
  void set_ch5_current(float value);

  private:
  float _internal_ch5_current() const;
  void _internal_set_ch5_current(float value);

  public:
  // optional float ch6_voltage = 11;
  bool has_ch6_voltage() const;
  void clear_ch6_voltage() ;
  float ch6_voltage() const;
  void set_ch6_voltage(float value);

  private:
  float _internal_ch6_voltage() const;
  void _internal_set_ch6_voltage(float value);

  public:
  // optional float ch6_current = 12;
  bool has_ch6_current() const;
  void clear_ch6_current() ;
  float ch6_current() const;
  void set_ch6_current(float value);

  private:
  float _internal_ch6_current() const;
  void _internal_set_ch6_current(float value);

  public:
  // optional float ch7_voltage = 13;
  bool has_ch7_voltage() const;
  void clear_ch7_voltage() ;
  float ch7_voltage() const;
  void set_ch7_voltage(float value);

  private:
  float _internal_ch7_voltage() const;
  void _internal_set_ch7_voltage(float value);

  public:
  // optional float ch7_current = 14;
  bool has_ch7_current() const;
  void clear_ch7_current() ;
  float ch7_current() const;
  void set_ch7_current(float value);

  private:
  float _internal_ch7_current() const;
  void _internal_set_ch7_current(float value);

  public:
  // optional float ch8_voltage = 15;
  bool has_ch8_voltage() const;
  void clear_ch8_voltage() ;
  float ch8_voltage() const;
  void set_ch8_voltage(float value);

  private:
  float _internal_ch8_voltage() const;
  void _internal_set_ch8_voltage(float value);

  public:
  // optional float ch8_current = 16;
  bool has_ch8_current() const;
  void clear_ch8_current() ;
  float ch8_current() const;
  void set_ch8_current(float value);

  private:
  float _internal_ch8_current() const;
  void _internal_set_ch8_current(float value);

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.PowerMetrics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 16,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const PowerMetrics& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float ch1_voltage_;
    float ch1_current_;
    float ch2_voltage_;
    float ch2_current_;
    float ch3_voltage_;
    float ch3_current_;
    float ch4_voltage_;
    float ch4_current_;
    float ch5_voltage_;
    float ch5_current_;
    float ch6_voltage_;
    float ch6_current_;
    float ch7_voltage_;
    float ch7_current_;
    float ch8_voltage_;
    float ch8_current_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2ftelemetry_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull PowerMetrics_class_data_;
// -------------------------------------------------------------------

class Nau7802Config final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.Nau7802Config) */ {
 public:
  inline Nau7802Config() : Nau7802Config(nullptr) {}
  ~Nau7802Config() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Nau7802Config* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Nau7802Config));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Nau7802Config(::google::protobuf::internal::ConstantInitialized);

  inline Nau7802Config(const Nau7802Config& from) : Nau7802Config(nullptr, from) {}
  inline Nau7802Config(Nau7802Config&& from) noexcept
      : Nau7802Config(nullptr, ::std::move(from)) {}
  inline Nau7802Config& operator=(const Nau7802Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Nau7802Config& operator=(Nau7802Config&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Nau7802Config& default_instance() {
    return *reinterpret_cast<const Nau7802Config*>(
        &_Nau7802Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Nau7802Config& a, Nau7802Config& b) { a.Swap(&b); }
  inline void Swap(Nau7802Config* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Nau7802Config* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Nau7802Config* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Nau7802Config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Nau7802Config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Nau7802Config& from) { Nau7802Config::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Nau7802Config* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.Nau7802Config"; }

 protected:
  explicit Nau7802Config(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Nau7802Config(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Nau7802Config& from);
  Nau7802Config(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Nau7802Config&& from) noexcept
      : Nau7802Config(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kZeroOffsetFieldNumber = 1,
    kCalibrationFactorFieldNumber = 2,
  };
  // int32 zeroOffset = 1;
  void clear_zerooffset() ;
  ::int32_t zerooffset() const;
  void set_zerooffset(::int32_t value);

  private:
  ::int32_t _internal_zerooffset() const;
  void _internal_set_zerooffset(::int32_t value);

  public:
  // float calibrationFactor = 2;
  void clear_calibrationfactor() ;
  float calibrationfactor() const;
  void set_calibrationfactor(float value);

  private:
  float _internal_calibrationfactor() const;
  void _internal_set_calibrationfactor(float value);

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.Nau7802Config)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Nau7802Config& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t zerooffset_;
    float calibrationfactor_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2ftelemetry_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Nau7802Config_class_data_;
// -------------------------------------------------------------------

class LocalStats final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.LocalStats) */ {
 public:
  inline LocalStats() : LocalStats(nullptr) {}
  ~LocalStats() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LocalStats* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LocalStats));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LocalStats(::google::protobuf::internal::ConstantInitialized);

  inline LocalStats(const LocalStats& from) : LocalStats(nullptr, from) {}
  inline LocalStats(LocalStats&& from) noexcept
      : LocalStats(nullptr, ::std::move(from)) {}
  inline LocalStats& operator=(const LocalStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalStats& operator=(LocalStats&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalStats& default_instance() {
    return *reinterpret_cast<const LocalStats*>(
        &_LocalStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(LocalStats& a, LocalStats& b) { a.Swap(&b); }
  inline void Swap(LocalStats* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalStats* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalStats* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LocalStats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LocalStats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LocalStats& from) { LocalStats::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LocalStats* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.LocalStats"; }

 protected:
  explicit LocalStats(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  LocalStats(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const LocalStats& from);
  LocalStats(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, LocalStats&& from) noexcept
      : LocalStats(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUptimeSecondsFieldNumber = 1,
    kChannelUtilizationFieldNumber = 2,
    kAirUtilTxFieldNumber = 3,
    kNumPacketsTxFieldNumber = 4,
    kNumPacketsRxFieldNumber = 5,
    kNumPacketsRxBadFieldNumber = 6,
    kNumOnlineNodesFieldNumber = 7,
    kNumTotalNodesFieldNumber = 8,
    kNumRxDupeFieldNumber = 9,
    kNumTxRelayFieldNumber = 10,
    kNumTxRelayCanceledFieldNumber = 11,
    kHeapTotalBytesFieldNumber = 12,
    kHeapFreeBytesFieldNumber = 13,
  };
  // uint32 uptime_seconds = 1;
  void clear_uptime_seconds() ;
  ::uint32_t uptime_seconds() const;
  void set_uptime_seconds(::uint32_t value);

  private:
  ::uint32_t _internal_uptime_seconds() const;
  void _internal_set_uptime_seconds(::uint32_t value);

  public:
  // float channel_utilization = 2;
  void clear_channel_utilization() ;
  float channel_utilization() const;
  void set_channel_utilization(float value);

  private:
  float _internal_channel_utilization() const;
  void _internal_set_channel_utilization(float value);

  public:
  // float air_util_tx = 3;
  void clear_air_util_tx() ;
  float air_util_tx() const;
  void set_air_util_tx(float value);

  private:
  float _internal_air_util_tx() const;
  void _internal_set_air_util_tx(float value);

  public:
  // uint32 num_packets_tx = 4;
  void clear_num_packets_tx() ;
  ::uint32_t num_packets_tx() const;
  void set_num_packets_tx(::uint32_t value);

  private:
  ::uint32_t _internal_num_packets_tx() const;
  void _internal_set_num_packets_tx(::uint32_t value);

  public:
  // uint32 num_packets_rx = 5;
  void clear_num_packets_rx() ;
  ::uint32_t num_packets_rx() const;
  void set_num_packets_rx(::uint32_t value);

  private:
  ::uint32_t _internal_num_packets_rx() const;
  void _internal_set_num_packets_rx(::uint32_t value);

  public:
  // uint32 num_packets_rx_bad = 6;
  void clear_num_packets_rx_bad() ;
  ::uint32_t num_packets_rx_bad() const;
  void set_num_packets_rx_bad(::uint32_t value);

  private:
  ::uint32_t _internal_num_packets_rx_bad() const;
  void _internal_set_num_packets_rx_bad(::uint32_t value);

  public:
  // uint32 num_online_nodes = 7;
  void clear_num_online_nodes() ;
  ::uint32_t num_online_nodes() const;
  void set_num_online_nodes(::uint32_t value);

  private:
  ::uint32_t _internal_num_online_nodes() const;
  void _internal_set_num_online_nodes(::uint32_t value);

  public:
  // uint32 num_total_nodes = 8;
  void clear_num_total_nodes() ;
  ::uint32_t num_total_nodes() const;
  void set_num_total_nodes(::uint32_t value);

  private:
  ::uint32_t _internal_num_total_nodes() const;
  void _internal_set_num_total_nodes(::uint32_t value);

  public:
  // uint32 num_rx_dupe = 9;
  void clear_num_rx_dupe() ;
  ::uint32_t num_rx_dupe() const;
  void set_num_rx_dupe(::uint32_t value);

  private:
  ::uint32_t _internal_num_rx_dupe() const;
  void _internal_set_num_rx_dupe(::uint32_t value);

  public:
  // uint32 num_tx_relay = 10;
  void clear_num_tx_relay() ;
  ::uint32_t num_tx_relay() const;
  void set_num_tx_relay(::uint32_t value);

  private:
  ::uint32_t _internal_num_tx_relay() const;
  void _internal_set_num_tx_relay(::uint32_t value);

  public:
  // uint32 num_tx_relay_canceled = 11;
  void clear_num_tx_relay_canceled() ;
  ::uint32_t num_tx_relay_canceled() const;
  void set_num_tx_relay_canceled(::uint32_t value);

  private:
  ::uint32_t _internal_num_tx_relay_canceled() const;
  void _internal_set_num_tx_relay_canceled(::uint32_t value);

  public:
  // uint32 heap_total_bytes = 12;
  void clear_heap_total_bytes() ;
  ::uint32_t heap_total_bytes() const;
  void set_heap_total_bytes(::uint32_t value);

  private:
  ::uint32_t _internal_heap_total_bytes() const;
  void _internal_set_heap_total_bytes(::uint32_t value);

  public:
  // uint32 heap_free_bytes = 13;
  void clear_heap_free_bytes() ;
  ::uint32_t heap_free_bytes() const;
  void set_heap_free_bytes(::uint32_t value);

  private:
  ::uint32_t _internal_heap_free_bytes() const;
  void _internal_set_heap_free_bytes(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.LocalStats)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 13,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const LocalStats& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t uptime_seconds_;
    float channel_utilization_;
    float air_util_tx_;
    ::uint32_t num_packets_tx_;
    ::uint32_t num_packets_rx_;
    ::uint32_t num_packets_rx_bad_;
    ::uint32_t num_online_nodes_;
    ::uint32_t num_total_nodes_;
    ::uint32_t num_rx_dupe_;
    ::uint32_t num_tx_relay_;
    ::uint32_t num_tx_relay_canceled_;
    ::uint32_t heap_total_bytes_;
    ::uint32_t heap_free_bytes_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2ftelemetry_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull LocalStats_class_data_;
// -------------------------------------------------------------------

class HostMetrics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.HostMetrics) */ {
 public:
  inline HostMetrics() : HostMetrics(nullptr) {}
  ~HostMetrics() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HostMetrics* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HostMetrics));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HostMetrics(::google::protobuf::internal::ConstantInitialized);

  inline HostMetrics(const HostMetrics& from) : HostMetrics(nullptr, from) {}
  inline HostMetrics(HostMetrics&& from) noexcept
      : HostMetrics(nullptr, ::std::move(from)) {}
  inline HostMetrics& operator=(const HostMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostMetrics& operator=(HostMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostMetrics& default_instance() {
    return *reinterpret_cast<const HostMetrics*>(
        &_HostMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(HostMetrics& a, HostMetrics& b) { a.Swap(&b); }
  inline void Swap(HostMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostMetrics* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HostMetrics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HostMetrics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HostMetrics& from) { HostMetrics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HostMetrics* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.HostMetrics"; }

 protected:
  explicit HostMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  HostMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const HostMetrics& from);
  HostMetrics(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, HostMetrics&& from) noexcept
      : HostMetrics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserStringFieldNumber = 9,
    kFreememBytesFieldNumber = 2,
    kDiskfree1BytesFieldNumber = 3,
    kUptimeSecondsFieldNumber = 1,
    kLoad1FieldNumber = 6,
    kDiskfree2BytesFieldNumber = 4,
    kDiskfree3BytesFieldNumber = 5,
    kLoad5FieldNumber = 7,
    kLoad15FieldNumber = 8,
  };
  // optional string user_string = 9;
  bool has_user_string() const;
  void clear_user_string() ;
  const ::std::string& user_string() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_user_string(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_user_string();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_user_string();
  void set_allocated_user_string(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_user_string() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_user_string(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_user_string();

  public:
  // uint64 freemem_bytes = 2;
  void clear_freemem_bytes() ;
  ::uint64_t freemem_bytes() const;
  void set_freemem_bytes(::uint64_t value);

  private:
  ::uint64_t _internal_freemem_bytes() const;
  void _internal_set_freemem_bytes(::uint64_t value);

  public:
  // uint64 diskfree1_bytes = 3;
  void clear_diskfree1_bytes() ;
  ::uint64_t diskfree1_bytes() const;
  void set_diskfree1_bytes(::uint64_t value);

  private:
  ::uint64_t _internal_diskfree1_bytes() const;
  void _internal_set_diskfree1_bytes(::uint64_t value);

  public:
  // uint32 uptime_seconds = 1;
  void clear_uptime_seconds() ;
  ::uint32_t uptime_seconds() const;
  void set_uptime_seconds(::uint32_t value);

  private:
  ::uint32_t _internal_uptime_seconds() const;
  void _internal_set_uptime_seconds(::uint32_t value);

  public:
  // uint32 load1 = 6;
  void clear_load1() ;
  ::uint32_t load1() const;
  void set_load1(::uint32_t value);

  private:
  ::uint32_t _internal_load1() const;
  void _internal_set_load1(::uint32_t value);

  public:
  // optional uint64 diskfree2_bytes = 4;
  bool has_diskfree2_bytes() const;
  void clear_diskfree2_bytes() ;
  ::uint64_t diskfree2_bytes() const;
  void set_diskfree2_bytes(::uint64_t value);

  private:
  ::uint64_t _internal_diskfree2_bytes() const;
  void _internal_set_diskfree2_bytes(::uint64_t value);

  public:
  // optional uint64 diskfree3_bytes = 5;
  bool has_diskfree3_bytes() const;
  void clear_diskfree3_bytes() ;
  ::uint64_t diskfree3_bytes() const;
  void set_diskfree3_bytes(::uint64_t value);

  private:
  ::uint64_t _internal_diskfree3_bytes() const;
  void _internal_set_diskfree3_bytes(::uint64_t value);

  public:
  // uint32 load5 = 7;
  void clear_load5() ;
  ::uint32_t load5() const;
  void set_load5(::uint32_t value);

  private:
  ::uint32_t _internal_load5() const;
  void _internal_set_load5(::uint32_t value);

  public:
  // uint32 load15 = 8;
  void clear_load15() ;
  ::uint32_t load15() const;
  void set_load15(::uint32_t value);

  private:
  ::uint32_t _internal_load15() const;
  void _internal_set_load15(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.HostMetrics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9,
                                   0, 50,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const HostMetrics& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr user_string_;
    ::uint64_t freemem_bytes_;
    ::uint64_t diskfree1_bytes_;
    ::uint32_t uptime_seconds_;
    ::uint32_t load1_;
    ::uint64_t diskfree2_bytes_;
    ::uint64_t diskfree3_bytes_;
    ::uint32_t load5_;
    ::uint32_t load15_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2ftelemetry_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull HostMetrics_class_data_;
// -------------------------------------------------------------------

class HealthMetrics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.HealthMetrics) */ {
 public:
  inline HealthMetrics() : HealthMetrics(nullptr) {}
  ~HealthMetrics() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HealthMetrics* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HealthMetrics));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HealthMetrics(::google::protobuf::internal::ConstantInitialized);

  inline HealthMetrics(const HealthMetrics& from) : HealthMetrics(nullptr, from) {}
  inline HealthMetrics(HealthMetrics&& from) noexcept
      : HealthMetrics(nullptr, ::std::move(from)) {}
  inline HealthMetrics& operator=(const HealthMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthMetrics& operator=(HealthMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthMetrics& default_instance() {
    return *reinterpret_cast<const HealthMetrics*>(
        &_HealthMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(HealthMetrics& a, HealthMetrics& b) { a.Swap(&b); }
  inline void Swap(HealthMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthMetrics* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HealthMetrics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HealthMetrics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HealthMetrics& from) { HealthMetrics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HealthMetrics* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.HealthMetrics"; }

 protected:
  explicit HealthMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  HealthMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const HealthMetrics& from);
  HealthMetrics(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, HealthMetrics&& from) noexcept
      : HealthMetrics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeartBpmFieldNumber = 1,
    kSpO2FieldNumber = 2,
    kTemperatureFieldNumber = 3,
  };
  // optional uint32 heart_bpm = 1;
  bool has_heart_bpm() const;
  void clear_heart_bpm() ;
  ::uint32_t heart_bpm() const;
  void set_heart_bpm(::uint32_t value);

  private:
  ::uint32_t _internal_heart_bpm() const;
  void _internal_set_heart_bpm(::uint32_t value);

  public:
  // optional uint32 spO2 = 2;
  bool has_spo2() const;
  void clear_spo2() ;
  ::uint32_t spo2() const;
  void set_spo2(::uint32_t value);

  private:
  ::uint32_t _internal_spo2() const;
  void _internal_set_spo2(::uint32_t value);

  public:
  // optional float temperature = 3;
  bool has_temperature() const;
  void clear_temperature() ;
  float temperature() const;
  void set_temperature(float value);

  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.HealthMetrics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const HealthMetrics& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t heart_bpm_;
    ::uint32_t spo2_;
    float temperature_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2ftelemetry_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull HealthMetrics_class_data_;
// -------------------------------------------------------------------

class EnvironmentMetrics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.EnvironmentMetrics) */ {
 public:
  inline EnvironmentMetrics() : EnvironmentMetrics(nullptr) {}
  ~EnvironmentMetrics() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EnvironmentMetrics* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EnvironmentMetrics));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EnvironmentMetrics(::google::protobuf::internal::ConstantInitialized);

  inline EnvironmentMetrics(const EnvironmentMetrics& from) : EnvironmentMetrics(nullptr, from) {}
  inline EnvironmentMetrics(EnvironmentMetrics&& from) noexcept
      : EnvironmentMetrics(nullptr, ::std::move(from)) {}
  inline EnvironmentMetrics& operator=(const EnvironmentMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentMetrics& operator=(EnvironmentMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnvironmentMetrics& default_instance() {
    return *reinterpret_cast<const EnvironmentMetrics*>(
        &_EnvironmentMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(EnvironmentMetrics& a, EnvironmentMetrics& b) { a.Swap(&b); }
  inline void Swap(EnvironmentMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvironmentMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnvironmentMetrics* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EnvironmentMetrics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EnvironmentMetrics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EnvironmentMetrics& from) { EnvironmentMetrics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EnvironmentMetrics* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.EnvironmentMetrics"; }

 protected:
  explicit EnvironmentMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  EnvironmentMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const EnvironmentMetrics& from);
  EnvironmentMetrics(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, EnvironmentMetrics&& from) noexcept
      : EnvironmentMetrics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTemperatureFieldNumber = 1,
    kRelativeHumidityFieldNumber = 2,
    kBarometricPressureFieldNumber = 3,
    kGasResistanceFieldNumber = 4,
    kVoltageFieldNumber = 5,
    kCurrentFieldNumber = 6,
    kIaqFieldNumber = 7,
    kDistanceFieldNumber = 8,
    kLuxFieldNumber = 9,
    kWhiteLuxFieldNumber = 10,
    kIrLuxFieldNumber = 11,
    kUvLuxFieldNumber = 12,
    kWindDirectionFieldNumber = 13,
    kWindSpeedFieldNumber = 14,
    kWeightFieldNumber = 15,
    kWindGustFieldNumber = 16,
    kWindLullFieldNumber = 17,
    kRadiationFieldNumber = 18,
    kRainfall1HFieldNumber = 19,
    kRainfall24HFieldNumber = 20,
    kSoilMoistureFieldNumber = 21,
    kSoilTemperatureFieldNumber = 22,
  };
  // optional float temperature = 1;
  bool has_temperature() const;
  void clear_temperature() ;
  float temperature() const;
  void set_temperature(float value);

  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);

  public:
  // optional float relative_humidity = 2;
  bool has_relative_humidity() const;
  void clear_relative_humidity() ;
  float relative_humidity() const;
  void set_relative_humidity(float value);

  private:
  float _internal_relative_humidity() const;
  void _internal_set_relative_humidity(float value);

  public:
  // optional float barometric_pressure = 3;
  bool has_barometric_pressure() const;
  void clear_barometric_pressure() ;
  float barometric_pressure() const;
  void set_barometric_pressure(float value);

  private:
  float _internal_barometric_pressure() const;
  void _internal_set_barometric_pressure(float value);

  public:
  // optional float gas_resistance = 4;
  bool has_gas_resistance() const;
  void clear_gas_resistance() ;
  float gas_resistance() const;
  void set_gas_resistance(float value);

  private:
  float _internal_gas_resistance() const;
  void _internal_set_gas_resistance(float value);

  public:
  // optional float voltage = 5;
  bool has_voltage() const;
  void clear_voltage() ;
  float voltage() const;
  void set_voltage(float value);

  private:
  float _internal_voltage() const;
  void _internal_set_voltage(float value);

  public:
  // optional float current = 6;
  bool has_current() const;
  void clear_current() ;
  float current() const;
  void set_current(float value);

  private:
  float _internal_current() const;
  void _internal_set_current(float value);

  public:
  // optional uint32 iaq = 7;
  bool has_iaq() const;
  void clear_iaq() ;
  ::uint32_t iaq() const;
  void set_iaq(::uint32_t value);

  private:
  ::uint32_t _internal_iaq() const;
  void _internal_set_iaq(::uint32_t value);

  public:
  // optional float distance = 8;
  bool has_distance() const;
  void clear_distance() ;
  float distance() const;
  void set_distance(float value);

  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);

  public:
  // optional float lux = 9;
  bool has_lux() const;
  void clear_lux() ;
  float lux() const;
  void set_lux(float value);

  private:
  float _internal_lux() const;
  void _internal_set_lux(float value);

  public:
  // optional float white_lux = 10;
  bool has_white_lux() const;
  void clear_white_lux() ;
  float white_lux() const;
  void set_white_lux(float value);

  private:
  float _internal_white_lux() const;
  void _internal_set_white_lux(float value);

  public:
  // optional float ir_lux = 11;
  bool has_ir_lux() const;
  void clear_ir_lux() ;
  float ir_lux() const;
  void set_ir_lux(float value);

  private:
  float _internal_ir_lux() const;
  void _internal_set_ir_lux(float value);

  public:
  // optional float uv_lux = 12;
  bool has_uv_lux() const;
  void clear_uv_lux() ;
  float uv_lux() const;
  void set_uv_lux(float value);

  private:
  float _internal_uv_lux() const;
  void _internal_set_uv_lux(float value);

  public:
  // optional uint32 wind_direction = 13;
  bool has_wind_direction() const;
  void clear_wind_direction() ;
  ::uint32_t wind_direction() const;
  void set_wind_direction(::uint32_t value);

  private:
  ::uint32_t _internal_wind_direction() const;
  void _internal_set_wind_direction(::uint32_t value);

  public:
  // optional float wind_speed = 14;
  bool has_wind_speed() const;
  void clear_wind_speed() ;
  float wind_speed() const;
  void set_wind_speed(float value);

  private:
  float _internal_wind_speed() const;
  void _internal_set_wind_speed(float value);

  public:
  // optional float weight = 15;
  bool has_weight() const;
  void clear_weight() ;
  float weight() const;
  void set_weight(float value);

  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);

  public:
  // optional float wind_gust = 16;
  bool has_wind_gust() const;
  void clear_wind_gust() ;
  float wind_gust() const;
  void set_wind_gust(float value);

  private:
  float _internal_wind_gust() const;
  void _internal_set_wind_gust(float value);

  public:
  // optional float wind_lull = 17;
  bool has_wind_lull() const;
  void clear_wind_lull() ;
  float wind_lull() const;
  void set_wind_lull(float value);

  private:
  float _internal_wind_lull() const;
  void _internal_set_wind_lull(float value);

  public:
  // optional float radiation = 18;
  bool has_radiation() const;
  void clear_radiation() ;
  float radiation() const;
  void set_radiation(float value);

  private:
  float _internal_radiation() const;
  void _internal_set_radiation(float value);

  public:
  // optional float rainfall_1h = 19;
  bool has_rainfall_1h() const;
  void clear_rainfall_1h() ;
  float rainfall_1h() const;
  void set_rainfall_1h(float value);

  private:
  float _internal_rainfall_1h() const;
  void _internal_set_rainfall_1h(float value);

  public:
  // optional float rainfall_24h = 20;
  bool has_rainfall_24h() const;
  void clear_rainfall_24h() ;
  float rainfall_24h() const;
  void set_rainfall_24h(float value);

  private:
  float _internal_rainfall_24h() const;
  void _internal_set_rainfall_24h(float value);

  public:
  // optional uint32 soil_moisture = 21;
  bool has_soil_moisture() const;
  void clear_soil_moisture() ;
  ::uint32_t soil_moisture() const;
  void set_soil_moisture(::uint32_t value);

  private:
  ::uint32_t _internal_soil_moisture() const;
  void _internal_set_soil_moisture(::uint32_t value);

  public:
  // optional float soil_temperature = 22;
  bool has_soil_temperature() const;
  void clear_soil_temperature() ;
  float soil_temperature() const;
  void set_soil_temperature(float value);

  private:
  float _internal_soil_temperature() const;
  void _internal_set_soil_temperature(float value);

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.EnvironmentMetrics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 22,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const EnvironmentMetrics& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float temperature_;
    float relative_humidity_;
    float barometric_pressure_;
    float gas_resistance_;
    float voltage_;
    float current_;
    ::uint32_t iaq_;
    float distance_;
    float lux_;
    float white_lux_;
    float ir_lux_;
    float uv_lux_;
    ::uint32_t wind_direction_;
    float wind_speed_;
    float weight_;
    float wind_gust_;
    float wind_lull_;
    float radiation_;
    float rainfall_1h_;
    float rainfall_24h_;
    ::uint32_t soil_moisture_;
    float soil_temperature_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2ftelemetry_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull EnvironmentMetrics_class_data_;
// -------------------------------------------------------------------

class DeviceMetrics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.DeviceMetrics) */ {
 public:
  inline DeviceMetrics() : DeviceMetrics(nullptr) {}
  ~DeviceMetrics() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DeviceMetrics* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DeviceMetrics));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceMetrics(::google::protobuf::internal::ConstantInitialized);

  inline DeviceMetrics(const DeviceMetrics& from) : DeviceMetrics(nullptr, from) {}
  inline DeviceMetrics(DeviceMetrics&& from) noexcept
      : DeviceMetrics(nullptr, ::std::move(from)) {}
  inline DeviceMetrics& operator=(const DeviceMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMetrics& operator=(DeviceMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMetrics& default_instance() {
    return *reinterpret_cast<const DeviceMetrics*>(
        &_DeviceMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(DeviceMetrics& a, DeviceMetrics& b) { a.Swap(&b); }
  inline void Swap(DeviceMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMetrics* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DeviceMetrics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceMetrics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceMetrics& from) { DeviceMetrics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DeviceMetrics* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.DeviceMetrics"; }

 protected:
  explicit DeviceMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DeviceMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DeviceMetrics& from);
  DeviceMetrics(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DeviceMetrics&& from) noexcept
      : DeviceMetrics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBatteryLevelFieldNumber = 1,
    kVoltageFieldNumber = 2,
    kChannelUtilizationFieldNumber = 3,
    kAirUtilTxFieldNumber = 4,
    kUptimeSecondsFieldNumber = 5,
  };
  // optional uint32 battery_level = 1;
  bool has_battery_level() const;
  void clear_battery_level() ;
  ::uint32_t battery_level() const;
  void set_battery_level(::uint32_t value);

  private:
  ::uint32_t _internal_battery_level() const;
  void _internal_set_battery_level(::uint32_t value);

  public:
  // optional float voltage = 2;
  bool has_voltage() const;
  void clear_voltage() ;
  float voltage() const;
  void set_voltage(float value);

  private:
  float _internal_voltage() const;
  void _internal_set_voltage(float value);

  public:
  // optional float channel_utilization = 3;
  bool has_channel_utilization() const;
  void clear_channel_utilization() ;
  float channel_utilization() const;
  void set_channel_utilization(float value);

  private:
  float _internal_channel_utilization() const;
  void _internal_set_channel_utilization(float value);

  public:
  // optional float air_util_tx = 4;
  bool has_air_util_tx() const;
  void clear_air_util_tx() ;
  float air_util_tx() const;
  void set_air_util_tx(float value);

  private:
  float _internal_air_util_tx() const;
  void _internal_set_air_util_tx(float value);

  public:
  // optional uint32 uptime_seconds = 5;
  bool has_uptime_seconds() const;
  void clear_uptime_seconds() ;
  ::uint32_t uptime_seconds() const;
  void set_uptime_seconds(::uint32_t value);

  private:
  ::uint32_t _internal_uptime_seconds() const;
  void _internal_set_uptime_seconds(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.DeviceMetrics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DeviceMetrics& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t battery_level_;
    float voltage_;
    float channel_utilization_;
    float air_util_tx_;
    ::uint32_t uptime_seconds_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2ftelemetry_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DeviceMetrics_class_data_;
// -------------------------------------------------------------------

class AirQualityMetrics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.AirQualityMetrics) */ {
 public:
  inline AirQualityMetrics() : AirQualityMetrics(nullptr) {}
  ~AirQualityMetrics() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AirQualityMetrics* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AirQualityMetrics));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AirQualityMetrics(::google::protobuf::internal::ConstantInitialized);

  inline AirQualityMetrics(const AirQualityMetrics& from) : AirQualityMetrics(nullptr, from) {}
  inline AirQualityMetrics(AirQualityMetrics&& from) noexcept
      : AirQualityMetrics(nullptr, ::std::move(from)) {}
  inline AirQualityMetrics& operator=(const AirQualityMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline AirQualityMetrics& operator=(AirQualityMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AirQualityMetrics& default_instance() {
    return *reinterpret_cast<const AirQualityMetrics*>(
        &_AirQualityMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AirQualityMetrics& a, AirQualityMetrics& b) { a.Swap(&b); }
  inline void Swap(AirQualityMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AirQualityMetrics* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AirQualityMetrics* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AirQualityMetrics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AirQualityMetrics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AirQualityMetrics& from) { AirQualityMetrics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AirQualityMetrics* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.AirQualityMetrics"; }

 protected:
  explicit AirQualityMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  AirQualityMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const AirQualityMetrics& from);
  AirQualityMetrics(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, AirQualityMetrics&& from) noexcept
      : AirQualityMetrics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPm10StandardFieldNumber = 1,
    kPm25StandardFieldNumber = 2,
    kPm100StandardFieldNumber = 3,
    kPm10EnvironmentalFieldNumber = 4,
    kPm25EnvironmentalFieldNumber = 5,
    kPm100EnvironmentalFieldNumber = 6,
    kParticles03UmFieldNumber = 7,
    kParticles05UmFieldNumber = 8,
    kParticles10UmFieldNumber = 9,
    kParticles25UmFieldNumber = 10,
    kParticles50UmFieldNumber = 11,
    kParticles100UmFieldNumber = 12,
    kCo2FieldNumber = 13,
    kCo2TemperatureFieldNumber = 14,
    kCo2HumidityFieldNumber = 15,
    kFormFormaldehydeFieldNumber = 16,
    kFormHumidityFieldNumber = 17,
    kFormTemperatureFieldNumber = 18,
    kPm40StandardFieldNumber = 19,
    kParticles40UmFieldNumber = 20,
    kPmTemperatureFieldNumber = 21,
    kPmHumidityFieldNumber = 22,
    kPmVocIdxFieldNumber = 23,
    kPmNoxIdxFieldNumber = 24,
    kParticlesTpsFieldNumber = 25,
  };
  // optional uint32 pm10_standard = 1;
  bool has_pm10_standard() const;
  void clear_pm10_standard() ;
  ::uint32_t pm10_standard() const;
  void set_pm10_standard(::uint32_t value);

  private:
  ::uint32_t _internal_pm10_standard() const;
  void _internal_set_pm10_standard(::uint32_t value);

  public:
  // optional uint32 pm25_standard = 2;
  bool has_pm25_standard() const;
  void clear_pm25_standard() ;
  ::uint32_t pm25_standard() const;
  void set_pm25_standard(::uint32_t value);

  private:
  ::uint32_t _internal_pm25_standard() const;
  void _internal_set_pm25_standard(::uint32_t value);

  public:
  // optional uint32 pm100_standard = 3;
  bool has_pm100_standard() const;
  void clear_pm100_standard() ;
  ::uint32_t pm100_standard() const;
  void set_pm100_standard(::uint32_t value);

  private:
  ::uint32_t _internal_pm100_standard() const;
  void _internal_set_pm100_standard(::uint32_t value);

  public:
  // optional uint32 pm10_environmental = 4;
  bool has_pm10_environmental() const;
  void clear_pm10_environmental() ;
  ::uint32_t pm10_environmental() const;
  void set_pm10_environmental(::uint32_t value);

  private:
  ::uint32_t _internal_pm10_environmental() const;
  void _internal_set_pm10_environmental(::uint32_t value);

  public:
  // optional uint32 pm25_environmental = 5;
  bool has_pm25_environmental() const;
  void clear_pm25_environmental() ;
  ::uint32_t pm25_environmental() const;
  void set_pm25_environmental(::uint32_t value);

  private:
  ::uint32_t _internal_pm25_environmental() const;
  void _internal_set_pm25_environmental(::uint32_t value);

  public:
  // optional uint32 pm100_environmental = 6;
  bool has_pm100_environmental() const;
  void clear_pm100_environmental() ;
  ::uint32_t pm100_environmental() const;
  void set_pm100_environmental(::uint32_t value);

  private:
  ::uint32_t _internal_pm100_environmental() const;
  void _internal_set_pm100_environmental(::uint32_t value);

  public:
  // optional uint32 particles_03um = 7;
  bool has_particles_03um() const;
  void clear_particles_03um() ;
  ::uint32_t particles_03um() const;
  void set_particles_03um(::uint32_t value);

  private:
  ::uint32_t _internal_particles_03um() const;
  void _internal_set_particles_03um(::uint32_t value);

  public:
  // optional uint32 particles_05um = 8;
  bool has_particles_05um() const;
  void clear_particles_05um() ;
  ::uint32_t particles_05um() const;
  void set_particles_05um(::uint32_t value);

  private:
  ::uint32_t _internal_particles_05um() const;
  void _internal_set_particles_05um(::uint32_t value);

  public:
  // optional uint32 particles_10um = 9;
  bool has_particles_10um() const;
  void clear_particles_10um() ;
  ::uint32_t particles_10um() const;
  void set_particles_10um(::uint32_t value);

  private:
  ::uint32_t _internal_particles_10um() const;
  void _internal_set_particles_10um(::uint32_t value);

  public:
  // optional uint32 particles_25um = 10;
  bool has_particles_25um() const;
  void clear_particles_25um() ;
  ::uint32_t particles_25um() const;
  void set_particles_25um(::uint32_t value);

  private:
  ::uint32_t _internal_particles_25um() const;
  void _internal_set_particles_25um(::uint32_t value);

  public:
  // optional uint32 particles_50um = 11;
  bool has_particles_50um() const;
  void clear_particles_50um() ;
  ::uint32_t particles_50um() const;
  void set_particles_50um(::uint32_t value);

  private:
  ::uint32_t _internal_particles_50um() const;
  void _internal_set_particles_50um(::uint32_t value);

  public:
  // optional uint32 particles_100um = 12;
  bool has_particles_100um() const;
  void clear_particles_100um() ;
  ::uint32_t particles_100um() const;
  void set_particles_100um(::uint32_t value);

  private:
  ::uint32_t _internal_particles_100um() const;
  void _internal_set_particles_100um(::uint32_t value);

  public:
  // optional uint32 co2 = 13;
  bool has_co2() const;
  void clear_co2() ;
  ::uint32_t co2() const;
  void set_co2(::uint32_t value);

  private:
  ::uint32_t _internal_co2() const;
  void _internal_set_co2(::uint32_t value);

  public:
  // optional float co2_temperature = 14;
  bool has_co2_temperature() const;
  void clear_co2_temperature() ;
  float co2_temperature() const;
  void set_co2_temperature(float value);

  private:
  float _internal_co2_temperature() const;
  void _internal_set_co2_temperature(float value);

  public:
  // optional float co2_humidity = 15;
  bool has_co2_humidity() const;
  void clear_co2_humidity() ;
  float co2_humidity() const;
  void set_co2_humidity(float value);

  private:
  float _internal_co2_humidity() const;
  void _internal_set_co2_humidity(float value);

  public:
  // optional float form_formaldehyde = 16;
  bool has_form_formaldehyde() const;
  void clear_form_formaldehyde() ;
  float form_formaldehyde() const;
  void set_form_formaldehyde(float value);

  private:
  float _internal_form_formaldehyde() const;
  void _internal_set_form_formaldehyde(float value);

  public:
  // optional float form_humidity = 17;
  bool has_form_humidity() const;
  void clear_form_humidity() ;
  float form_humidity() const;
  void set_form_humidity(float value);

  private:
  float _internal_form_humidity() const;
  void _internal_set_form_humidity(float value);

  public:
  // optional float form_temperature = 18;
  bool has_form_temperature() const;
  void clear_form_temperature() ;
  float form_temperature() const;
  void set_form_temperature(float value);

  private:
  float _internal_form_temperature() const;
  void _internal_set_form_temperature(float value);

  public:
  // optional uint32 pm40_standard = 19;
  bool has_pm40_standard() const;
  void clear_pm40_standard() ;
  ::uint32_t pm40_standard() const;
  void set_pm40_standard(::uint32_t value);

  private:
  ::uint32_t _internal_pm40_standard() const;
  void _internal_set_pm40_standard(::uint32_t value);

  public:
  // optional uint32 particles_40um = 20;
  bool has_particles_40um() const;
  void clear_particles_40um() ;
  ::uint32_t particles_40um() const;
  void set_particles_40um(::uint32_t value);

  private:
  ::uint32_t _internal_particles_40um() const;
  void _internal_set_particles_40um(::uint32_t value);

  public:
  // optional float pm_temperature = 21;
  bool has_pm_temperature() const;
  void clear_pm_temperature() ;
  float pm_temperature() const;
  void set_pm_temperature(float value);

  private:
  float _internal_pm_temperature() const;
  void _internal_set_pm_temperature(float value);

  public:
  // optional float pm_humidity = 22;
  bool has_pm_humidity() const;
  void clear_pm_humidity() ;
  float pm_humidity() const;
  void set_pm_humidity(float value);

  private:
  float _internal_pm_humidity() const;
  void _internal_set_pm_humidity(float value);

  public:
  // optional float pm_voc_idx = 23;
  bool has_pm_voc_idx() const;
  void clear_pm_voc_idx() ;
  float pm_voc_idx() const;
  void set_pm_voc_idx(float value);

  private:
  float _internal_pm_voc_idx() const;
  void _internal_set_pm_voc_idx(float value);

  public:
  // optional float pm_nox_idx = 24;
  bool has_pm_nox_idx() const;
  void clear_pm_nox_idx() ;
  float pm_nox_idx() const;
  void set_pm_nox_idx(float value);

  private:
  float _internal_pm_nox_idx() const;
  void _internal_set_pm_nox_idx(float value);

  public:
  // optional float particles_tps = 25;
  bool has_particles_tps() const;
  void clear_particles_tps() ;
  float particles_tps() const;
  void set_particles_tps(float value);

  private:
  float _internal_particles_tps() const;
  void _internal_set_particles_tps(float value);

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.AirQualityMetrics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 25,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const AirQualityMetrics& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t pm10_standard_;
    ::uint32_t pm25_standard_;
    ::uint32_t pm100_standard_;
    ::uint32_t pm10_environmental_;
    ::uint32_t pm25_environmental_;
    ::uint32_t pm100_environmental_;
    ::uint32_t particles_03um_;
    ::uint32_t particles_05um_;
    ::uint32_t particles_10um_;
    ::uint32_t particles_25um_;
    ::uint32_t particles_50um_;
    ::uint32_t particles_100um_;
    ::uint32_t co2_;
    float co2_temperature_;
    float co2_humidity_;
    float form_formaldehyde_;
    float form_humidity_;
    float form_temperature_;
    ::uint32_t pm40_standard_;
    ::uint32_t particles_40um_;
    float pm_temperature_;
    float pm_humidity_;
    float pm_voc_idx_;
    float pm_nox_idx_;
    float particles_tps_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2ftelemetry_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull AirQualityMetrics_class_data_;
// -------------------------------------------------------------------

class Telemetry final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.Telemetry) */ {
 public:
  inline Telemetry() : Telemetry(nullptr) {}
  ~Telemetry() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Telemetry* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Telemetry));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Telemetry(::google::protobuf::internal::ConstantInitialized);

  inline Telemetry(const Telemetry& from) : Telemetry(nullptr, from) {}
  inline Telemetry(Telemetry&& from) noexcept
      : Telemetry(nullptr, ::std::move(from)) {}
  inline Telemetry& operator=(const Telemetry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Telemetry& operator=(Telemetry&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Telemetry& default_instance() {
    return *reinterpret_cast<const Telemetry*>(
        &_Telemetry_default_instance_);
  }
  enum VariantCase {
    kDeviceMetrics = 2,
    kEnvironmentMetrics = 3,
    kAirQualityMetrics = 4,
    kPowerMetrics = 5,
    kLocalStats = 6,
    kHealthMetrics = 7,
    kHostMetrics = 8,
    VARIANT_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Telemetry& a, Telemetry& b) { a.Swap(&b); }
  inline void Swap(Telemetry* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Telemetry* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Telemetry* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Telemetry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Telemetry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Telemetry& from) { Telemetry::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Telemetry* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.Telemetry"; }

 protected:
  explicit Telemetry(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Telemetry(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Telemetry& from);
  Telemetry(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Telemetry&& from) noexcept
      : Telemetry(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimeFieldNumber = 1,
    kDeviceMetricsFieldNumber = 2,
    kEnvironmentMetricsFieldNumber = 3,
    kAirQualityMetricsFieldNumber = 4,
    kPowerMetricsFieldNumber = 5,
    kLocalStatsFieldNumber = 6,
    kHealthMetricsFieldNumber = 7,
    kHostMetricsFieldNumber = 8,
  };
  // fixed32 time = 1;
  void clear_time() ;
  ::uint32_t time() const;
  void set_time(::uint32_t value);

  private:
  ::uint32_t _internal_time() const;
  void _internal_set_time(::uint32_t value);

  public:
  // .meshtastic.DeviceMetrics device_metrics = 2;
  bool has_device_metrics() const;
  private:
  bool _internal_has_device_metrics() const;

  public:
  void clear_device_metrics() ;
  const ::meshtastic::DeviceMetrics& device_metrics() const;
  [[nodiscard]] ::meshtastic::DeviceMetrics* PROTOBUF_NULLABLE release_device_metrics();
  ::meshtastic::DeviceMetrics* PROTOBUF_NONNULL mutable_device_metrics();
  void set_allocated_device_metrics(::meshtastic::DeviceMetrics* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_device_metrics(::meshtastic::DeviceMetrics* PROTOBUF_NULLABLE value);
  ::meshtastic::DeviceMetrics* PROTOBUF_NULLABLE unsafe_arena_release_device_metrics();

  private:
  const ::meshtastic::DeviceMetrics& _internal_device_metrics() const;
  ::meshtastic::DeviceMetrics* PROTOBUF_NONNULL _internal_mutable_device_metrics();

  public:
  // .meshtastic.EnvironmentMetrics environment_metrics = 3;
  bool has_environment_metrics() const;
  private:
  bool _internal_has_environment_metrics() const;

  public:
  void clear_environment_metrics() ;
  const ::meshtastic::EnvironmentMetrics& environment_metrics() const;
  [[nodiscard]] ::meshtastic::EnvironmentMetrics* PROTOBUF_NULLABLE release_environment_metrics();
  ::meshtastic::EnvironmentMetrics* PROTOBUF_NONNULL mutable_environment_metrics();
  void set_allocated_environment_metrics(::meshtastic::EnvironmentMetrics* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_environment_metrics(::meshtastic::EnvironmentMetrics* PROTOBUF_NULLABLE value);
  ::meshtastic::EnvironmentMetrics* PROTOBUF_NULLABLE unsafe_arena_release_environment_metrics();

  private:
  const ::meshtastic::EnvironmentMetrics& _internal_environment_metrics() const;
  ::meshtastic::EnvironmentMetrics* PROTOBUF_NONNULL _internal_mutable_environment_metrics();

  public:
  // .meshtastic.AirQualityMetrics air_quality_metrics = 4;
  bool has_air_quality_metrics() const;
  private:
  bool _internal_has_air_quality_metrics() const;

  public:
  void clear_air_quality_metrics() ;
  const ::meshtastic::AirQualityMetrics& air_quality_metrics() const;
  [[nodiscard]] ::meshtastic::AirQualityMetrics* PROTOBUF_NULLABLE release_air_quality_metrics();
  ::meshtastic::AirQualityMetrics* PROTOBUF_NONNULL mutable_air_quality_metrics();
  void set_allocated_air_quality_metrics(::meshtastic::AirQualityMetrics* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_air_quality_metrics(::meshtastic::AirQualityMetrics* PROTOBUF_NULLABLE value);
  ::meshtastic::AirQualityMetrics* PROTOBUF_NULLABLE unsafe_arena_release_air_quality_metrics();

  private:
  const ::meshtastic::AirQualityMetrics& _internal_air_quality_metrics() const;
  ::meshtastic::AirQualityMetrics* PROTOBUF_NONNULL _internal_mutable_air_quality_metrics();

  public:
  // .meshtastic.PowerMetrics power_metrics = 5;
  bool has_power_metrics() const;
  private:
  bool _internal_has_power_metrics() const;

  public:
  void clear_power_metrics() ;
  const ::meshtastic::PowerMetrics& power_metrics() const;
  [[nodiscard]] ::meshtastic::PowerMetrics* PROTOBUF_NULLABLE release_power_metrics();
  ::meshtastic::PowerMetrics* PROTOBUF_NONNULL mutable_power_metrics();
  void set_allocated_power_metrics(::meshtastic::PowerMetrics* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_power_metrics(::meshtastic::PowerMetrics* PROTOBUF_NULLABLE value);
  ::meshtastic::PowerMetrics* PROTOBUF_NULLABLE unsafe_arena_release_power_metrics();

  private:
  const ::meshtastic::PowerMetrics& _internal_power_metrics() const;
  ::meshtastic::PowerMetrics* PROTOBUF_NONNULL _internal_mutable_power_metrics();

  public:
  // .meshtastic.LocalStats local_stats = 6;
  bool has_local_stats() const;
  private:
  bool _internal_has_local_stats() const;

  public:
  void clear_local_stats() ;
  const ::meshtastic::LocalStats& local_stats() const;
  [[nodiscard]] ::meshtastic::LocalStats* PROTOBUF_NULLABLE release_local_stats();
  ::meshtastic::LocalStats* PROTOBUF_NONNULL mutable_local_stats();
  void set_allocated_local_stats(::meshtastic::LocalStats* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_local_stats(::meshtastic::LocalStats* PROTOBUF_NULLABLE value);
  ::meshtastic::LocalStats* PROTOBUF_NULLABLE unsafe_arena_release_local_stats();

  private:
  const ::meshtastic::LocalStats& _internal_local_stats() const;
  ::meshtastic::LocalStats* PROTOBUF_NONNULL _internal_mutable_local_stats();

  public:
  // .meshtastic.HealthMetrics health_metrics = 7;
  bool has_health_metrics() const;
  private:
  bool _internal_has_health_metrics() const;

  public:
  void clear_health_metrics() ;
  const ::meshtastic::HealthMetrics& health_metrics() const;
  [[nodiscard]] ::meshtastic::HealthMetrics* PROTOBUF_NULLABLE release_health_metrics();
  ::meshtastic::HealthMetrics* PROTOBUF_NONNULL mutable_health_metrics();
  void set_allocated_health_metrics(::meshtastic::HealthMetrics* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_health_metrics(::meshtastic::HealthMetrics* PROTOBUF_NULLABLE value);
  ::meshtastic::HealthMetrics* PROTOBUF_NULLABLE unsafe_arena_release_health_metrics();

  private:
  const ::meshtastic::HealthMetrics& _internal_health_metrics() const;
  ::meshtastic::HealthMetrics* PROTOBUF_NONNULL _internal_mutable_health_metrics();

  public:
  // .meshtastic.HostMetrics host_metrics = 8;
  bool has_host_metrics() const;
  private:
  bool _internal_has_host_metrics() const;

  public:
  void clear_host_metrics() ;
  const ::meshtastic::HostMetrics& host_metrics() const;
  [[nodiscard]] ::meshtastic::HostMetrics* PROTOBUF_NULLABLE release_host_metrics();
  ::meshtastic::HostMetrics* PROTOBUF_NONNULL mutable_host_metrics();
  void set_allocated_host_metrics(::meshtastic::HostMetrics* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_host_metrics(::meshtastic::HostMetrics* PROTOBUF_NULLABLE value);
  ::meshtastic::HostMetrics* PROTOBUF_NULLABLE unsafe_arena_release_host_metrics();

  private:
  const ::meshtastic::HostMetrics& _internal_host_metrics() const;
  ::meshtastic::HostMetrics* PROTOBUF_NONNULL _internal_mutable_host_metrics();

  public:
  void clear_variant();
  VariantCase variant_case() const;
  // @@protoc_insertion_point(class_scope:meshtastic.Telemetry)
 private:
  class _Internal;
  void set_has_device_metrics();
  void set_has_environment_metrics();
  void set_has_air_quality_metrics();
  void set_has_power_metrics();
  void set_has_local_stats();
  void set_has_health_metrics();
  void set_has_host_metrics();
  inline bool has_variant() const;
  inline void clear_has_variant();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 8,
                                   7, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Telemetry& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t time_;
    union VariantUnion {
      constexpr VariantUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE device_metrics_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE environment_metrics_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE air_quality_metrics_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE power_metrics_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE local_stats_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE health_metrics_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE host_metrics_;
    } variant_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2ftelemetry_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Telemetry_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DeviceMetrics

// optional uint32 battery_level = 1;
inline bool DeviceMetrics::has_battery_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DeviceMetrics::clear_battery_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.battery_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t DeviceMetrics::battery_level() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceMetrics.battery_level)
  return _internal_battery_level();
}
inline void DeviceMetrics::set_battery_level(::uint32_t value) {
  _internal_set_battery_level(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceMetrics.battery_level)
}
inline ::uint32_t DeviceMetrics::_internal_battery_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.battery_level_;
}
inline void DeviceMetrics::_internal_set_battery_level(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.battery_level_ = value;
}

// optional float voltage = 2;
inline bool DeviceMetrics::has_voltage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DeviceMetrics::clear_voltage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voltage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float DeviceMetrics::voltage() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceMetrics.voltage)
  return _internal_voltage();
}
inline void DeviceMetrics::set_voltage(float value) {
  _internal_set_voltage(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceMetrics.voltage)
}
inline float DeviceMetrics::_internal_voltage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.voltage_;
}
inline void DeviceMetrics::_internal_set_voltage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voltage_ = value;
}

// optional float channel_utilization = 3;
inline bool DeviceMetrics::has_channel_utilization() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void DeviceMetrics::clear_channel_utilization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_utilization_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float DeviceMetrics::channel_utilization() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceMetrics.channel_utilization)
  return _internal_channel_utilization();
}
inline void DeviceMetrics::set_channel_utilization(float value) {
  _internal_set_channel_utilization(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceMetrics.channel_utilization)
}
inline float DeviceMetrics::_internal_channel_utilization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_utilization_;
}
inline void DeviceMetrics::_internal_set_channel_utilization(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_utilization_ = value;
}

// optional float air_util_tx = 4;
inline bool DeviceMetrics::has_air_util_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void DeviceMetrics::clear_air_util_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.air_util_tx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float DeviceMetrics::air_util_tx() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceMetrics.air_util_tx)
  return _internal_air_util_tx();
}
inline void DeviceMetrics::set_air_util_tx(float value) {
  _internal_set_air_util_tx(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceMetrics.air_util_tx)
}
inline float DeviceMetrics::_internal_air_util_tx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.air_util_tx_;
}
inline void DeviceMetrics::_internal_set_air_util_tx(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.air_util_tx_ = value;
}

// optional uint32 uptime_seconds = 5;
inline bool DeviceMetrics::has_uptime_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void DeviceMetrics::clear_uptime_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uptime_seconds_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t DeviceMetrics::uptime_seconds() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceMetrics.uptime_seconds)
  return _internal_uptime_seconds();
}
inline void DeviceMetrics::set_uptime_seconds(::uint32_t value) {
  _internal_set_uptime_seconds(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceMetrics.uptime_seconds)
}
inline ::uint32_t DeviceMetrics::_internal_uptime_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uptime_seconds_;
}
inline void DeviceMetrics::_internal_set_uptime_seconds(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uptime_seconds_ = value;
}

// -------------------------------------------------------------------

// EnvironmentMetrics

// optional float temperature = 1;
inline bool EnvironmentMetrics::has_temperature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float EnvironmentMetrics::temperature() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.temperature)
  return _internal_temperature();
}
inline void EnvironmentMetrics::set_temperature(float value) {
  _internal_set_temperature(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.temperature)
}
inline float EnvironmentMetrics::_internal_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_;
}
inline void EnvironmentMetrics::_internal_set_temperature(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = value;
}

// optional float relative_humidity = 2;
inline bool EnvironmentMetrics::has_relative_humidity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_relative_humidity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relative_humidity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float EnvironmentMetrics::relative_humidity() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.relative_humidity)
  return _internal_relative_humidity();
}
inline void EnvironmentMetrics::set_relative_humidity(float value) {
  _internal_set_relative_humidity(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.relative_humidity)
}
inline float EnvironmentMetrics::_internal_relative_humidity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.relative_humidity_;
}
inline void EnvironmentMetrics::_internal_set_relative_humidity(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relative_humidity_ = value;
}

// optional float barometric_pressure = 3;
inline bool EnvironmentMetrics::has_barometric_pressure() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_barometric_pressure() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barometric_pressure_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float EnvironmentMetrics::barometric_pressure() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.barometric_pressure)
  return _internal_barometric_pressure();
}
inline void EnvironmentMetrics::set_barometric_pressure(float value) {
  _internal_set_barometric_pressure(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.barometric_pressure)
}
inline float EnvironmentMetrics::_internal_barometric_pressure() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.barometric_pressure_;
}
inline void EnvironmentMetrics::_internal_set_barometric_pressure(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.barometric_pressure_ = value;
}

// optional float gas_resistance = 4;
inline bool EnvironmentMetrics::has_gas_resistance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_gas_resistance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_resistance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float EnvironmentMetrics::gas_resistance() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.gas_resistance)
  return _internal_gas_resistance();
}
inline void EnvironmentMetrics::set_gas_resistance(float value) {
  _internal_set_gas_resistance(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.gas_resistance)
}
inline float EnvironmentMetrics::_internal_gas_resistance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gas_resistance_;
}
inline void EnvironmentMetrics::_internal_set_gas_resistance(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_resistance_ = value;
}

// optional float voltage = 5;
inline bool EnvironmentMetrics::has_voltage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_voltage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voltage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float EnvironmentMetrics::voltage() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.voltage)
  return _internal_voltage();
}
inline void EnvironmentMetrics::set_voltage(float value) {
  _internal_set_voltage(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.voltage)
}
inline float EnvironmentMetrics::_internal_voltage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.voltage_;
}
inline void EnvironmentMetrics::_internal_set_voltage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voltage_ = value;
}

// optional float current = 6;
inline bool EnvironmentMetrics::has_current() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_current() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float EnvironmentMetrics::current() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.current)
  return _internal_current();
}
inline void EnvironmentMetrics::set_current(float value) {
  _internal_set_current(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.current)
}
inline float EnvironmentMetrics::_internal_current() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_;
}
inline void EnvironmentMetrics::_internal_set_current(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_ = value;
}

// optional uint32 iaq = 7;
inline bool EnvironmentMetrics::has_iaq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_iaq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iaq_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t EnvironmentMetrics::iaq() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.iaq)
  return _internal_iaq();
}
inline void EnvironmentMetrics::set_iaq(::uint32_t value) {
  _internal_set_iaq(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.iaq)
}
inline ::uint32_t EnvironmentMetrics::_internal_iaq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.iaq_;
}
inline void EnvironmentMetrics::_internal_set_iaq(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iaq_ = value;
}

// optional float distance = 8;
inline bool EnvironmentMetrics::has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_distance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float EnvironmentMetrics::distance() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.distance)
  return _internal_distance();
}
inline void EnvironmentMetrics::set_distance(float value) {
  _internal_set_distance(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.distance)
}
inline float EnvironmentMetrics::_internal_distance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distance_;
}
inline void EnvironmentMetrics::_internal_set_distance(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distance_ = value;
}

// optional float lux = 9;
inline bool EnvironmentMetrics::has_lux() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_lux() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lux_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float EnvironmentMetrics::lux() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.lux)
  return _internal_lux();
}
inline void EnvironmentMetrics::set_lux(float value) {
  _internal_set_lux(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.lux)
}
inline float EnvironmentMetrics::_internal_lux() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lux_;
}
inline void EnvironmentMetrics::_internal_set_lux(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lux_ = value;
}

// optional float white_lux = 10;
inline bool EnvironmentMetrics::has_white_lux() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_white_lux() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.white_lux_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float EnvironmentMetrics::white_lux() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.white_lux)
  return _internal_white_lux();
}
inline void EnvironmentMetrics::set_white_lux(float value) {
  _internal_set_white_lux(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.white_lux)
}
inline float EnvironmentMetrics::_internal_white_lux() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.white_lux_;
}
inline void EnvironmentMetrics::_internal_set_white_lux(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.white_lux_ = value;
}

// optional float ir_lux = 11;
inline bool EnvironmentMetrics::has_ir_lux() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_ir_lux() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ir_lux_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float EnvironmentMetrics::ir_lux() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.ir_lux)
  return _internal_ir_lux();
}
inline void EnvironmentMetrics::set_ir_lux(float value) {
  _internal_set_ir_lux(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.ir_lux)
}
inline float EnvironmentMetrics::_internal_ir_lux() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ir_lux_;
}
inline void EnvironmentMetrics::_internal_set_ir_lux(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ir_lux_ = value;
}

// optional float uv_lux = 12;
inline bool EnvironmentMetrics::has_uv_lux() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_uv_lux() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uv_lux_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float EnvironmentMetrics::uv_lux() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.uv_lux)
  return _internal_uv_lux();
}
inline void EnvironmentMetrics::set_uv_lux(float value) {
  _internal_set_uv_lux(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.uv_lux)
}
inline float EnvironmentMetrics::_internal_uv_lux() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uv_lux_;
}
inline void EnvironmentMetrics::_internal_set_uv_lux(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uv_lux_ = value;
}

// optional uint32 wind_direction = 13;
inline bool EnvironmentMetrics::has_wind_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_wind_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wind_direction_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint32_t EnvironmentMetrics::wind_direction() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.wind_direction)
  return _internal_wind_direction();
}
inline void EnvironmentMetrics::set_wind_direction(::uint32_t value) {
  _internal_set_wind_direction(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.wind_direction)
}
inline ::uint32_t EnvironmentMetrics::_internal_wind_direction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wind_direction_;
}
inline void EnvironmentMetrics::_internal_set_wind_direction(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wind_direction_ = value;
}

// optional float wind_speed = 14;
inline bool EnvironmentMetrics::has_wind_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_wind_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wind_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float EnvironmentMetrics::wind_speed() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.wind_speed)
  return _internal_wind_speed();
}
inline void EnvironmentMetrics::set_wind_speed(float value) {
  _internal_set_wind_speed(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.wind_speed)
}
inline float EnvironmentMetrics::_internal_wind_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wind_speed_;
}
inline void EnvironmentMetrics::_internal_set_wind_speed(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wind_speed_ = value;
}

// optional float weight = 15;
inline bool EnvironmentMetrics::has_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float EnvironmentMetrics::weight() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.weight)
  return _internal_weight();
}
inline void EnvironmentMetrics::set_weight(float value) {
  _internal_set_weight(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.weight)
}
inline float EnvironmentMetrics::_internal_weight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.weight_;
}
inline void EnvironmentMetrics::_internal_set_weight(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weight_ = value;
}

// optional float wind_gust = 16;
inline bool EnvironmentMetrics::has_wind_gust() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_wind_gust() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wind_gust_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float EnvironmentMetrics::wind_gust() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.wind_gust)
  return _internal_wind_gust();
}
inline void EnvironmentMetrics::set_wind_gust(float value) {
  _internal_set_wind_gust(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.wind_gust)
}
inline float EnvironmentMetrics::_internal_wind_gust() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wind_gust_;
}
inline void EnvironmentMetrics::_internal_set_wind_gust(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wind_gust_ = value;
}

// optional float wind_lull = 17;
inline bool EnvironmentMetrics::has_wind_lull() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_wind_lull() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wind_lull_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float EnvironmentMetrics::wind_lull() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.wind_lull)
  return _internal_wind_lull();
}
inline void EnvironmentMetrics::set_wind_lull(float value) {
  _internal_set_wind_lull(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.wind_lull)
}
inline float EnvironmentMetrics::_internal_wind_lull() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wind_lull_;
}
inline void EnvironmentMetrics::_internal_set_wind_lull(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wind_lull_ = value;
}

// optional float radiation = 18;
inline bool EnvironmentMetrics::has_radiation() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_radiation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.radiation_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float EnvironmentMetrics::radiation() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.radiation)
  return _internal_radiation();
}
inline void EnvironmentMetrics::set_radiation(float value) {
  _internal_set_radiation(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.radiation)
}
inline float EnvironmentMetrics::_internal_radiation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.radiation_;
}
inline void EnvironmentMetrics::_internal_set_radiation(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.radiation_ = value;
}

// optional float rainfall_1h = 19;
inline bool EnvironmentMetrics::has_rainfall_1h() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_rainfall_1h() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rainfall_1h_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float EnvironmentMetrics::rainfall_1h() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.rainfall_1h)
  return _internal_rainfall_1h();
}
inline void EnvironmentMetrics::set_rainfall_1h(float value) {
  _internal_set_rainfall_1h(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.rainfall_1h)
}
inline float EnvironmentMetrics::_internal_rainfall_1h() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rainfall_1h_;
}
inline void EnvironmentMetrics::_internal_set_rainfall_1h(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rainfall_1h_ = value;
}

// optional float rainfall_24h = 20;
inline bool EnvironmentMetrics::has_rainfall_24h() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_rainfall_24h() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rainfall_24h_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float EnvironmentMetrics::rainfall_24h() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.rainfall_24h)
  return _internal_rainfall_24h();
}
inline void EnvironmentMetrics::set_rainfall_24h(float value) {
  _internal_set_rainfall_24h(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.rainfall_24h)
}
inline float EnvironmentMetrics::_internal_rainfall_24h() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rainfall_24h_;
}
inline void EnvironmentMetrics::_internal_set_rainfall_24h(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rainfall_24h_ = value;
}

// optional uint32 soil_moisture = 21;
inline bool EnvironmentMetrics::has_soil_moisture() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_soil_moisture() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.soil_moisture_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::uint32_t EnvironmentMetrics::soil_moisture() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.soil_moisture)
  return _internal_soil_moisture();
}
inline void EnvironmentMetrics::set_soil_moisture(::uint32_t value) {
  _internal_set_soil_moisture(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.soil_moisture)
}
inline ::uint32_t EnvironmentMetrics::_internal_soil_moisture() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.soil_moisture_;
}
inline void EnvironmentMetrics::_internal_set_soil_moisture(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.soil_moisture_ = value;
}

// optional float soil_temperature = 22;
inline bool EnvironmentMetrics::has_soil_temperature() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void EnvironmentMetrics::clear_soil_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.soil_temperature_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline float EnvironmentMetrics::soil_temperature() const {
  // @@protoc_insertion_point(field_get:meshtastic.EnvironmentMetrics.soil_temperature)
  return _internal_soil_temperature();
}
inline void EnvironmentMetrics::set_soil_temperature(float value) {
  _internal_set_soil_temperature(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:meshtastic.EnvironmentMetrics.soil_temperature)
}
inline float EnvironmentMetrics::_internal_soil_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.soil_temperature_;
}
inline void EnvironmentMetrics::_internal_set_soil_temperature(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.soil_temperature_ = value;
}

// -------------------------------------------------------------------

// PowerMetrics

// optional float ch1_voltage = 1;
inline bool PowerMetrics::has_ch1_voltage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PowerMetrics::clear_ch1_voltage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch1_voltage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float PowerMetrics::ch1_voltage() const {
  // @@protoc_insertion_point(field_get:meshtastic.PowerMetrics.ch1_voltage)
  return _internal_ch1_voltage();
}
inline void PowerMetrics::set_ch1_voltage(float value) {
  _internal_set_ch1_voltage(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:meshtastic.PowerMetrics.ch1_voltage)
}
inline float PowerMetrics::_internal_ch1_voltage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ch1_voltage_;
}
inline void PowerMetrics::_internal_set_ch1_voltage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch1_voltage_ = value;
}

// optional float ch1_current = 2;
inline bool PowerMetrics::has_ch1_current() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PowerMetrics::clear_ch1_current() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch1_current_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float PowerMetrics::ch1_current() const {
  // @@protoc_insertion_point(field_get:meshtastic.PowerMetrics.ch1_current)
  return _internal_ch1_current();
}
inline void PowerMetrics::set_ch1_current(float value) {
  _internal_set_ch1_current(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:meshtastic.PowerMetrics.ch1_current)
}
inline float PowerMetrics::_internal_ch1_current() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ch1_current_;
}
inline void PowerMetrics::_internal_set_ch1_current(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch1_current_ = value;
}

// optional float ch2_voltage = 3;
inline bool PowerMetrics::has_ch2_voltage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PowerMetrics::clear_ch2_voltage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch2_voltage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float PowerMetrics::ch2_voltage() const {
  // @@protoc_insertion_point(field_get:meshtastic.PowerMetrics.ch2_voltage)
  return _internal_ch2_voltage();
}
inline void PowerMetrics::set_ch2_voltage(float value) {
  _internal_set_ch2_voltage(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:meshtastic.PowerMetrics.ch2_voltage)
}
inline float PowerMetrics::_internal_ch2_voltage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ch2_voltage_;
}
inline void PowerMetrics::_internal_set_ch2_voltage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch2_voltage_ = value;
}

// optional float ch2_current = 4;
inline bool PowerMetrics::has_ch2_current() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PowerMetrics::clear_ch2_current() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch2_current_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float PowerMetrics::ch2_current() const {
  // @@protoc_insertion_point(field_get:meshtastic.PowerMetrics.ch2_current)
  return _internal_ch2_current();
}
inline void PowerMetrics::set_ch2_current(float value) {
  _internal_set_ch2_current(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:meshtastic.PowerMetrics.ch2_current)
}
inline float PowerMetrics::_internal_ch2_current() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ch2_current_;
}
inline void PowerMetrics::_internal_set_ch2_current(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch2_current_ = value;
}

// optional float ch3_voltage = 5;
inline bool PowerMetrics::has_ch3_voltage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void PowerMetrics::clear_ch3_voltage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch3_voltage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float PowerMetrics::ch3_voltage() const {
  // @@protoc_insertion_point(field_get:meshtastic.PowerMetrics.ch3_voltage)
  return _internal_ch3_voltage();
}
inline void PowerMetrics::set_ch3_voltage(float value) {
  _internal_set_ch3_voltage(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:meshtastic.PowerMetrics.ch3_voltage)
}
inline float PowerMetrics::_internal_ch3_voltage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ch3_voltage_;
}
inline void PowerMetrics::_internal_set_ch3_voltage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch3_voltage_ = value;
}

// optional float ch3_current = 6;
inline bool PowerMetrics::has_ch3_current() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void PowerMetrics::clear_ch3_current() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch3_current_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float PowerMetrics::ch3_current() const {
  // @@protoc_insertion_point(field_get:meshtastic.PowerMetrics.ch3_current)
  return _internal_ch3_current();
}
inline void PowerMetrics::set_ch3_current(float value) {
  _internal_set_ch3_current(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:meshtastic.PowerMetrics.ch3_current)
}
inline float PowerMetrics::_internal_ch3_current() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ch3_current_;
}
inline void PowerMetrics::_internal_set_ch3_current(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch3_current_ = value;
}

// optional float ch4_voltage = 7;
inline bool PowerMetrics::has_ch4_voltage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void PowerMetrics::clear_ch4_voltage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch4_voltage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float PowerMetrics::ch4_voltage() const {
  // @@protoc_insertion_point(field_get:meshtastic.PowerMetrics.ch4_voltage)
  return _internal_ch4_voltage();
}
inline void PowerMetrics::set_ch4_voltage(float value) {
  _internal_set_ch4_voltage(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:meshtastic.PowerMetrics.ch4_voltage)
}
inline float PowerMetrics::_internal_ch4_voltage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ch4_voltage_;
}
inline void PowerMetrics::_internal_set_ch4_voltage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch4_voltage_ = value;
}

// optional float ch4_current = 8;
inline bool PowerMetrics::has_ch4_current() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void PowerMetrics::clear_ch4_current() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch4_current_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float PowerMetrics::ch4_current() const {
  // @@protoc_insertion_point(field_get:meshtastic.PowerMetrics.ch4_current)
  return _internal_ch4_current();
}
inline void PowerMetrics::set_ch4_current(float value) {
  _internal_set_ch4_current(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:meshtastic.PowerMetrics.ch4_current)
}
inline float PowerMetrics::_internal_ch4_current() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ch4_current_;
}
inline void PowerMetrics::_internal_set_ch4_current(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch4_current_ = value;
}

// optional float ch5_voltage = 9;
inline bool PowerMetrics::has_ch5_voltage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void PowerMetrics::clear_ch5_voltage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch5_voltage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float PowerMetrics::ch5_voltage() const {
  // @@protoc_insertion_point(field_get:meshtastic.PowerMetrics.ch5_voltage)
  return _internal_ch5_voltage();
}
inline void PowerMetrics::set_ch5_voltage(float value) {
  _internal_set_ch5_voltage(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:meshtastic.PowerMetrics.ch5_voltage)
}
inline float PowerMetrics::_internal_ch5_voltage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ch5_voltage_;
}
inline void PowerMetrics::_internal_set_ch5_voltage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch5_voltage_ = value;
}

// optional float ch5_current = 10;
inline bool PowerMetrics::has_ch5_current() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void PowerMetrics::clear_ch5_current() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch5_current_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float PowerMetrics::ch5_current() const {
  // @@protoc_insertion_point(field_get:meshtastic.PowerMetrics.ch5_current)
  return _internal_ch5_current();
}
inline void PowerMetrics::set_ch5_current(float value) {
  _internal_set_ch5_current(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:meshtastic.PowerMetrics.ch5_current)
}
inline float PowerMetrics::_internal_ch5_current() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ch5_current_;
}
inline void PowerMetrics::_internal_set_ch5_current(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch5_current_ = value;
}

// optional float ch6_voltage = 11;
inline bool PowerMetrics::has_ch6_voltage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void PowerMetrics::clear_ch6_voltage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch6_voltage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float PowerMetrics::ch6_voltage() const {
  // @@protoc_insertion_point(field_get:meshtastic.PowerMetrics.ch6_voltage)
  return _internal_ch6_voltage();
}
inline void PowerMetrics::set_ch6_voltage(float value) {
  _internal_set_ch6_voltage(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:meshtastic.PowerMetrics.ch6_voltage)
}
inline float PowerMetrics::_internal_ch6_voltage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ch6_voltage_;
}
inline void PowerMetrics::_internal_set_ch6_voltage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch6_voltage_ = value;
}

// optional float ch6_current = 12;
inline bool PowerMetrics::has_ch6_current() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void PowerMetrics::clear_ch6_current() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch6_current_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float PowerMetrics::ch6_current() const {
  // @@protoc_insertion_point(field_get:meshtastic.PowerMetrics.ch6_current)
  return _internal_ch6_current();
}
inline void PowerMetrics::set_ch6_current(float value) {
  _internal_set_ch6_current(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:meshtastic.PowerMetrics.ch6_current)
}
inline float PowerMetrics::_internal_ch6_current() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ch6_current_;
}
inline void PowerMetrics::_internal_set_ch6_current(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch6_current_ = value;
}

// optional float ch7_voltage = 13;
inline bool PowerMetrics::has_ch7_voltage() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void PowerMetrics::clear_ch7_voltage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch7_voltage_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float PowerMetrics::ch7_voltage() const {
  // @@protoc_insertion_point(field_get:meshtastic.PowerMetrics.ch7_voltage)
  return _internal_ch7_voltage();
}
inline void PowerMetrics::set_ch7_voltage(float value) {
  _internal_set_ch7_voltage(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:meshtastic.PowerMetrics.ch7_voltage)
}
inline float PowerMetrics::_internal_ch7_voltage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ch7_voltage_;
}
inline void PowerMetrics::_internal_set_ch7_voltage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch7_voltage_ = value;
}

// optional float ch7_current = 14;
inline bool PowerMetrics::has_ch7_current() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void PowerMetrics::clear_ch7_current() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch7_current_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float PowerMetrics::ch7_current() const {
  // @@protoc_insertion_point(field_get:meshtastic.PowerMetrics.ch7_current)
  return _internal_ch7_current();
}
inline void PowerMetrics::set_ch7_current(float value) {
  _internal_set_ch7_current(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:meshtastic.PowerMetrics.ch7_current)
}
inline float PowerMetrics::_internal_ch7_current() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ch7_current_;
}
inline void PowerMetrics::_internal_set_ch7_current(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch7_current_ = value;
}

// optional float ch8_voltage = 15;
inline bool PowerMetrics::has_ch8_voltage() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void PowerMetrics::clear_ch8_voltage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch8_voltage_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float PowerMetrics::ch8_voltage() const {
  // @@protoc_insertion_point(field_get:meshtastic.PowerMetrics.ch8_voltage)
  return _internal_ch8_voltage();
}
inline void PowerMetrics::set_ch8_voltage(float value) {
  _internal_set_ch8_voltage(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:meshtastic.PowerMetrics.ch8_voltage)
}
inline float PowerMetrics::_internal_ch8_voltage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ch8_voltage_;
}
inline void PowerMetrics::_internal_set_ch8_voltage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch8_voltage_ = value;
}

// optional float ch8_current = 16;
inline bool PowerMetrics::has_ch8_current() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void PowerMetrics::clear_ch8_current() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch8_current_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float PowerMetrics::ch8_current() const {
  // @@protoc_insertion_point(field_get:meshtastic.PowerMetrics.ch8_current)
  return _internal_ch8_current();
}
inline void PowerMetrics::set_ch8_current(float value) {
  _internal_set_ch8_current(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:meshtastic.PowerMetrics.ch8_current)
}
inline float PowerMetrics::_internal_ch8_current() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ch8_current_;
}
inline void PowerMetrics::_internal_set_ch8_current(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ch8_current_ = value;
}

// -------------------------------------------------------------------

// AirQualityMetrics

// optional uint32 pm10_standard = 1;
inline bool AirQualityMetrics::has_pm10_standard() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_pm10_standard() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm10_standard_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t AirQualityMetrics::pm10_standard() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.pm10_standard)
  return _internal_pm10_standard();
}
inline void AirQualityMetrics::set_pm10_standard(::uint32_t value) {
  _internal_set_pm10_standard(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.pm10_standard)
}
inline ::uint32_t AirQualityMetrics::_internal_pm10_standard() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pm10_standard_;
}
inline void AirQualityMetrics::_internal_set_pm10_standard(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm10_standard_ = value;
}

// optional uint32 pm25_standard = 2;
inline bool AirQualityMetrics::has_pm25_standard() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_pm25_standard() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm25_standard_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t AirQualityMetrics::pm25_standard() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.pm25_standard)
  return _internal_pm25_standard();
}
inline void AirQualityMetrics::set_pm25_standard(::uint32_t value) {
  _internal_set_pm25_standard(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.pm25_standard)
}
inline ::uint32_t AirQualityMetrics::_internal_pm25_standard() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pm25_standard_;
}
inline void AirQualityMetrics::_internal_set_pm25_standard(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm25_standard_ = value;
}

// optional uint32 pm100_standard = 3;
inline bool AirQualityMetrics::has_pm100_standard() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_pm100_standard() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm100_standard_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t AirQualityMetrics::pm100_standard() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.pm100_standard)
  return _internal_pm100_standard();
}
inline void AirQualityMetrics::set_pm100_standard(::uint32_t value) {
  _internal_set_pm100_standard(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.pm100_standard)
}
inline ::uint32_t AirQualityMetrics::_internal_pm100_standard() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pm100_standard_;
}
inline void AirQualityMetrics::_internal_set_pm100_standard(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm100_standard_ = value;
}

// optional uint32 pm10_environmental = 4;
inline bool AirQualityMetrics::has_pm10_environmental() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_pm10_environmental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm10_environmental_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t AirQualityMetrics::pm10_environmental() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.pm10_environmental)
  return _internal_pm10_environmental();
}
inline void AirQualityMetrics::set_pm10_environmental(::uint32_t value) {
  _internal_set_pm10_environmental(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.pm10_environmental)
}
inline ::uint32_t AirQualityMetrics::_internal_pm10_environmental() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pm10_environmental_;
}
inline void AirQualityMetrics::_internal_set_pm10_environmental(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm10_environmental_ = value;
}

// optional uint32 pm25_environmental = 5;
inline bool AirQualityMetrics::has_pm25_environmental() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_pm25_environmental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm25_environmental_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t AirQualityMetrics::pm25_environmental() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.pm25_environmental)
  return _internal_pm25_environmental();
}
inline void AirQualityMetrics::set_pm25_environmental(::uint32_t value) {
  _internal_set_pm25_environmental(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.pm25_environmental)
}
inline ::uint32_t AirQualityMetrics::_internal_pm25_environmental() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pm25_environmental_;
}
inline void AirQualityMetrics::_internal_set_pm25_environmental(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm25_environmental_ = value;
}

// optional uint32 pm100_environmental = 6;
inline bool AirQualityMetrics::has_pm100_environmental() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_pm100_environmental() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm100_environmental_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t AirQualityMetrics::pm100_environmental() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.pm100_environmental)
  return _internal_pm100_environmental();
}
inline void AirQualityMetrics::set_pm100_environmental(::uint32_t value) {
  _internal_set_pm100_environmental(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.pm100_environmental)
}
inline ::uint32_t AirQualityMetrics::_internal_pm100_environmental() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pm100_environmental_;
}
inline void AirQualityMetrics::_internal_set_pm100_environmental(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm100_environmental_ = value;
}

// optional uint32 particles_03um = 7;
inline bool AirQualityMetrics::has_particles_03um() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_particles_03um() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.particles_03um_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t AirQualityMetrics::particles_03um() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.particles_03um)
  return _internal_particles_03um();
}
inline void AirQualityMetrics::set_particles_03um(::uint32_t value) {
  _internal_set_particles_03um(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.particles_03um)
}
inline ::uint32_t AirQualityMetrics::_internal_particles_03um() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.particles_03um_;
}
inline void AirQualityMetrics::_internal_set_particles_03um(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.particles_03um_ = value;
}

// optional uint32 particles_05um = 8;
inline bool AirQualityMetrics::has_particles_05um() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_particles_05um() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.particles_05um_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t AirQualityMetrics::particles_05um() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.particles_05um)
  return _internal_particles_05um();
}
inline void AirQualityMetrics::set_particles_05um(::uint32_t value) {
  _internal_set_particles_05um(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.particles_05um)
}
inline ::uint32_t AirQualityMetrics::_internal_particles_05um() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.particles_05um_;
}
inline void AirQualityMetrics::_internal_set_particles_05um(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.particles_05um_ = value;
}

// optional uint32 particles_10um = 9;
inline bool AirQualityMetrics::has_particles_10um() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_particles_10um() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.particles_10um_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t AirQualityMetrics::particles_10um() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.particles_10um)
  return _internal_particles_10um();
}
inline void AirQualityMetrics::set_particles_10um(::uint32_t value) {
  _internal_set_particles_10um(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.particles_10um)
}
inline ::uint32_t AirQualityMetrics::_internal_particles_10um() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.particles_10um_;
}
inline void AirQualityMetrics::_internal_set_particles_10um(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.particles_10um_ = value;
}

// optional uint32 particles_25um = 10;
inline bool AirQualityMetrics::has_particles_25um() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_particles_25um() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.particles_25um_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t AirQualityMetrics::particles_25um() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.particles_25um)
  return _internal_particles_25um();
}
inline void AirQualityMetrics::set_particles_25um(::uint32_t value) {
  _internal_set_particles_25um(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.particles_25um)
}
inline ::uint32_t AirQualityMetrics::_internal_particles_25um() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.particles_25um_;
}
inline void AirQualityMetrics::_internal_set_particles_25um(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.particles_25um_ = value;
}

// optional uint32 particles_50um = 11;
inline bool AirQualityMetrics::has_particles_50um() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_particles_50um() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.particles_50um_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t AirQualityMetrics::particles_50um() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.particles_50um)
  return _internal_particles_50um();
}
inline void AirQualityMetrics::set_particles_50um(::uint32_t value) {
  _internal_set_particles_50um(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.particles_50um)
}
inline ::uint32_t AirQualityMetrics::_internal_particles_50um() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.particles_50um_;
}
inline void AirQualityMetrics::_internal_set_particles_50um(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.particles_50um_ = value;
}

// optional uint32 particles_100um = 12;
inline bool AirQualityMetrics::has_particles_100um() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_particles_100um() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.particles_100um_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t AirQualityMetrics::particles_100um() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.particles_100um)
  return _internal_particles_100um();
}
inline void AirQualityMetrics::set_particles_100um(::uint32_t value) {
  _internal_set_particles_100um(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.particles_100um)
}
inline ::uint32_t AirQualityMetrics::_internal_particles_100um() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.particles_100um_;
}
inline void AirQualityMetrics::_internal_set_particles_100um(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.particles_100um_ = value;
}

// optional uint32 co2 = 13;
inline bool AirQualityMetrics::has_co2() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_co2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.co2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint32_t AirQualityMetrics::co2() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.co2)
  return _internal_co2();
}
inline void AirQualityMetrics::set_co2(::uint32_t value) {
  _internal_set_co2(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.co2)
}
inline ::uint32_t AirQualityMetrics::_internal_co2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.co2_;
}
inline void AirQualityMetrics::_internal_set_co2(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.co2_ = value;
}

// optional float co2_temperature = 14;
inline bool AirQualityMetrics::has_co2_temperature() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_co2_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.co2_temperature_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float AirQualityMetrics::co2_temperature() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.co2_temperature)
  return _internal_co2_temperature();
}
inline void AirQualityMetrics::set_co2_temperature(float value) {
  _internal_set_co2_temperature(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.co2_temperature)
}
inline float AirQualityMetrics::_internal_co2_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.co2_temperature_;
}
inline void AirQualityMetrics::_internal_set_co2_temperature(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.co2_temperature_ = value;
}

// optional float co2_humidity = 15;
inline bool AirQualityMetrics::has_co2_humidity() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_co2_humidity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.co2_humidity_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float AirQualityMetrics::co2_humidity() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.co2_humidity)
  return _internal_co2_humidity();
}
inline void AirQualityMetrics::set_co2_humidity(float value) {
  _internal_set_co2_humidity(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.co2_humidity)
}
inline float AirQualityMetrics::_internal_co2_humidity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.co2_humidity_;
}
inline void AirQualityMetrics::_internal_set_co2_humidity(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.co2_humidity_ = value;
}

// optional float form_formaldehyde = 16;
inline bool AirQualityMetrics::has_form_formaldehyde() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_form_formaldehyde() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.form_formaldehyde_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float AirQualityMetrics::form_formaldehyde() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.form_formaldehyde)
  return _internal_form_formaldehyde();
}
inline void AirQualityMetrics::set_form_formaldehyde(float value) {
  _internal_set_form_formaldehyde(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.form_formaldehyde)
}
inline float AirQualityMetrics::_internal_form_formaldehyde() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.form_formaldehyde_;
}
inline void AirQualityMetrics::_internal_set_form_formaldehyde(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.form_formaldehyde_ = value;
}

// optional float form_humidity = 17;
inline bool AirQualityMetrics::has_form_humidity() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_form_humidity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.form_humidity_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float AirQualityMetrics::form_humidity() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.form_humidity)
  return _internal_form_humidity();
}
inline void AirQualityMetrics::set_form_humidity(float value) {
  _internal_set_form_humidity(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.form_humidity)
}
inline float AirQualityMetrics::_internal_form_humidity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.form_humidity_;
}
inline void AirQualityMetrics::_internal_set_form_humidity(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.form_humidity_ = value;
}

// optional float form_temperature = 18;
inline bool AirQualityMetrics::has_form_temperature() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_form_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.form_temperature_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float AirQualityMetrics::form_temperature() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.form_temperature)
  return _internal_form_temperature();
}
inline void AirQualityMetrics::set_form_temperature(float value) {
  _internal_set_form_temperature(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.form_temperature)
}
inline float AirQualityMetrics::_internal_form_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.form_temperature_;
}
inline void AirQualityMetrics::_internal_set_form_temperature(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.form_temperature_ = value;
}

// optional uint32 pm40_standard = 19;
inline bool AirQualityMetrics::has_pm40_standard() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_pm40_standard() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm40_standard_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::uint32_t AirQualityMetrics::pm40_standard() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.pm40_standard)
  return _internal_pm40_standard();
}
inline void AirQualityMetrics::set_pm40_standard(::uint32_t value) {
  _internal_set_pm40_standard(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.pm40_standard)
}
inline ::uint32_t AirQualityMetrics::_internal_pm40_standard() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pm40_standard_;
}
inline void AirQualityMetrics::_internal_set_pm40_standard(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm40_standard_ = value;
}

// optional uint32 particles_40um = 20;
inline bool AirQualityMetrics::has_particles_40um() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_particles_40um() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.particles_40um_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::uint32_t AirQualityMetrics::particles_40um() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.particles_40um)
  return _internal_particles_40um();
}
inline void AirQualityMetrics::set_particles_40um(::uint32_t value) {
  _internal_set_particles_40um(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.particles_40um)
}
inline ::uint32_t AirQualityMetrics::_internal_particles_40um() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.particles_40um_;
}
inline void AirQualityMetrics::_internal_set_particles_40um(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.particles_40um_ = value;
}

// optional float pm_temperature = 21;
inline bool AirQualityMetrics::has_pm_temperature() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_pm_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm_temperature_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline float AirQualityMetrics::pm_temperature() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.pm_temperature)
  return _internal_pm_temperature();
}
inline void AirQualityMetrics::set_pm_temperature(float value) {
  _internal_set_pm_temperature(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.pm_temperature)
}
inline float AirQualityMetrics::_internal_pm_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pm_temperature_;
}
inline void AirQualityMetrics::_internal_set_pm_temperature(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm_temperature_ = value;
}

// optional float pm_humidity = 22;
inline bool AirQualityMetrics::has_pm_humidity() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_pm_humidity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm_humidity_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline float AirQualityMetrics::pm_humidity() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.pm_humidity)
  return _internal_pm_humidity();
}
inline void AirQualityMetrics::set_pm_humidity(float value) {
  _internal_set_pm_humidity(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.pm_humidity)
}
inline float AirQualityMetrics::_internal_pm_humidity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pm_humidity_;
}
inline void AirQualityMetrics::_internal_set_pm_humidity(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm_humidity_ = value;
}

// optional float pm_voc_idx = 23;
inline bool AirQualityMetrics::has_pm_voc_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_pm_voc_idx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm_voc_idx_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline float AirQualityMetrics::pm_voc_idx() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.pm_voc_idx)
  return _internal_pm_voc_idx();
}
inline void AirQualityMetrics::set_pm_voc_idx(float value) {
  _internal_set_pm_voc_idx(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.pm_voc_idx)
}
inline float AirQualityMetrics::_internal_pm_voc_idx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pm_voc_idx_;
}
inline void AirQualityMetrics::_internal_set_pm_voc_idx(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm_voc_idx_ = value;
}

// optional float pm_nox_idx = 24;
inline bool AirQualityMetrics::has_pm_nox_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_pm_nox_idx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm_nox_idx_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline float AirQualityMetrics::pm_nox_idx() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.pm_nox_idx)
  return _internal_pm_nox_idx();
}
inline void AirQualityMetrics::set_pm_nox_idx(float value) {
  _internal_set_pm_nox_idx(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.pm_nox_idx)
}
inline float AirQualityMetrics::_internal_pm_nox_idx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pm_nox_idx_;
}
inline void AirQualityMetrics::_internal_set_pm_nox_idx(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pm_nox_idx_ = value;
}

// optional float particles_tps = 25;
inline bool AirQualityMetrics::has_particles_tps() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void AirQualityMetrics::clear_particles_tps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.particles_tps_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline float AirQualityMetrics::particles_tps() const {
  // @@protoc_insertion_point(field_get:meshtastic.AirQualityMetrics.particles_tps)
  return _internal_particles_tps();
}
inline void AirQualityMetrics::set_particles_tps(float value) {
  _internal_set_particles_tps(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:meshtastic.AirQualityMetrics.particles_tps)
}
inline float AirQualityMetrics::_internal_particles_tps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.particles_tps_;
}
inline void AirQualityMetrics::_internal_set_particles_tps(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.particles_tps_ = value;
}

// -------------------------------------------------------------------

// LocalStats

// uint32 uptime_seconds = 1;
inline void LocalStats::clear_uptime_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uptime_seconds_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t LocalStats::uptime_seconds() const {
  // @@protoc_insertion_point(field_get:meshtastic.LocalStats.uptime_seconds)
  return _internal_uptime_seconds();
}
inline void LocalStats::set_uptime_seconds(::uint32_t value) {
  _internal_set_uptime_seconds(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:meshtastic.LocalStats.uptime_seconds)
}
inline ::uint32_t LocalStats::_internal_uptime_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uptime_seconds_;
}
inline void LocalStats::_internal_set_uptime_seconds(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uptime_seconds_ = value;
}

// float channel_utilization = 2;
inline void LocalStats::clear_channel_utilization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_utilization_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float LocalStats::channel_utilization() const {
  // @@protoc_insertion_point(field_get:meshtastic.LocalStats.channel_utilization)
  return _internal_channel_utilization();
}
inline void LocalStats::set_channel_utilization(float value) {
  _internal_set_channel_utilization(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:meshtastic.LocalStats.channel_utilization)
}
inline float LocalStats::_internal_channel_utilization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_utilization_;
}
inline void LocalStats::_internal_set_channel_utilization(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_utilization_ = value;
}

// float air_util_tx = 3;
inline void LocalStats::clear_air_util_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.air_util_tx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float LocalStats::air_util_tx() const {
  // @@protoc_insertion_point(field_get:meshtastic.LocalStats.air_util_tx)
  return _internal_air_util_tx();
}
inline void LocalStats::set_air_util_tx(float value) {
  _internal_set_air_util_tx(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:meshtastic.LocalStats.air_util_tx)
}
inline float LocalStats::_internal_air_util_tx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.air_util_tx_;
}
inline void LocalStats::_internal_set_air_util_tx(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.air_util_tx_ = value;
}

// uint32 num_packets_tx = 4;
inline void LocalStats::clear_num_packets_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_packets_tx_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t LocalStats::num_packets_tx() const {
  // @@protoc_insertion_point(field_get:meshtastic.LocalStats.num_packets_tx)
  return _internal_num_packets_tx();
}
inline void LocalStats::set_num_packets_tx(::uint32_t value) {
  _internal_set_num_packets_tx(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:meshtastic.LocalStats.num_packets_tx)
}
inline ::uint32_t LocalStats::_internal_num_packets_tx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_packets_tx_;
}
inline void LocalStats::_internal_set_num_packets_tx(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_packets_tx_ = value;
}

// uint32 num_packets_rx = 5;
inline void LocalStats::clear_num_packets_rx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_packets_rx_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t LocalStats::num_packets_rx() const {
  // @@protoc_insertion_point(field_get:meshtastic.LocalStats.num_packets_rx)
  return _internal_num_packets_rx();
}
inline void LocalStats::set_num_packets_rx(::uint32_t value) {
  _internal_set_num_packets_rx(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:meshtastic.LocalStats.num_packets_rx)
}
inline ::uint32_t LocalStats::_internal_num_packets_rx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_packets_rx_;
}
inline void LocalStats::_internal_set_num_packets_rx(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_packets_rx_ = value;
}

// uint32 num_packets_rx_bad = 6;
inline void LocalStats::clear_num_packets_rx_bad() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_packets_rx_bad_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t LocalStats::num_packets_rx_bad() const {
  // @@protoc_insertion_point(field_get:meshtastic.LocalStats.num_packets_rx_bad)
  return _internal_num_packets_rx_bad();
}
inline void LocalStats::set_num_packets_rx_bad(::uint32_t value) {
  _internal_set_num_packets_rx_bad(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:meshtastic.LocalStats.num_packets_rx_bad)
}
inline ::uint32_t LocalStats::_internal_num_packets_rx_bad() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_packets_rx_bad_;
}
inline void LocalStats::_internal_set_num_packets_rx_bad(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_packets_rx_bad_ = value;
}

// uint32 num_online_nodes = 7;
inline void LocalStats::clear_num_online_nodes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_online_nodes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t LocalStats::num_online_nodes() const {
  // @@protoc_insertion_point(field_get:meshtastic.LocalStats.num_online_nodes)
  return _internal_num_online_nodes();
}
inline void LocalStats::set_num_online_nodes(::uint32_t value) {
  _internal_set_num_online_nodes(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:meshtastic.LocalStats.num_online_nodes)
}
inline ::uint32_t LocalStats::_internal_num_online_nodes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_online_nodes_;
}
inline void LocalStats::_internal_set_num_online_nodes(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_online_nodes_ = value;
}

// uint32 num_total_nodes = 8;
inline void LocalStats::clear_num_total_nodes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_total_nodes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t LocalStats::num_total_nodes() const {
  // @@protoc_insertion_point(field_get:meshtastic.LocalStats.num_total_nodes)
  return _internal_num_total_nodes();
}
inline void LocalStats::set_num_total_nodes(::uint32_t value) {
  _internal_set_num_total_nodes(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:meshtastic.LocalStats.num_total_nodes)
}
inline ::uint32_t LocalStats::_internal_num_total_nodes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_total_nodes_;
}
inline void LocalStats::_internal_set_num_total_nodes(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_total_nodes_ = value;
}

// uint32 num_rx_dupe = 9;
inline void LocalStats::clear_num_rx_dupe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_rx_dupe_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t LocalStats::num_rx_dupe() const {
  // @@protoc_insertion_point(field_get:meshtastic.LocalStats.num_rx_dupe)
  return _internal_num_rx_dupe();
}
inline void LocalStats::set_num_rx_dupe(::uint32_t value) {
  _internal_set_num_rx_dupe(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:meshtastic.LocalStats.num_rx_dupe)
}
inline ::uint32_t LocalStats::_internal_num_rx_dupe() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_rx_dupe_;
}
inline void LocalStats::_internal_set_num_rx_dupe(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_rx_dupe_ = value;
}

// uint32 num_tx_relay = 10;
inline void LocalStats::clear_num_tx_relay() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_tx_relay_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t LocalStats::num_tx_relay() const {
  // @@protoc_insertion_point(field_get:meshtastic.LocalStats.num_tx_relay)
  return _internal_num_tx_relay();
}
inline void LocalStats::set_num_tx_relay(::uint32_t value) {
  _internal_set_num_tx_relay(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:meshtastic.LocalStats.num_tx_relay)
}
inline ::uint32_t LocalStats::_internal_num_tx_relay() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_tx_relay_;
}
inline void LocalStats::_internal_set_num_tx_relay(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_tx_relay_ = value;
}

// uint32 num_tx_relay_canceled = 11;
inline void LocalStats::clear_num_tx_relay_canceled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_tx_relay_canceled_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t LocalStats::num_tx_relay_canceled() const {
  // @@protoc_insertion_point(field_get:meshtastic.LocalStats.num_tx_relay_canceled)
  return _internal_num_tx_relay_canceled();
}
inline void LocalStats::set_num_tx_relay_canceled(::uint32_t value) {
  _internal_set_num_tx_relay_canceled(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:meshtastic.LocalStats.num_tx_relay_canceled)
}
inline ::uint32_t LocalStats::_internal_num_tx_relay_canceled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_tx_relay_canceled_;
}
inline void LocalStats::_internal_set_num_tx_relay_canceled(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_tx_relay_canceled_ = value;
}

// uint32 heap_total_bytes = 12;
inline void LocalStats::clear_heap_total_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heap_total_bytes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t LocalStats::heap_total_bytes() const {
  // @@protoc_insertion_point(field_get:meshtastic.LocalStats.heap_total_bytes)
  return _internal_heap_total_bytes();
}
inline void LocalStats::set_heap_total_bytes(::uint32_t value) {
  _internal_set_heap_total_bytes(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:meshtastic.LocalStats.heap_total_bytes)
}
inline ::uint32_t LocalStats::_internal_heap_total_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heap_total_bytes_;
}
inline void LocalStats::_internal_set_heap_total_bytes(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heap_total_bytes_ = value;
}

// uint32 heap_free_bytes = 13;
inline void LocalStats::clear_heap_free_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heap_free_bytes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint32_t LocalStats::heap_free_bytes() const {
  // @@protoc_insertion_point(field_get:meshtastic.LocalStats.heap_free_bytes)
  return _internal_heap_free_bytes();
}
inline void LocalStats::set_heap_free_bytes(::uint32_t value) {
  _internal_set_heap_free_bytes(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:meshtastic.LocalStats.heap_free_bytes)
}
inline ::uint32_t LocalStats::_internal_heap_free_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heap_free_bytes_;
}
inline void LocalStats::_internal_set_heap_free_bytes(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heap_free_bytes_ = value;
}

// -------------------------------------------------------------------

// HealthMetrics

// optional uint32 heart_bpm = 1;
inline bool HealthMetrics::has_heart_bpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HealthMetrics::clear_heart_bpm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heart_bpm_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t HealthMetrics::heart_bpm() const {
  // @@protoc_insertion_point(field_get:meshtastic.HealthMetrics.heart_bpm)
  return _internal_heart_bpm();
}
inline void HealthMetrics::set_heart_bpm(::uint32_t value) {
  _internal_set_heart_bpm(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:meshtastic.HealthMetrics.heart_bpm)
}
inline ::uint32_t HealthMetrics::_internal_heart_bpm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heart_bpm_;
}
inline void HealthMetrics::_internal_set_heart_bpm(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heart_bpm_ = value;
}

// optional uint32 spO2 = 2;
inline bool HealthMetrics::has_spo2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void HealthMetrics::clear_spo2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spo2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t HealthMetrics::spo2() const {
  // @@protoc_insertion_point(field_get:meshtastic.HealthMetrics.spO2)
  return _internal_spo2();
}
inline void HealthMetrics::set_spo2(::uint32_t value) {
  _internal_set_spo2(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:meshtastic.HealthMetrics.spO2)
}
inline ::uint32_t HealthMetrics::_internal_spo2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.spo2_;
}
inline void HealthMetrics::_internal_set_spo2(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spo2_ = value;
}

// optional float temperature = 3;
inline bool HealthMetrics::has_temperature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void HealthMetrics::clear_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float HealthMetrics::temperature() const {
  // @@protoc_insertion_point(field_get:meshtastic.HealthMetrics.temperature)
  return _internal_temperature();
}
inline void HealthMetrics::set_temperature(float value) {
  _internal_set_temperature(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:meshtastic.HealthMetrics.temperature)
}
inline float HealthMetrics::_internal_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_;
}
inline void HealthMetrics::_internal_set_temperature(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = value;
}

// -------------------------------------------------------------------

// HostMetrics

// uint32 uptime_seconds = 1;
inline void HostMetrics::clear_uptime_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uptime_seconds_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t HostMetrics::uptime_seconds() const {
  // @@protoc_insertion_point(field_get:meshtastic.HostMetrics.uptime_seconds)
  return _internal_uptime_seconds();
}
inline void HostMetrics::set_uptime_seconds(::uint32_t value) {
  _internal_set_uptime_seconds(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:meshtastic.HostMetrics.uptime_seconds)
}
inline ::uint32_t HostMetrics::_internal_uptime_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uptime_seconds_;
}
inline void HostMetrics::_internal_set_uptime_seconds(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uptime_seconds_ = value;
}

// uint64 freemem_bytes = 2;
inline void HostMetrics::clear_freemem_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.freemem_bytes_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t HostMetrics::freemem_bytes() const {
  // @@protoc_insertion_point(field_get:meshtastic.HostMetrics.freemem_bytes)
  return _internal_freemem_bytes();
}
inline void HostMetrics::set_freemem_bytes(::uint64_t value) {
  _internal_set_freemem_bytes(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:meshtastic.HostMetrics.freemem_bytes)
}
inline ::uint64_t HostMetrics::_internal_freemem_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.freemem_bytes_;
}
inline void HostMetrics::_internal_set_freemem_bytes(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.freemem_bytes_ = value;
}

// uint64 diskfree1_bytes = 3;
inline void HostMetrics::clear_diskfree1_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diskfree1_bytes_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t HostMetrics::diskfree1_bytes() const {
  // @@protoc_insertion_point(field_get:meshtastic.HostMetrics.diskfree1_bytes)
  return _internal_diskfree1_bytes();
}
inline void HostMetrics::set_diskfree1_bytes(::uint64_t value) {
  _internal_set_diskfree1_bytes(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:meshtastic.HostMetrics.diskfree1_bytes)
}
inline ::uint64_t HostMetrics::_internal_diskfree1_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.diskfree1_bytes_;
}
inline void HostMetrics::_internal_set_diskfree1_bytes(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diskfree1_bytes_ = value;
}

// optional uint64 diskfree2_bytes = 4;
inline bool HostMetrics::has_diskfree2_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void HostMetrics::clear_diskfree2_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diskfree2_bytes_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t HostMetrics::diskfree2_bytes() const {
  // @@protoc_insertion_point(field_get:meshtastic.HostMetrics.diskfree2_bytes)
  return _internal_diskfree2_bytes();
}
inline void HostMetrics::set_diskfree2_bytes(::uint64_t value) {
  _internal_set_diskfree2_bytes(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:meshtastic.HostMetrics.diskfree2_bytes)
}
inline ::uint64_t HostMetrics::_internal_diskfree2_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.diskfree2_bytes_;
}
inline void HostMetrics::_internal_set_diskfree2_bytes(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diskfree2_bytes_ = value;
}

// optional uint64 diskfree3_bytes = 5;
inline bool HostMetrics::has_diskfree3_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void HostMetrics::clear_diskfree3_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diskfree3_bytes_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t HostMetrics::diskfree3_bytes() const {
  // @@protoc_insertion_point(field_get:meshtastic.HostMetrics.diskfree3_bytes)
  return _internal_diskfree3_bytes();
}
inline void HostMetrics::set_diskfree3_bytes(::uint64_t value) {
  _internal_set_diskfree3_bytes(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:meshtastic.HostMetrics.diskfree3_bytes)
}
inline ::uint64_t HostMetrics::_internal_diskfree3_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.diskfree3_bytes_;
}
inline void HostMetrics::_internal_set_diskfree3_bytes(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diskfree3_bytes_ = value;
}

// uint32 load1 = 6;
inline void HostMetrics::clear_load1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.load1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t HostMetrics::load1() const {
  // @@protoc_insertion_point(field_get:meshtastic.HostMetrics.load1)
  return _internal_load1();
}
inline void HostMetrics::set_load1(::uint32_t value) {
  _internal_set_load1(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:meshtastic.HostMetrics.load1)
}
inline ::uint32_t HostMetrics::_internal_load1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.load1_;
}
inline void HostMetrics::_internal_set_load1(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.load1_ = value;
}

// uint32 load5 = 7;
inline void HostMetrics::clear_load5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.load5_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t HostMetrics::load5() const {
  // @@protoc_insertion_point(field_get:meshtastic.HostMetrics.load5)
  return _internal_load5();
}
inline void HostMetrics::set_load5(::uint32_t value) {
  _internal_set_load5(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:meshtastic.HostMetrics.load5)
}
inline ::uint32_t HostMetrics::_internal_load5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.load5_;
}
inline void HostMetrics::_internal_set_load5(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.load5_ = value;
}

// uint32 load15 = 8;
inline void HostMetrics::clear_load15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.load15_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t HostMetrics::load15() const {
  // @@protoc_insertion_point(field_get:meshtastic.HostMetrics.load15)
  return _internal_load15();
}
inline void HostMetrics::set_load15(::uint32_t value) {
  _internal_set_load15(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:meshtastic.HostMetrics.load15)
}
inline ::uint32_t HostMetrics::_internal_load15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.load15_;
}
inline void HostMetrics::_internal_set_load15(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.load15_ = value;
}

// optional string user_string = 9;
inline bool HostMetrics::has_user_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HostMetrics::clear_user_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& HostMetrics::user_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.HostMetrics.user_string)
  return _internal_user_string();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void HostMetrics::set_user_string(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:meshtastic.HostMetrics.user_string)
}
inline ::std::string* PROTOBUF_NONNULL HostMetrics::mutable_user_string()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_user_string();
  // @@protoc_insertion_point(field_mutable:meshtastic.HostMetrics.user_string)
  return _s;
}
inline const ::std::string& HostMetrics::_internal_user_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_string_.Get();
}
inline void HostMetrics::_internal_set_user_string(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_string_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL HostMetrics::_internal_mutable_user_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_string_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE HostMetrics::release_user_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.HostMetrics.user_string)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.user_string_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.user_string_.Set("", GetArena());
  }
  return released;
}
inline void HostMetrics::set_allocated_user_string(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_string_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_string_.IsDefault()) {
    _impl_.user_string_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.HostMetrics.user_string)
}

// -------------------------------------------------------------------

// Telemetry

// fixed32 time = 1;
inline void Telemetry::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t Telemetry::time() const {
  // @@protoc_insertion_point(field_get:meshtastic.Telemetry.time)
  return _internal_time();
}
inline void Telemetry::set_time(::uint32_t value) {
  _internal_set_time(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:meshtastic.Telemetry.time)
}
inline ::uint32_t Telemetry::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_;
}
inline void Telemetry::_internal_set_time(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = value;
}

// .meshtastic.DeviceMetrics device_metrics = 2;
inline bool Telemetry::has_device_metrics() const {
  return variant_case() == kDeviceMetrics;
}
inline bool Telemetry::_internal_has_device_metrics() const {
  return variant_case() == kDeviceMetrics;
}
inline void Telemetry::set_has_device_metrics() {
  _impl_._oneof_case_[0] = kDeviceMetrics;
}
inline void Telemetry::clear_device_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (variant_case() == kDeviceMetrics) {
    if (GetArena() == nullptr) {
      delete _impl_.variant_.device_metrics_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.variant_.device_metrics_);
    }
    clear_has_variant();
  }
}
inline ::meshtastic::DeviceMetrics* PROTOBUF_NULLABLE Telemetry::release_device_metrics() {
  // @@protoc_insertion_point(field_release:meshtastic.Telemetry.device_metrics)
  if (variant_case() == kDeviceMetrics) {
    clear_has_variant();
    auto* temp = reinterpret_cast<::meshtastic::DeviceMetrics*>(_impl_.variant_.device_metrics_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.variant_.device_metrics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::meshtastic::DeviceMetrics& Telemetry::_internal_device_metrics() const {
  return variant_case() == kDeviceMetrics ? *reinterpret_cast<::meshtastic::DeviceMetrics*>(_impl_.variant_.device_metrics_) : reinterpret_cast<::meshtastic::DeviceMetrics&>(::meshtastic::_DeviceMetrics_default_instance_);
}
inline const ::meshtastic::DeviceMetrics& Telemetry::device_metrics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.Telemetry.device_metrics)
  return _internal_device_metrics();
}
inline ::meshtastic::DeviceMetrics* PROTOBUF_NULLABLE Telemetry::unsafe_arena_release_device_metrics() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meshtastic.Telemetry.device_metrics)
  if (variant_case() == kDeviceMetrics) {
    clear_has_variant();
    auto* temp = reinterpret_cast<::meshtastic::DeviceMetrics*>(_impl_.variant_.device_metrics_);
    _impl_.variant_.device_metrics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Telemetry::unsafe_arena_set_allocated_device_metrics(
    ::meshtastic::DeviceMetrics* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_variant();
  if (value) {
    set_has_device_metrics();
    _impl_.variant_.device_metrics_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.Telemetry.device_metrics)
}
inline ::meshtastic::DeviceMetrics* PROTOBUF_NONNULL Telemetry::_internal_mutable_device_metrics() {
  if (variant_case() != kDeviceMetrics) {
    clear_variant();
    set_has_device_metrics();
    _impl_.variant_.device_metrics_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::meshtastic::DeviceMetrics>(GetArena()));
  }
  return reinterpret_cast<::meshtastic::DeviceMetrics*>(_impl_.variant_.device_metrics_);
}
inline ::meshtastic::DeviceMetrics* PROTOBUF_NONNULL Telemetry::mutable_device_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::meshtastic::DeviceMetrics* _msg = _internal_mutable_device_metrics();
  // @@protoc_insertion_point(field_mutable:meshtastic.Telemetry.device_metrics)
  return _msg;
}

// .meshtastic.EnvironmentMetrics environment_metrics = 3;
inline bool Telemetry::has_environment_metrics() const {
  return variant_case() == kEnvironmentMetrics;
}
inline bool Telemetry::_internal_has_environment_metrics() const {
  return variant_case() == kEnvironmentMetrics;
}
inline void Telemetry::set_has_environment_metrics() {
  _impl_._oneof_case_[0] = kEnvironmentMetrics;
}
inline void Telemetry::clear_environment_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (variant_case() == kEnvironmentMetrics) {
    if (GetArena() == nullptr) {
      delete _impl_.variant_.environment_metrics_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.variant_.environment_metrics_);
    }
    clear_has_variant();
  }
}
inline ::meshtastic::EnvironmentMetrics* PROTOBUF_NULLABLE Telemetry::release_environment_metrics() {
  // @@protoc_insertion_point(field_release:meshtastic.Telemetry.environment_metrics)
  if (variant_case() == kEnvironmentMetrics) {
    clear_has_variant();
    auto* temp = reinterpret_cast<::meshtastic::EnvironmentMetrics*>(_impl_.variant_.environment_metrics_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.variant_.environment_metrics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::meshtastic::EnvironmentMetrics& Telemetry::_internal_environment_metrics() const {
  return variant_case() == kEnvironmentMetrics ? *reinterpret_cast<::meshtastic::EnvironmentMetrics*>(_impl_.variant_.environment_metrics_) : reinterpret_cast<::meshtastic::EnvironmentMetrics&>(::meshtastic::_EnvironmentMetrics_default_instance_);
}
inline const ::meshtastic::EnvironmentMetrics& Telemetry::environment_metrics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.Telemetry.environment_metrics)
  return _internal_environment_metrics();
}
inline ::meshtastic::EnvironmentMetrics* PROTOBUF_NULLABLE Telemetry::unsafe_arena_release_environment_metrics() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meshtastic.Telemetry.environment_metrics)
  if (variant_case() == kEnvironmentMetrics) {
    clear_has_variant();
    auto* temp = reinterpret_cast<::meshtastic::EnvironmentMetrics*>(_impl_.variant_.environment_metrics_);
    _impl_.variant_.environment_metrics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Telemetry::unsafe_arena_set_allocated_environment_metrics(
    ::meshtastic::EnvironmentMetrics* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_variant();
  if (value) {
    set_has_environment_metrics();
    _impl_.variant_.environment_metrics_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.Telemetry.environment_metrics)
}
inline ::meshtastic::EnvironmentMetrics* PROTOBUF_NONNULL Telemetry::_internal_mutable_environment_metrics() {
  if (variant_case() != kEnvironmentMetrics) {
    clear_variant();
    set_has_environment_metrics();
    _impl_.variant_.environment_metrics_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::meshtastic::EnvironmentMetrics>(GetArena()));
  }
  return reinterpret_cast<::meshtastic::EnvironmentMetrics*>(_impl_.variant_.environment_metrics_);
}
inline ::meshtastic::EnvironmentMetrics* PROTOBUF_NONNULL Telemetry::mutable_environment_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::meshtastic::EnvironmentMetrics* _msg = _internal_mutable_environment_metrics();
  // @@protoc_insertion_point(field_mutable:meshtastic.Telemetry.environment_metrics)
  return _msg;
}

// .meshtastic.AirQualityMetrics air_quality_metrics = 4;
inline bool Telemetry::has_air_quality_metrics() const {
  return variant_case() == kAirQualityMetrics;
}
inline bool Telemetry::_internal_has_air_quality_metrics() const {
  return variant_case() == kAirQualityMetrics;
}
inline void Telemetry::set_has_air_quality_metrics() {
  _impl_._oneof_case_[0] = kAirQualityMetrics;
}
inline void Telemetry::clear_air_quality_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (variant_case() == kAirQualityMetrics) {
    if (GetArena() == nullptr) {
      delete _impl_.variant_.air_quality_metrics_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.variant_.air_quality_metrics_);
    }
    clear_has_variant();
  }
}
inline ::meshtastic::AirQualityMetrics* PROTOBUF_NULLABLE Telemetry::release_air_quality_metrics() {
  // @@protoc_insertion_point(field_release:meshtastic.Telemetry.air_quality_metrics)
  if (variant_case() == kAirQualityMetrics) {
    clear_has_variant();
    auto* temp = reinterpret_cast<::meshtastic::AirQualityMetrics*>(_impl_.variant_.air_quality_metrics_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.variant_.air_quality_metrics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::meshtastic::AirQualityMetrics& Telemetry::_internal_air_quality_metrics() const {
  return variant_case() == kAirQualityMetrics ? *reinterpret_cast<::meshtastic::AirQualityMetrics*>(_impl_.variant_.air_quality_metrics_) : reinterpret_cast<::meshtastic::AirQualityMetrics&>(::meshtastic::_AirQualityMetrics_default_instance_);
}
inline const ::meshtastic::AirQualityMetrics& Telemetry::air_quality_metrics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.Telemetry.air_quality_metrics)
  return _internal_air_quality_metrics();
}
inline ::meshtastic::AirQualityMetrics* PROTOBUF_NULLABLE Telemetry::unsafe_arena_release_air_quality_metrics() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meshtastic.Telemetry.air_quality_metrics)
  if (variant_case() == kAirQualityMetrics) {
    clear_has_variant();
    auto* temp = reinterpret_cast<::meshtastic::AirQualityMetrics*>(_impl_.variant_.air_quality_metrics_);
    _impl_.variant_.air_quality_metrics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Telemetry::unsafe_arena_set_allocated_air_quality_metrics(
    ::meshtastic::AirQualityMetrics* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_variant();
  if (value) {
    set_has_air_quality_metrics();
    _impl_.variant_.air_quality_metrics_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.Telemetry.air_quality_metrics)
}
inline ::meshtastic::AirQualityMetrics* PROTOBUF_NONNULL Telemetry::_internal_mutable_air_quality_metrics() {
  if (variant_case() != kAirQualityMetrics) {
    clear_variant();
    set_has_air_quality_metrics();
    _impl_.variant_.air_quality_metrics_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::meshtastic::AirQualityMetrics>(GetArena()));
  }
  return reinterpret_cast<::meshtastic::AirQualityMetrics*>(_impl_.variant_.air_quality_metrics_);
}
inline ::meshtastic::AirQualityMetrics* PROTOBUF_NONNULL Telemetry::mutable_air_quality_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::meshtastic::AirQualityMetrics* _msg = _internal_mutable_air_quality_metrics();
  // @@protoc_insertion_point(field_mutable:meshtastic.Telemetry.air_quality_metrics)
  return _msg;
}

// .meshtastic.PowerMetrics power_metrics = 5;
inline bool Telemetry::has_power_metrics() const {
  return variant_case() == kPowerMetrics;
}
inline bool Telemetry::_internal_has_power_metrics() const {
  return variant_case() == kPowerMetrics;
}
inline void Telemetry::set_has_power_metrics() {
  _impl_._oneof_case_[0] = kPowerMetrics;
}
inline void Telemetry::clear_power_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (variant_case() == kPowerMetrics) {
    if (GetArena() == nullptr) {
      delete _impl_.variant_.power_metrics_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.variant_.power_metrics_);
    }
    clear_has_variant();
  }
}
inline ::meshtastic::PowerMetrics* PROTOBUF_NULLABLE Telemetry::release_power_metrics() {
  // @@protoc_insertion_point(field_release:meshtastic.Telemetry.power_metrics)
  if (variant_case() == kPowerMetrics) {
    clear_has_variant();
    auto* temp = reinterpret_cast<::meshtastic::PowerMetrics*>(_impl_.variant_.power_metrics_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.variant_.power_metrics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::meshtastic::PowerMetrics& Telemetry::_internal_power_metrics() const {
  return variant_case() == kPowerMetrics ? *reinterpret_cast<::meshtastic::PowerMetrics*>(_impl_.variant_.power_metrics_) : reinterpret_cast<::meshtastic::PowerMetrics&>(::meshtastic::_PowerMetrics_default_instance_);
}
inline const ::meshtastic::PowerMetrics& Telemetry::power_metrics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.Telemetry.power_metrics)
  return _internal_power_metrics();
}
inline ::meshtastic::PowerMetrics* PROTOBUF_NULLABLE Telemetry::unsafe_arena_release_power_metrics() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meshtastic.Telemetry.power_metrics)
  if (variant_case() == kPowerMetrics) {
    clear_has_variant();
    auto* temp = reinterpret_cast<::meshtastic::PowerMetrics*>(_impl_.variant_.power_metrics_);
    _impl_.variant_.power_metrics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Telemetry::unsafe_arena_set_allocated_power_metrics(
    ::meshtastic::PowerMetrics* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_variant();
  if (value) {
    set_has_power_metrics();
    _impl_.variant_.power_metrics_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.Telemetry.power_metrics)
}
inline ::meshtastic::PowerMetrics* PROTOBUF_NONNULL Telemetry::_internal_mutable_power_metrics() {
  if (variant_case() != kPowerMetrics) {
    clear_variant();
    set_has_power_metrics();
    _impl_.variant_.power_metrics_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::meshtastic::PowerMetrics>(GetArena()));
  }
  return reinterpret_cast<::meshtastic::PowerMetrics*>(_impl_.variant_.power_metrics_);
}
inline ::meshtastic::PowerMetrics* PROTOBUF_NONNULL Telemetry::mutable_power_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::meshtastic::PowerMetrics* _msg = _internal_mutable_power_metrics();
  // @@protoc_insertion_point(field_mutable:meshtastic.Telemetry.power_metrics)
  return _msg;
}

// .meshtastic.LocalStats local_stats = 6;
inline bool Telemetry::has_local_stats() const {
  return variant_case() == kLocalStats;
}
inline bool Telemetry::_internal_has_local_stats() const {
  return variant_case() == kLocalStats;
}
inline void Telemetry::set_has_local_stats() {
  _impl_._oneof_case_[0] = kLocalStats;
}
inline void Telemetry::clear_local_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (variant_case() == kLocalStats) {
    if (GetArena() == nullptr) {
      delete _impl_.variant_.local_stats_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.variant_.local_stats_);
    }
    clear_has_variant();
  }
}
inline ::meshtastic::LocalStats* PROTOBUF_NULLABLE Telemetry::release_local_stats() {
  // @@protoc_insertion_point(field_release:meshtastic.Telemetry.local_stats)
  if (variant_case() == kLocalStats) {
    clear_has_variant();
    auto* temp = reinterpret_cast<::meshtastic::LocalStats*>(_impl_.variant_.local_stats_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.variant_.local_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::meshtastic::LocalStats& Telemetry::_internal_local_stats() const {
  return variant_case() == kLocalStats ? *reinterpret_cast<::meshtastic::LocalStats*>(_impl_.variant_.local_stats_) : reinterpret_cast<::meshtastic::LocalStats&>(::meshtastic::_LocalStats_default_instance_);
}
inline const ::meshtastic::LocalStats& Telemetry::local_stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.Telemetry.local_stats)
  return _internal_local_stats();
}
inline ::meshtastic::LocalStats* PROTOBUF_NULLABLE Telemetry::unsafe_arena_release_local_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meshtastic.Telemetry.local_stats)
  if (variant_case() == kLocalStats) {
    clear_has_variant();
    auto* temp = reinterpret_cast<::meshtastic::LocalStats*>(_impl_.variant_.local_stats_);
    _impl_.variant_.local_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Telemetry::unsafe_arena_set_allocated_local_stats(
    ::meshtastic::LocalStats* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_variant();
  if (value) {
    set_has_local_stats();
    _impl_.variant_.local_stats_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.Telemetry.local_stats)
}
inline ::meshtastic::LocalStats* PROTOBUF_NONNULL Telemetry::_internal_mutable_local_stats() {
  if (variant_case() != kLocalStats) {
    clear_variant();
    set_has_local_stats();
    _impl_.variant_.local_stats_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::meshtastic::LocalStats>(GetArena()));
  }
  return reinterpret_cast<::meshtastic::LocalStats*>(_impl_.variant_.local_stats_);
}
inline ::meshtastic::LocalStats* PROTOBUF_NONNULL Telemetry::mutable_local_stats()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::meshtastic::LocalStats* _msg = _internal_mutable_local_stats();
  // @@protoc_insertion_point(field_mutable:meshtastic.Telemetry.local_stats)
  return _msg;
}

// .meshtastic.HealthMetrics health_metrics = 7;
inline bool Telemetry::has_health_metrics() const {
  return variant_case() == kHealthMetrics;
}
inline bool Telemetry::_internal_has_health_metrics() const {
  return variant_case() == kHealthMetrics;
}
inline void Telemetry::set_has_health_metrics() {
  _impl_._oneof_case_[0] = kHealthMetrics;
}
inline void Telemetry::clear_health_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (variant_case() == kHealthMetrics) {
    if (GetArena() == nullptr) {
      delete _impl_.variant_.health_metrics_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.variant_.health_metrics_);
    }
    clear_has_variant();
  }
}
inline ::meshtastic::HealthMetrics* PROTOBUF_NULLABLE Telemetry::release_health_metrics() {
  // @@protoc_insertion_point(field_release:meshtastic.Telemetry.health_metrics)
  if (variant_case() == kHealthMetrics) {
    clear_has_variant();
    auto* temp = reinterpret_cast<::meshtastic::HealthMetrics*>(_impl_.variant_.health_metrics_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.variant_.health_metrics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::meshtastic::HealthMetrics& Telemetry::_internal_health_metrics() const {
  return variant_case() == kHealthMetrics ? *reinterpret_cast<::meshtastic::HealthMetrics*>(_impl_.variant_.health_metrics_) : reinterpret_cast<::meshtastic::HealthMetrics&>(::meshtastic::_HealthMetrics_default_instance_);
}
inline const ::meshtastic::HealthMetrics& Telemetry::health_metrics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.Telemetry.health_metrics)
  return _internal_health_metrics();
}
inline ::meshtastic::HealthMetrics* PROTOBUF_NULLABLE Telemetry::unsafe_arena_release_health_metrics() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meshtastic.Telemetry.health_metrics)
  if (variant_case() == kHealthMetrics) {
    clear_has_variant();
    auto* temp = reinterpret_cast<::meshtastic::HealthMetrics*>(_impl_.variant_.health_metrics_);
    _impl_.variant_.health_metrics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Telemetry::unsafe_arena_set_allocated_health_metrics(
    ::meshtastic::HealthMetrics* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_variant();
  if (value) {
    set_has_health_metrics();
    _impl_.variant_.health_metrics_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.Telemetry.health_metrics)
}
inline ::meshtastic::HealthMetrics* PROTOBUF_NONNULL Telemetry::_internal_mutable_health_metrics() {
  if (variant_case() != kHealthMetrics) {
    clear_variant();
    set_has_health_metrics();
    _impl_.variant_.health_metrics_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::meshtastic::HealthMetrics>(GetArena()));
  }
  return reinterpret_cast<::meshtastic::HealthMetrics*>(_impl_.variant_.health_metrics_);
}
inline ::meshtastic::HealthMetrics* PROTOBUF_NONNULL Telemetry::mutable_health_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::meshtastic::HealthMetrics* _msg = _internal_mutable_health_metrics();
  // @@protoc_insertion_point(field_mutable:meshtastic.Telemetry.health_metrics)
  return _msg;
}

// .meshtastic.HostMetrics host_metrics = 8;
inline bool Telemetry::has_host_metrics() const {
  return variant_case() == kHostMetrics;
}
inline bool Telemetry::_internal_has_host_metrics() const {
  return variant_case() == kHostMetrics;
}
inline void Telemetry::set_has_host_metrics() {
  _impl_._oneof_case_[0] = kHostMetrics;
}
inline void Telemetry::clear_host_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (variant_case() == kHostMetrics) {
    if (GetArena() == nullptr) {
      delete _impl_.variant_.host_metrics_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.variant_.host_metrics_);
    }
    clear_has_variant();
  }
}
inline ::meshtastic::HostMetrics* PROTOBUF_NULLABLE Telemetry::release_host_metrics() {
  // @@protoc_insertion_point(field_release:meshtastic.Telemetry.host_metrics)
  if (variant_case() == kHostMetrics) {
    clear_has_variant();
    auto* temp = reinterpret_cast<::meshtastic::HostMetrics*>(_impl_.variant_.host_metrics_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.variant_.host_metrics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::meshtastic::HostMetrics& Telemetry::_internal_host_metrics() const {
  return variant_case() == kHostMetrics ? *reinterpret_cast<::meshtastic::HostMetrics*>(_impl_.variant_.host_metrics_) : reinterpret_cast<::meshtastic::HostMetrics&>(::meshtastic::_HostMetrics_default_instance_);
}
inline const ::meshtastic::HostMetrics& Telemetry::host_metrics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.Telemetry.host_metrics)
  return _internal_host_metrics();
}
inline ::meshtastic::HostMetrics* PROTOBUF_NULLABLE Telemetry::unsafe_arena_release_host_metrics() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meshtastic.Telemetry.host_metrics)
  if (variant_case() == kHostMetrics) {
    clear_has_variant();
    auto* temp = reinterpret_cast<::meshtastic::HostMetrics*>(_impl_.variant_.host_metrics_);
    _impl_.variant_.host_metrics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Telemetry::unsafe_arena_set_allocated_host_metrics(
    ::meshtastic::HostMetrics* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_variant();
  if (value) {
    set_has_host_metrics();
    _impl_.variant_.host_metrics_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.Telemetry.host_metrics)
}
inline ::meshtastic::HostMetrics* PROTOBUF_NONNULL Telemetry::_internal_mutable_host_metrics() {
  if (variant_case() != kHostMetrics) {
    clear_variant();
    set_has_host_metrics();
    _impl_.variant_.host_metrics_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::meshtastic::HostMetrics>(GetArena()));
  }
  return reinterpret_cast<::meshtastic::HostMetrics*>(_impl_.variant_.host_metrics_);
}
inline ::meshtastic::HostMetrics* PROTOBUF_NONNULL Telemetry::mutable_host_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::meshtastic::HostMetrics* _msg = _internal_mutable_host_metrics();
  // @@protoc_insertion_point(field_mutable:meshtastic.Telemetry.host_metrics)
  return _msg;
}

inline bool Telemetry::has_variant() const {
  return variant_case() != VARIANT_NOT_SET;
}
inline void Telemetry::clear_has_variant() {
  _impl_._oneof_case_[0] = VARIANT_NOT_SET;
}
inline Telemetry::VariantCase Telemetry::variant_case() const {
  return Telemetry::VariantCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Nau7802Config

// int32 zeroOffset = 1;
inline void Nau7802Config::clear_zerooffset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zerooffset_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Nau7802Config::zerooffset() const {
  // @@protoc_insertion_point(field_get:meshtastic.Nau7802Config.zeroOffset)
  return _internal_zerooffset();
}
inline void Nau7802Config::set_zerooffset(::int32_t value) {
  _internal_set_zerooffset(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:meshtastic.Nau7802Config.zeroOffset)
}
inline ::int32_t Nau7802Config::_internal_zerooffset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.zerooffset_;
}
inline void Nau7802Config::_internal_set_zerooffset(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zerooffset_ = value;
}

// float calibrationFactor = 2;
inline void Nau7802Config::clear_calibrationfactor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.calibrationfactor_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Nau7802Config::calibrationfactor() const {
  // @@protoc_insertion_point(field_get:meshtastic.Nau7802Config.calibrationFactor)
  return _internal_calibrationfactor();
}
inline void Nau7802Config::set_calibrationfactor(float value) {
  _internal_set_calibrationfactor(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:meshtastic.Nau7802Config.calibrationFactor)
}
inline float Nau7802Config::_internal_calibrationfactor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.calibrationfactor_;
}
inline void Nau7802Config::_internal_set_calibrationfactor(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.calibrationfactor_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace meshtastic


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::meshtastic::TelemetrySensorType> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::meshtastic::TelemetrySensorType>() {
  return ::meshtastic::TelemetrySensorType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // meshtastic_2ftelemetry_2eproto_2epb_2eh
