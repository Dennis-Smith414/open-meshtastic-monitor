// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: nanopb.proto
// Protobuf C++ Version: 6.32.0

#ifndef nanopb_2eproto_2epb_2eh
#define nanopb_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6032000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_nanopb_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_nanopb_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_nanopb_2eproto;
}  // extern "C"
enum DescriptorSize : int;
extern const uint32_t DescriptorSize_internal_data_[];
enum FieldType : int;
extern const uint32_t FieldType_internal_data_[];
enum IntSize : int;
extern const uint32_t IntSize_internal_data_[];
enum TypenameMangling : int;
extern const uint32_t TypenameMangling_internal_data_[];
class NanoPBOptions;
struct NanoPBOptionsDefaultTypeInternal;
extern NanoPBOptionsDefaultTypeInternal _NanoPBOptions_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull NanoPBOptions_class_data_;
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::DescriptorSize_internal_data_>
    internal::EnumTraitsImpl::value<::DescriptorSize>;
template <>
internal::EnumTraitsT<::FieldType_internal_data_>
    internal::EnumTraitsImpl::value<::FieldType>;
template <>
internal::EnumTraitsT<::IntSize_internal_data_>
    internal::EnumTraitsImpl::value<::IntSize>;
template <>
internal::EnumTraitsT<::TypenameMangling_internal_data_>
    internal::EnumTraitsImpl::value<::TypenameMangling>;
}  // namespace protobuf
}  // namespace google

enum FieldType : int {
  FT_DEFAULT = 0,
  FT_CALLBACK = 1,
  FT_POINTER = 4,
  FT_STATIC = 2,
  FT_IGNORE = 3,
  FT_INLINE = 5,
};

extern const uint32_t FieldType_internal_data_[];
inline constexpr FieldType FieldType_MIN =
    static_cast<FieldType>(0);
inline constexpr FieldType FieldType_MAX =
    static_cast<FieldType>(5);
inline bool FieldType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
inline constexpr int FieldType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL FieldType_descriptor();
template <typename T>
const ::std::string& FieldType_Name(T value) {
  static_assert(::std::is_same<T, FieldType>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to FieldType_Name().");
  return FieldType_Name(static_cast<FieldType>(value));
}
template <>
inline const ::std::string& FieldType_Name(FieldType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FieldType_descriptor, 0, 5>(
      static_cast<int>(value));
}
inline bool FieldType_Parse(
    ::absl::string_view name, FieldType* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<FieldType>(FieldType_descriptor(), name,
                                           value);
}
enum IntSize : int {
  IS_DEFAULT = 0,
  IS_8 = 8,
  IS_16 = 16,
  IS_32 = 32,
  IS_64 = 64,
};

extern const uint32_t IntSize_internal_data_[];
inline constexpr IntSize IntSize_MIN =
    static_cast<IntSize>(0);
inline constexpr IntSize IntSize_MAX =
    static_cast<IntSize>(64);
inline bool IntSize_IsValid(int value) {
  return ::google::protobuf::internal::ValidateEnum(value, IntSize_internal_data_);
}
inline constexpr int IntSize_ARRAYSIZE = 64 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL IntSize_descriptor();
template <typename T>
const ::std::string& IntSize_Name(T value) {
  static_assert(::std::is_same<T, IntSize>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to IntSize_Name().");
  return ::google::protobuf::internal::NameOfEnum(IntSize_descriptor(), value);
}
inline bool IntSize_Parse(
    ::absl::string_view name, IntSize* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<IntSize>(IntSize_descriptor(), name,
                                           value);
}
enum TypenameMangling : int {
  M_NONE = 0,
  M_STRIP_PACKAGE = 1,
  M_FLATTEN = 2,
  M_PACKAGE_INITIALS = 3,
};

extern const uint32_t TypenameMangling_internal_data_[];
inline constexpr TypenameMangling TypenameMangling_MIN =
    static_cast<TypenameMangling>(0);
inline constexpr TypenameMangling TypenameMangling_MAX =
    static_cast<TypenameMangling>(3);
inline bool TypenameMangling_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int TypenameMangling_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TypenameMangling_descriptor();
template <typename T>
const ::std::string& TypenameMangling_Name(T value) {
  static_assert(::std::is_same<T, TypenameMangling>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to TypenameMangling_Name().");
  return TypenameMangling_Name(static_cast<TypenameMangling>(value));
}
template <>
inline const ::std::string& TypenameMangling_Name(TypenameMangling value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TypenameMangling_descriptor, 0, 3>(
      static_cast<int>(value));
}
inline bool TypenameMangling_Parse(
    ::absl::string_view name, TypenameMangling* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<TypenameMangling>(TypenameMangling_descriptor(), name,
                                           value);
}
enum DescriptorSize : int {
  DS_AUTO = 0,
  DS_1 = 1,
  DS_2 = 2,
  DS_4 = 4,
  DS_8 = 8,
};

extern const uint32_t DescriptorSize_internal_data_[];
inline constexpr DescriptorSize DescriptorSize_MIN =
    static_cast<DescriptorSize>(0);
inline constexpr DescriptorSize DescriptorSize_MAX =
    static_cast<DescriptorSize>(8);
inline bool DescriptorSize_IsValid(int value) {
  return 0 <= value && value <= 8 && ((279u >> value) & 1) != 0;
}
inline constexpr int DescriptorSize_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL DescriptorSize_descriptor();
template <typename T>
const ::std::string& DescriptorSize_Name(T value) {
  static_assert(::std::is_same<T, DescriptorSize>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to DescriptorSize_Name().");
  return DescriptorSize_Name(static_cast<DescriptorSize>(value));
}
template <>
inline const ::std::string& DescriptorSize_Name(DescriptorSize value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DescriptorSize_descriptor, 0, 8>(
      static_cast<int>(value));
}
inline bool DescriptorSize_Parse(
    ::absl::string_view name, DescriptorSize* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<DescriptorSize>(DescriptorSize_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class NanoPBOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NanoPBOptions) */ {
 public:
  inline NanoPBOptions() : NanoPBOptions(nullptr) {}
  ~NanoPBOptions() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NanoPBOptions* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NanoPBOptions));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NanoPBOptions(::google::protobuf::internal::ConstantInitialized);

  inline NanoPBOptions(const NanoPBOptions& from) : NanoPBOptions(nullptr, from) {}
  inline NanoPBOptions(NanoPBOptions&& from) noexcept
      : NanoPBOptions(nullptr, ::std::move(from)) {}
  inline NanoPBOptions& operator=(const NanoPBOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline NanoPBOptions& operator=(NanoPBOptions&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NanoPBOptions& default_instance() {
    return *reinterpret_cast<const NanoPBOptions*>(
        &_NanoPBOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NanoPBOptions& a, NanoPBOptions& b) { a.Swap(&b); }
  inline void Swap(NanoPBOptions* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NanoPBOptions* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NanoPBOptions* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NanoPBOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NanoPBOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NanoPBOptions& from) { NanoPBOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NanoPBOptions* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "NanoPBOptions"; }

 protected:
  explicit NanoPBOptions(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  NanoPBOptions(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const NanoPBOptions& from);
  NanoPBOptions(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, NanoPBOptions&& from) noexcept
      : NanoPBOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIncludeFieldNumber = 24,
    kExcludeFieldNumber = 26,
    kCallbackDatatypeFieldNumber = 18,
    kCallbackFunctionFieldNumber = 19,
    kPackageFieldNumber = 25,
    kMaxSizeFieldNumber = 1,
    kMaxCountFieldNumber = 2,
    kTypeFieldNumber = 3,
    kIntSizeFieldNumber = 7,
    kPackedStructFieldNumber = 5,
    kSkipMessageFieldNumber = 6,
    kNoUnionsFieldNumber = 8,
    kPackedEnumFieldNumber = 10,
    kMsgidFieldNumber = 9,
    kAnonymousOneofFieldNumber = 11,
    kProto3FieldNumber = 12,
    kEnumToStringFieldNumber = 13,
    kFixedLengthFieldNumber = 15,
    kMaxLengthFieldNumber = 14,
    kMangleNamesFieldNumber = 17,
    kDescriptorsizeFieldNumber = 20,
    kFixedCountFieldNumber = 16,
    kProto3SingularMsgsFieldNumber = 21,
    kSubmsgCallbackFieldNumber = 22,
    kDefaultHasFieldNumber = 23,
    kFallbackTypeFieldNumber = 29,
    kLongNamesFieldNumber = 4,
    kSortByTagFieldNumber = 28,
    kTypeOverrideFieldNumber = 27,
  };
  // repeated string include = 24;
  int include_size() const;
  private:
  int _internal_include_size() const;

  public:
  void clear_include() ;
  const ::std::string& include(int index) const;
  ::std::string* PROTOBUF_NONNULL mutable_include(int index);
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_include(int index, Arg_&& value, Args_... args);
  ::std::string* PROTOBUF_NONNULL add_include();
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void add_include(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<::std::string>& include() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL mutable_include();

  private:
  const ::google::protobuf::RepeatedPtrField<::std::string>& _internal_include() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL _internal_mutable_include();

  public:
  // repeated string exclude = 26;
  int exclude_size() const;
  private:
  int _internal_exclude_size() const;

  public:
  void clear_exclude() ;
  const ::std::string& exclude(int index) const;
  ::std::string* PROTOBUF_NONNULL mutable_exclude(int index);
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_exclude(int index, Arg_&& value, Args_... args);
  ::std::string* PROTOBUF_NONNULL add_exclude();
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void add_exclude(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<::std::string>& exclude() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL mutable_exclude();

  private:
  const ::google::protobuf::RepeatedPtrField<::std::string>& _internal_exclude() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL _internal_mutable_exclude();

  public:
  // optional string callback_datatype = 18 [default = "pb_callback_t"];
  bool has_callback_datatype() const;
  void clear_callback_datatype() ;
  const ::std::string& callback_datatype() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_callback_datatype(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_callback_datatype();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_callback_datatype();
  void set_allocated_callback_datatype(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_callback_datatype() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_callback_datatype(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_callback_datatype();

  public:
  // optional string callback_function = 19 [default = "pb_default_field_callback"];
  bool has_callback_function() const;
  void clear_callback_function() ;
  const ::std::string& callback_function() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_callback_function(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_callback_function();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_callback_function();
  void set_allocated_callback_function(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_callback_function() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_callback_function(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_callback_function();

  public:
  // optional string package = 25;
  bool has_package() const;
  void clear_package() ;
  const ::std::string& package() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_package(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_package();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_package();
  void set_allocated_package(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_package() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_package(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_package();

  public:
  // optional int32 max_size = 1;
  bool has_max_size() const;
  void clear_max_size() ;
  ::int32_t max_size() const;
  void set_max_size(::int32_t value);

  private:
  ::int32_t _internal_max_size() const;
  void _internal_set_max_size(::int32_t value);

  public:
  // optional int32 max_count = 2;
  bool has_max_count() const;
  void clear_max_count() ;
  ::int32_t max_count() const;
  void set_max_count(::int32_t value);

  private:
  ::int32_t _internal_max_count() const;
  void _internal_set_max_count(::int32_t value);

  public:
  // optional .FieldType type = 3 [default = FT_DEFAULT];
  bool has_type() const;
  void clear_type() ;
  ::FieldType type() const;
  void set_type(::FieldType value);

  private:
  ::FieldType _internal_type() const;
  void _internal_set_type(::FieldType value);

  public:
  // optional .IntSize int_size = 7 [default = IS_DEFAULT];
  bool has_int_size() const;
  void clear_int_size() ;
  ::IntSize int_size() const;
  void set_int_size(::IntSize value);

  private:
  ::IntSize _internal_int_size() const;
  void _internal_set_int_size(::IntSize value);

  public:
  // optional bool packed_struct = 5 [default = false];
  bool has_packed_struct() const;
  void clear_packed_struct() ;
  bool packed_struct() const;
  void set_packed_struct(bool value);

  private:
  bool _internal_packed_struct() const;
  void _internal_set_packed_struct(bool value);

  public:
  // optional bool skip_message = 6 [default = false];
  bool has_skip_message() const;
  void clear_skip_message() ;
  bool skip_message() const;
  void set_skip_message(bool value);

  private:
  bool _internal_skip_message() const;
  void _internal_set_skip_message(bool value);

  public:
  // optional bool no_unions = 8 [default = false];
  bool has_no_unions() const;
  void clear_no_unions() ;
  bool no_unions() const;
  void set_no_unions(bool value);

  private:
  bool _internal_no_unions() const;
  void _internal_set_no_unions(bool value);

  public:
  // optional bool packed_enum = 10 [default = false];
  bool has_packed_enum() const;
  void clear_packed_enum() ;
  bool packed_enum() const;
  void set_packed_enum(bool value);

  private:
  bool _internal_packed_enum() const;
  void _internal_set_packed_enum(bool value);

  public:
  // optional uint32 msgid = 9;
  bool has_msgid() const;
  void clear_msgid() ;
  ::uint32_t msgid() const;
  void set_msgid(::uint32_t value);

  private:
  ::uint32_t _internal_msgid() const;
  void _internal_set_msgid(::uint32_t value);

  public:
  // optional bool anonymous_oneof = 11 [default = false];
  bool has_anonymous_oneof() const;
  void clear_anonymous_oneof() ;
  bool anonymous_oneof() const;
  void set_anonymous_oneof(bool value);

  private:
  bool _internal_anonymous_oneof() const;
  void _internal_set_anonymous_oneof(bool value);

  public:
  // optional bool proto3 = 12 [default = false];
  bool has_proto3() const;
  void clear_proto3() ;
  bool proto3() const;
  void set_proto3(bool value);

  private:
  bool _internal_proto3() const;
  void _internal_set_proto3(bool value);

  public:
  // optional bool enum_to_string = 13 [default = false];
  bool has_enum_to_string() const;
  void clear_enum_to_string() ;
  bool enum_to_string() const;
  void set_enum_to_string(bool value);

  private:
  bool _internal_enum_to_string() const;
  void _internal_set_enum_to_string(bool value);

  public:
  // optional bool fixed_length = 15 [default = false];
  bool has_fixed_length() const;
  void clear_fixed_length() ;
  bool fixed_length() const;
  void set_fixed_length(bool value);

  private:
  bool _internal_fixed_length() const;
  void _internal_set_fixed_length(bool value);

  public:
  // optional int32 max_length = 14;
  bool has_max_length() const;
  void clear_max_length() ;
  ::int32_t max_length() const;
  void set_max_length(::int32_t value);

  private:
  ::int32_t _internal_max_length() const;
  void _internal_set_max_length(::int32_t value);

  public:
  // optional .TypenameMangling mangle_names = 17 [default = M_NONE];
  bool has_mangle_names() const;
  void clear_mangle_names() ;
  ::TypenameMangling mangle_names() const;
  void set_mangle_names(::TypenameMangling value);

  private:
  ::TypenameMangling _internal_mangle_names() const;
  void _internal_set_mangle_names(::TypenameMangling value);

  public:
  // optional .DescriptorSize descriptorsize = 20 [default = DS_AUTO];
  bool has_descriptorsize() const;
  void clear_descriptorsize() ;
  ::DescriptorSize descriptorsize() const;
  void set_descriptorsize(::DescriptorSize value);

  private:
  ::DescriptorSize _internal_descriptorsize() const;
  void _internal_set_descriptorsize(::DescriptorSize value);

  public:
  // optional bool fixed_count = 16 [default = false];
  bool has_fixed_count() const;
  void clear_fixed_count() ;
  bool fixed_count() const;
  void set_fixed_count(bool value);

  private:
  bool _internal_fixed_count() const;
  void _internal_set_fixed_count(bool value);

  public:
  // optional bool proto3_singular_msgs = 21 [default = false];
  bool has_proto3_singular_msgs() const;
  void clear_proto3_singular_msgs() ;
  bool proto3_singular_msgs() const;
  void set_proto3_singular_msgs(bool value);

  private:
  bool _internal_proto3_singular_msgs() const;
  void _internal_set_proto3_singular_msgs(bool value);

  public:
  // optional bool submsg_callback = 22 [default = false];
  bool has_submsg_callback() const;
  void clear_submsg_callback() ;
  bool submsg_callback() const;
  void set_submsg_callback(bool value);

  private:
  bool _internal_submsg_callback() const;
  void _internal_set_submsg_callback(bool value);

  public:
  // optional bool default_has = 23 [default = false];
  bool has_default_has() const;
  void clear_default_has() ;
  bool default_has() const;
  void set_default_has(bool value);

  private:
  bool _internal_default_has() const;
  void _internal_set_default_has(bool value);

  public:
  // optional .FieldType fallback_type = 29 [default = FT_CALLBACK];
  bool has_fallback_type() const;
  void clear_fallback_type() ;
  ::FieldType fallback_type() const;
  void set_fallback_type(::FieldType value);

  private:
  ::FieldType _internal_fallback_type() const;
  void _internal_set_fallback_type(::FieldType value);

  public:
  // optional bool long_names = 4 [default = true];
  bool has_long_names() const;
  void clear_long_names() ;
  bool long_names() const;
  void set_long_names(bool value);

  private:
  bool _internal_long_names() const;
  void _internal_set_long_names(bool value);

  public:
  // optional bool sort_by_tag = 28 [default = true];
  bool has_sort_by_tag() const;
  void clear_sort_by_tag() ;
  bool sort_by_tag() const;
  void set_sort_by_tag(bool value);

  private:
  bool _internal_sort_by_tag() const;
  void _internal_set_sort_by_tag(bool value);

  public:
  // optional .google.protobuf.FieldDescriptorProto.Type type_override = 27;
  bool has_type_override() const;
  void clear_type_override() ;
  ::google::protobuf::FieldDescriptorProto_Type type_override() const;
  void set_type_override(::google::protobuf::FieldDescriptorProto_Type value);

  private:
  ::google::protobuf::FieldDescriptorProto_Type _internal_type_override() const;
  void _internal_set_type_override(::google::protobuf::FieldDescriptorProto_Type value);

  public:
  // @@protoc_insertion_point(class_scope:NanoPBOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 29,
                                   6, 101,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const NanoPBOptions& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<::std::string> include_;
    ::google::protobuf::RepeatedPtrField<::std::string> exclude_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_callback_datatype_;
    ::google::protobuf::internal::ArenaStringPtr callback_datatype_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_callback_function_;
    ::google::protobuf::internal::ArenaStringPtr callback_function_;
    ::google::protobuf::internal::ArenaStringPtr package_;
    ::int32_t max_size_;
    ::int32_t max_count_;
    int type_;
    int int_size_;
    bool packed_struct_;
    bool skip_message_;
    bool no_unions_;
    bool packed_enum_;
    ::uint32_t msgid_;
    bool anonymous_oneof_;
    bool proto3_;
    bool enum_to_string_;
    bool fixed_length_;
    ::int32_t max_length_;
    int mangle_names_;
    int descriptorsize_;
    bool fixed_count_;
    bool proto3_singular_msgs_;
    bool submsg_callback_;
    bool default_has_;
    int fallback_type_;
    bool long_names_;
    bool sort_by_tag_;
    int type_override_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nanopb_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull NanoPBOptions_class_data_;

// ===================================================================



inline constexpr int kNanopbFileoptFieldNumber = 1010;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::FileOptions, ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false>
    nanopb_fileopt;
inline constexpr int kNanopbMsgoptFieldNumber = 1010;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::MessageOptions, ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false>
    nanopb_msgopt;
inline constexpr int kNanopbEnumoptFieldNumber = 1010;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::EnumOptions, ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false>
    nanopb_enumopt;
inline constexpr int kNanopbFieldNumber = 1010;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::FieldOptions, ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false>
    nanopb;

// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NanoPBOptions

// optional int32 max_size = 1;
inline bool NanoPBOptions::has_max_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008U) != 0;
  return value;
}
inline void NanoPBOptions::clear_max_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008U;
}
inline ::int32_t NanoPBOptions::max_size() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.max_size)
  return _internal_max_size();
}
inline void NanoPBOptions::set_max_size(::int32_t value) {
  _internal_set_max_size(value);
  _impl_._has_bits_[0] |= 0x00000008U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.max_size)
}
inline ::int32_t NanoPBOptions::_internal_max_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_size_;
}
inline void NanoPBOptions::_internal_set_max_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_size_ = value;
}

// optional int32 max_length = 14;
inline bool NanoPBOptions::has_max_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000U) != 0;
  return value;
}
inline void NanoPBOptions::clear_max_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000U;
}
inline ::int32_t NanoPBOptions::max_length() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.max_length)
  return _internal_max_length();
}
inline void NanoPBOptions::set_max_length(::int32_t value) {
  _internal_set_max_length(value);
  _impl_._has_bits_[0] |= 0x00010000U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.max_length)
}
inline ::int32_t NanoPBOptions::_internal_max_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_length_;
}
inline void NanoPBOptions::_internal_set_max_length(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_length_ = value;
}

// optional int32 max_count = 2;
inline bool NanoPBOptions::has_max_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010U) != 0;
  return value;
}
inline void NanoPBOptions::clear_max_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010U;
}
inline ::int32_t NanoPBOptions::max_count() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.max_count)
  return _internal_max_count();
}
inline void NanoPBOptions::set_max_count(::int32_t value) {
  _internal_set_max_count(value);
  _impl_._has_bits_[0] |= 0x00000010U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.max_count)
}
inline ::int32_t NanoPBOptions::_internal_max_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_count_;
}
inline void NanoPBOptions::_internal_set_max_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_count_ = value;
}

// optional .IntSize int_size = 7 [default = IS_DEFAULT];
inline bool NanoPBOptions::has_int_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040U) != 0;
  return value;
}
inline void NanoPBOptions::clear_int_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040U;
}
inline ::IntSize NanoPBOptions::int_size() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.int_size)
  return _internal_int_size();
}
inline void NanoPBOptions::set_int_size(::IntSize value) {
  _internal_set_int_size(value);
  _impl_._has_bits_[0] |= 0x00000040U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.int_size)
}
inline ::IntSize NanoPBOptions::_internal_int_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::IntSize>(_impl_.int_size_);
}
inline void NanoPBOptions::_internal_set_int_size(::IntSize value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::IntSize_internal_data_));
                                          _impl_.int_size_ = value;
}

// optional .FieldType type = 3 [default = FT_DEFAULT];
inline bool NanoPBOptions::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020U) != 0;
  return value;
}
inline void NanoPBOptions::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020U;
}
inline ::FieldType NanoPBOptions::type() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.type)
  return _internal_type();
}
inline void NanoPBOptions::set_type(::FieldType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000020U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.type)
}
inline ::FieldType NanoPBOptions::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::FieldType>(_impl_.type_);
}
inline void NanoPBOptions::_internal_set_type(::FieldType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::FieldType_internal_data_));
                                          _impl_.type_ = value;
}

// optional bool long_names = 4 [default = true];
inline bool NanoPBOptions::has_long_names() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000U) != 0;
  return value;
}
inline void NanoPBOptions::clear_long_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.long_names_ = true;
  _impl_._has_bits_[0] &= ~0x01000000U;
}
inline bool NanoPBOptions::long_names() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.long_names)
  return _internal_long_names();
}
inline void NanoPBOptions::set_long_names(bool value) {
  _internal_set_long_names(value);
  _impl_._has_bits_[0] |= 0x01000000U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.long_names)
}
inline bool NanoPBOptions::_internal_long_names() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.long_names_;
}
inline void NanoPBOptions::_internal_set_long_names(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.long_names_ = value;
}

// optional bool packed_struct = 5 [default = false];
inline bool NanoPBOptions::has_packed_struct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080U) != 0;
  return value;
}
inline void NanoPBOptions::clear_packed_struct() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packed_struct_ = false;
  _impl_._has_bits_[0] &= ~0x00000080U;
}
inline bool NanoPBOptions::packed_struct() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.packed_struct)
  return _internal_packed_struct();
}
inline void NanoPBOptions::set_packed_struct(bool value) {
  _internal_set_packed_struct(value);
  _impl_._has_bits_[0] |= 0x00000080U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.packed_struct)
}
inline bool NanoPBOptions::_internal_packed_struct() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packed_struct_;
}
inline void NanoPBOptions::_internal_set_packed_struct(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packed_struct_ = value;
}

// optional bool packed_enum = 10 [default = false];
inline bool NanoPBOptions::has_packed_enum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400U) != 0;
  return value;
}
inline void NanoPBOptions::clear_packed_enum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packed_enum_ = false;
  _impl_._has_bits_[0] &= ~0x00000400U;
}
inline bool NanoPBOptions::packed_enum() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.packed_enum)
  return _internal_packed_enum();
}
inline void NanoPBOptions::set_packed_enum(bool value) {
  _internal_set_packed_enum(value);
  _impl_._has_bits_[0] |= 0x00000400U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.packed_enum)
}
inline bool NanoPBOptions::_internal_packed_enum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packed_enum_;
}
inline void NanoPBOptions::_internal_set_packed_enum(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packed_enum_ = value;
}

// optional bool skip_message = 6 [default = false];
inline bool NanoPBOptions::has_skip_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100U) != 0;
  return value;
}
inline void NanoPBOptions::clear_skip_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skip_message_ = false;
  _impl_._has_bits_[0] &= ~0x00000100U;
}
inline bool NanoPBOptions::skip_message() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.skip_message)
  return _internal_skip_message();
}
inline void NanoPBOptions::set_skip_message(bool value) {
  _internal_set_skip_message(value);
  _impl_._has_bits_[0] |= 0x00000100U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.skip_message)
}
inline bool NanoPBOptions::_internal_skip_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.skip_message_;
}
inline void NanoPBOptions::_internal_set_skip_message(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skip_message_ = value;
}

// optional bool no_unions = 8 [default = false];
inline bool NanoPBOptions::has_no_unions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200U) != 0;
  return value;
}
inline void NanoPBOptions::clear_no_unions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_unions_ = false;
  _impl_._has_bits_[0] &= ~0x00000200U;
}
inline bool NanoPBOptions::no_unions() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.no_unions)
  return _internal_no_unions();
}
inline void NanoPBOptions::set_no_unions(bool value) {
  _internal_set_no_unions(value);
  _impl_._has_bits_[0] |= 0x00000200U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.no_unions)
}
inline bool NanoPBOptions::_internal_no_unions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.no_unions_;
}
inline void NanoPBOptions::_internal_set_no_unions(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_unions_ = value;
}

// optional uint32 msgid = 9;
inline bool NanoPBOptions::has_msgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800U) != 0;
  return value;
}
inline void NanoPBOptions::clear_msgid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msgid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800U;
}
inline ::uint32_t NanoPBOptions::msgid() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.msgid)
  return _internal_msgid();
}
inline void NanoPBOptions::set_msgid(::uint32_t value) {
  _internal_set_msgid(value);
  _impl_._has_bits_[0] |= 0x00000800U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.msgid)
}
inline ::uint32_t NanoPBOptions::_internal_msgid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.msgid_;
}
inline void NanoPBOptions::_internal_set_msgid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msgid_ = value;
}

// optional bool anonymous_oneof = 11 [default = false];
inline bool NanoPBOptions::has_anonymous_oneof() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000U) != 0;
  return value;
}
inline void NanoPBOptions::clear_anonymous_oneof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.anonymous_oneof_ = false;
  _impl_._has_bits_[0] &= ~0x00001000U;
}
inline bool NanoPBOptions::anonymous_oneof() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.anonymous_oneof)
  return _internal_anonymous_oneof();
}
inline void NanoPBOptions::set_anonymous_oneof(bool value) {
  _internal_set_anonymous_oneof(value);
  _impl_._has_bits_[0] |= 0x00001000U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.anonymous_oneof)
}
inline bool NanoPBOptions::_internal_anonymous_oneof() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.anonymous_oneof_;
}
inline void NanoPBOptions::_internal_set_anonymous_oneof(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.anonymous_oneof_ = value;
}

// optional bool proto3 = 12 [default = false];
inline bool NanoPBOptions::has_proto3() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000U) != 0;
  return value;
}
inline void NanoPBOptions::clear_proto3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proto3_ = false;
  _impl_._has_bits_[0] &= ~0x00002000U;
}
inline bool NanoPBOptions::proto3() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.proto3)
  return _internal_proto3();
}
inline void NanoPBOptions::set_proto3(bool value) {
  _internal_set_proto3(value);
  _impl_._has_bits_[0] |= 0x00002000U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.proto3)
}
inline bool NanoPBOptions::_internal_proto3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proto3_;
}
inline void NanoPBOptions::_internal_set_proto3(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proto3_ = value;
}

// optional bool proto3_singular_msgs = 21 [default = false];
inline bool NanoPBOptions::has_proto3_singular_msgs() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000U) != 0;
  return value;
}
inline void NanoPBOptions::clear_proto3_singular_msgs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proto3_singular_msgs_ = false;
  _impl_._has_bits_[0] &= ~0x00100000U;
}
inline bool NanoPBOptions::proto3_singular_msgs() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.proto3_singular_msgs)
  return _internal_proto3_singular_msgs();
}
inline void NanoPBOptions::set_proto3_singular_msgs(bool value) {
  _internal_set_proto3_singular_msgs(value);
  _impl_._has_bits_[0] |= 0x00100000U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.proto3_singular_msgs)
}
inline bool NanoPBOptions::_internal_proto3_singular_msgs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proto3_singular_msgs_;
}
inline void NanoPBOptions::_internal_set_proto3_singular_msgs(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proto3_singular_msgs_ = value;
}

// optional bool enum_to_string = 13 [default = false];
inline bool NanoPBOptions::has_enum_to_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000U) != 0;
  return value;
}
inline void NanoPBOptions::clear_enum_to_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enum_to_string_ = false;
  _impl_._has_bits_[0] &= ~0x00004000U;
}
inline bool NanoPBOptions::enum_to_string() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.enum_to_string)
  return _internal_enum_to_string();
}
inline void NanoPBOptions::set_enum_to_string(bool value) {
  _internal_set_enum_to_string(value);
  _impl_._has_bits_[0] |= 0x00004000U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.enum_to_string)
}
inline bool NanoPBOptions::_internal_enum_to_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enum_to_string_;
}
inline void NanoPBOptions::_internal_set_enum_to_string(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enum_to_string_ = value;
}

// optional bool fixed_length = 15 [default = false];
inline bool NanoPBOptions::has_fixed_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000U) != 0;
  return value;
}
inline void NanoPBOptions::clear_fixed_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fixed_length_ = false;
  _impl_._has_bits_[0] &= ~0x00008000U;
}
inline bool NanoPBOptions::fixed_length() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.fixed_length)
  return _internal_fixed_length();
}
inline void NanoPBOptions::set_fixed_length(bool value) {
  _internal_set_fixed_length(value);
  _impl_._has_bits_[0] |= 0x00008000U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.fixed_length)
}
inline bool NanoPBOptions::_internal_fixed_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fixed_length_;
}
inline void NanoPBOptions::_internal_set_fixed_length(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fixed_length_ = value;
}

// optional bool fixed_count = 16 [default = false];
inline bool NanoPBOptions::has_fixed_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000U) != 0;
  return value;
}
inline void NanoPBOptions::clear_fixed_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fixed_count_ = false;
  _impl_._has_bits_[0] &= ~0x00080000U;
}
inline bool NanoPBOptions::fixed_count() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.fixed_count)
  return _internal_fixed_count();
}
inline void NanoPBOptions::set_fixed_count(bool value) {
  _internal_set_fixed_count(value);
  _impl_._has_bits_[0] |= 0x00080000U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.fixed_count)
}
inline bool NanoPBOptions::_internal_fixed_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fixed_count_;
}
inline void NanoPBOptions::_internal_set_fixed_count(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fixed_count_ = value;
}

// optional bool submsg_callback = 22 [default = false];
inline bool NanoPBOptions::has_submsg_callback() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000U) != 0;
  return value;
}
inline void NanoPBOptions::clear_submsg_callback() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.submsg_callback_ = false;
  _impl_._has_bits_[0] &= ~0x00200000U;
}
inline bool NanoPBOptions::submsg_callback() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.submsg_callback)
  return _internal_submsg_callback();
}
inline void NanoPBOptions::set_submsg_callback(bool value) {
  _internal_set_submsg_callback(value);
  _impl_._has_bits_[0] |= 0x00200000U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.submsg_callback)
}
inline bool NanoPBOptions::_internal_submsg_callback() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.submsg_callback_;
}
inline void NanoPBOptions::_internal_set_submsg_callback(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.submsg_callback_ = value;
}

// optional .TypenameMangling mangle_names = 17 [default = M_NONE];
inline bool NanoPBOptions::has_mangle_names() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000U) != 0;
  return value;
}
inline void NanoPBOptions::clear_mangle_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mangle_names_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000U;
}
inline ::TypenameMangling NanoPBOptions::mangle_names() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.mangle_names)
  return _internal_mangle_names();
}
inline void NanoPBOptions::set_mangle_names(::TypenameMangling value) {
  _internal_set_mangle_names(value);
  _impl_._has_bits_[0] |= 0x00020000U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.mangle_names)
}
inline ::TypenameMangling NanoPBOptions::_internal_mangle_names() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::TypenameMangling>(_impl_.mangle_names_);
}
inline void NanoPBOptions::_internal_set_mangle_names(::TypenameMangling value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::TypenameMangling_internal_data_));
                                          _impl_.mangle_names_ = value;
}

// optional string callback_datatype = 18 [default = "pb_callback_t"];
inline bool NanoPBOptions::has_callback_datatype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001U) != 0;
  return value;
}
inline void NanoPBOptions::clear_callback_datatype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callback_datatype_.ClearToDefault(::NanoPBOptions::Impl_::_i_give_permission_to_break_this_code_default_callback_datatype_, GetArena());
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& NanoPBOptions::callback_datatype() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NanoPBOptions.callback_datatype)
  if (_impl_.callback_datatype_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_callback_datatype_.get();
  }
  return _internal_callback_datatype();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void NanoPBOptions::set_callback_datatype(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.callback_datatype_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NanoPBOptions.callback_datatype)
}
inline ::std::string* PROTOBUF_NONNULL NanoPBOptions::mutable_callback_datatype()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_callback_datatype();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.callback_datatype)
  return _s;
}
inline const ::std::string& NanoPBOptions::_internal_callback_datatype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.callback_datatype_.Get();
}
inline void NanoPBOptions::_internal_set_callback_datatype(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.callback_datatype_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL NanoPBOptions::_internal_mutable_callback_datatype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.callback_datatype_.Mutable(::NanoPBOptions::Impl_::_i_give_permission_to_break_this_code_default_callback_datatype_, GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE NanoPBOptions::release_callback_datatype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NanoPBOptions.callback_datatype)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  return _impl_.callback_datatype_.Release();
}
inline void NanoPBOptions::set_allocated_callback_datatype(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.callback_datatype_.SetAllocated(value, GetArena());
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.callback_datatype)
}

// optional string callback_function = 19 [default = "pb_default_field_callback"];
inline bool NanoPBOptions::has_callback_function() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002U) != 0;
  return value;
}
inline void NanoPBOptions::clear_callback_function() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callback_function_.ClearToDefault(::NanoPBOptions::Impl_::_i_give_permission_to_break_this_code_default_callback_function_, GetArena());
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline const ::std::string& NanoPBOptions::callback_function() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NanoPBOptions.callback_function)
  if (_impl_.callback_function_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_callback_function_.get();
  }
  return _internal_callback_function();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void NanoPBOptions::set_callback_function(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  _impl_.callback_function_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NanoPBOptions.callback_function)
}
inline ::std::string* PROTOBUF_NONNULL NanoPBOptions::mutable_callback_function()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_callback_function();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.callback_function)
  return _s;
}
inline const ::std::string& NanoPBOptions::_internal_callback_function() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.callback_function_.Get();
}
inline void NanoPBOptions::_internal_set_callback_function(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  _impl_.callback_function_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL NanoPBOptions::_internal_mutable_callback_function() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  return _impl_.callback_function_.Mutable(::NanoPBOptions::Impl_::_i_give_permission_to_break_this_code_default_callback_function_, GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE NanoPBOptions::release_callback_function() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NanoPBOptions.callback_function)
  if ((_impl_._has_bits_[0] & 0x00000002U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002U;
  return _impl_.callback_function_.Release();
}
inline void NanoPBOptions::set_allocated_callback_function(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }
  _impl_.callback_function_.SetAllocated(value, GetArena());
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.callback_function)
}

// optional .DescriptorSize descriptorsize = 20 [default = DS_AUTO];
inline bool NanoPBOptions::has_descriptorsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000U) != 0;
  return value;
}
inline void NanoPBOptions::clear_descriptorsize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.descriptorsize_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000U;
}
inline ::DescriptorSize NanoPBOptions::descriptorsize() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.descriptorsize)
  return _internal_descriptorsize();
}
inline void NanoPBOptions::set_descriptorsize(::DescriptorSize value) {
  _internal_set_descriptorsize(value);
  _impl_._has_bits_[0] |= 0x00040000U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.descriptorsize)
}
inline ::DescriptorSize NanoPBOptions::_internal_descriptorsize() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::DescriptorSize>(_impl_.descriptorsize_);
}
inline void NanoPBOptions::_internal_set_descriptorsize(::DescriptorSize value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::DescriptorSize_internal_data_));
                                          _impl_.descriptorsize_ = value;
}

// optional bool default_has = 23 [default = false];
inline bool NanoPBOptions::has_default_has() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000U) != 0;
  return value;
}
inline void NanoPBOptions::clear_default_has() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_has_ = false;
  _impl_._has_bits_[0] &= ~0x00400000U;
}
inline bool NanoPBOptions::default_has() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.default_has)
  return _internal_default_has();
}
inline void NanoPBOptions::set_default_has(bool value) {
  _internal_set_default_has(value);
  _impl_._has_bits_[0] |= 0x00400000U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.default_has)
}
inline bool NanoPBOptions::_internal_default_has() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.default_has_;
}
inline void NanoPBOptions::_internal_set_default_has(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_has_ = value;
}

// repeated string include = 24;
inline int NanoPBOptions::_internal_include_size() const {
  return _internal_include().size();
}
inline int NanoPBOptions::include_size() const {
  return _internal_include_size();
}
inline void NanoPBOptions::clear_include() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_.Clear();
}
inline ::std::string* PROTOBUF_NONNULL NanoPBOptions::add_include()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::std::string* _s = _internal_mutable_include()->Add();
  // @@protoc_insertion_point(field_add_mutable:NanoPBOptions.include)
  return _s;
}
inline const ::std::string& NanoPBOptions::include(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NanoPBOptions.include)
  return _internal_include().Get(index);
}
inline ::std::string* PROTOBUF_NONNULL NanoPBOptions::mutable_include(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.include)
  return _internal_mutable_include()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void NanoPBOptions::set_include(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(*_internal_mutable_include()->Mutable(index), ::std::forward<Arg_>(value),
                        args... );
  // @@protoc_insertion_point(field_set:NanoPBOptions.include)
}
template <typename Arg_, typename... Args_>
inline void NanoPBOptions::add_include(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_include(),
                               ::std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:NanoPBOptions.include)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>& NanoPBOptions::include()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NanoPBOptions.include)
  return _internal_include();
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
NanoPBOptions::mutable_include() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NanoPBOptions.include)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_include();
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
NanoPBOptions::_internal_include() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
NanoPBOptions::_internal_mutable_include() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.include_;
}

// repeated string exclude = 26;
inline int NanoPBOptions::_internal_exclude_size() const {
  return _internal_exclude().size();
}
inline int NanoPBOptions::exclude_size() const {
  return _internal_exclude_size();
}
inline void NanoPBOptions::clear_exclude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exclude_.Clear();
}
inline ::std::string* PROTOBUF_NONNULL NanoPBOptions::add_exclude()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::std::string* _s = _internal_mutable_exclude()->Add();
  // @@protoc_insertion_point(field_add_mutable:NanoPBOptions.exclude)
  return _s;
}
inline const ::std::string& NanoPBOptions::exclude(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NanoPBOptions.exclude)
  return _internal_exclude().Get(index);
}
inline ::std::string* PROTOBUF_NONNULL NanoPBOptions::mutable_exclude(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.exclude)
  return _internal_mutable_exclude()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void NanoPBOptions::set_exclude(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(*_internal_mutable_exclude()->Mutable(index), ::std::forward<Arg_>(value),
                        args... );
  // @@protoc_insertion_point(field_set:NanoPBOptions.exclude)
}
template <typename Arg_, typename... Args_>
inline void NanoPBOptions::add_exclude(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_exclude(),
                               ::std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:NanoPBOptions.exclude)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>& NanoPBOptions::exclude()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NanoPBOptions.exclude)
  return _internal_exclude();
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
NanoPBOptions::mutable_exclude() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NanoPBOptions.exclude)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_exclude();
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
NanoPBOptions::_internal_exclude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.exclude_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>* PROTOBUF_NONNULL
NanoPBOptions::_internal_mutable_exclude() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.exclude_;
}

// optional string package = 25;
inline bool NanoPBOptions::has_package() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004U) != 0;
  return value;
}
inline void NanoPBOptions::clear_package() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.package_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004U;
}
inline const ::std::string& NanoPBOptions::package() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NanoPBOptions.package)
  return _internal_package();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void NanoPBOptions::set_package(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004U;
  _impl_.package_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NanoPBOptions.package)
}
inline ::std::string* PROTOBUF_NONNULL NanoPBOptions::mutable_package()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_package();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.package)
  return _s;
}
inline const ::std::string& NanoPBOptions::_internal_package() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.package_.Get();
}
inline void NanoPBOptions::_internal_set_package(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004U;
  _impl_.package_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL NanoPBOptions::_internal_mutable_package() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004U;
  return _impl_.package_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE NanoPBOptions::release_package() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NanoPBOptions.package)
  if ((_impl_._has_bits_[0] & 0x00000004U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004U;
  auto* released = _impl_.package_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.package_.Set("", GetArena());
  }
  return released;
}
inline void NanoPBOptions::set_allocated_package(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }
  _impl_.package_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.package_.IsDefault()) {
    _impl_.package_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.package)
}

// optional .google.protobuf.FieldDescriptorProto.Type type_override = 27;
inline bool NanoPBOptions::has_type_override() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000U) != 0;
  return value;
}
inline void NanoPBOptions::clear_type_override() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_override_ = 1;
  _impl_._has_bits_[0] &= ~0x04000000U;
}
inline ::google::protobuf::FieldDescriptorProto_Type NanoPBOptions::type_override() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.type_override)
  return _internal_type_override();
}
inline void NanoPBOptions::set_type_override(::google::protobuf::FieldDescriptorProto_Type value) {
  _internal_set_type_override(value);
  _impl_._has_bits_[0] |= 0x04000000U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.type_override)
}
inline ::google::protobuf::FieldDescriptorProto_Type NanoPBOptions::_internal_type_override() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::google::protobuf::FieldDescriptorProto_Type>(_impl_.type_override_);
}
inline void NanoPBOptions::_internal_set_type_override(::google::protobuf::FieldDescriptorProto_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::google::protobuf::FieldDescriptorProto_Type_internal_data_));
                                          _impl_.type_override_ = value;
}

// optional bool sort_by_tag = 28 [default = true];
inline bool NanoPBOptions::has_sort_by_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000U) != 0;
  return value;
}
inline void NanoPBOptions::clear_sort_by_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sort_by_tag_ = true;
  _impl_._has_bits_[0] &= ~0x02000000U;
}
inline bool NanoPBOptions::sort_by_tag() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.sort_by_tag)
  return _internal_sort_by_tag();
}
inline void NanoPBOptions::set_sort_by_tag(bool value) {
  _internal_set_sort_by_tag(value);
  _impl_._has_bits_[0] |= 0x02000000U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.sort_by_tag)
}
inline bool NanoPBOptions::_internal_sort_by_tag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sort_by_tag_;
}
inline void NanoPBOptions::_internal_set_sort_by_tag(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sort_by_tag_ = value;
}

// optional .FieldType fallback_type = 29 [default = FT_CALLBACK];
inline bool NanoPBOptions::has_fallback_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000U) != 0;
  return value;
}
inline void NanoPBOptions::clear_fallback_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fallback_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00800000U;
}
inline ::FieldType NanoPBOptions::fallback_type() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.fallback_type)
  return _internal_fallback_type();
}
inline void NanoPBOptions::set_fallback_type(::FieldType value) {
  _internal_set_fallback_type(value);
  _impl_._has_bits_[0] |= 0x00800000U;
  // @@protoc_insertion_point(field_set:NanoPBOptions.fallback_type)
}
inline ::FieldType NanoPBOptions::_internal_fallback_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::FieldType>(_impl_.fallback_type_);
}
inline void NanoPBOptions::_internal_set_fallback_type(::FieldType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::FieldType_internal_data_));
                                          _impl_.fallback_type_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::FieldType> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::FieldType>() {
  return ::FieldType_descriptor();
}
template <>
struct is_proto_enum<::IntSize> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::IntSize>() {
  return ::IntSize_descriptor();
}
template <>
struct is_proto_enum<::TypenameMangling> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::TypenameMangling>() {
  return ::TypenameMangling_descriptor();
}
template <>
struct is_proto_enum<::DescriptorSize> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::DescriptorSize>() {
  return ::DescriptorSize_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // nanopb_2eproto_2epb_2eh
