// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: meshtastic/telemetry.proto
// Protobuf C++ Version: 6.32.0

#include "meshtastic/telemetry.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace meshtastic {

inline constexpr PowerMetrics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ch1_voltage_{0},
        ch1_current_{0},
        ch2_voltage_{0},
        ch2_current_{0},
        ch3_voltage_{0},
        ch3_current_{0},
        ch4_voltage_{0},
        ch4_current_{0},
        ch5_voltage_{0},
        ch5_current_{0},
        ch6_voltage_{0},
        ch6_current_{0},
        ch7_voltage_{0},
        ch7_current_{0},
        ch8_voltage_{0},
        ch8_current_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PowerMetrics::PowerMetrics(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(PowerMetrics_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PowerMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PowerMetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PowerMetricsDefaultTypeInternal() {}
  union {
    PowerMetrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PowerMetricsDefaultTypeInternal _PowerMetrics_default_instance_;

inline constexpr Nau7802Config::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        zerooffset_{0},
        calibrationfactor_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Nau7802Config::Nau7802Config(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Nau7802Config_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Nau7802ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Nau7802ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Nau7802ConfigDefaultTypeInternal() {}
  union {
    Nau7802Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Nau7802ConfigDefaultTypeInternal _Nau7802Config_default_instance_;

inline constexpr LocalStats::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        uptime_seconds_{0u},
        channel_utilization_{0},
        air_util_tx_{0},
        num_packets_tx_{0u},
        num_packets_rx_{0u},
        num_packets_rx_bad_{0u},
        num_online_nodes_{0u},
        num_total_nodes_{0u},
        num_rx_dupe_{0u},
        num_tx_relay_{0u},
        num_tx_relay_canceled_{0u},
        heap_total_bytes_{0u},
        heap_free_bytes_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR LocalStats::LocalStats(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(LocalStats_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LocalStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalStatsDefaultTypeInternal() {}
  union {
    LocalStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalStatsDefaultTypeInternal _LocalStats_default_instance_;

inline constexpr HostMetrics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        user_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        freemem_bytes_{::uint64_t{0u}},
        diskfree1_bytes_{::uint64_t{0u}},
        uptime_seconds_{0u},
        load1_{0u},
        diskfree2_bytes_{::uint64_t{0u}},
        diskfree3_bytes_{::uint64_t{0u}},
        load5_{0u},
        load15_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR HostMetrics::HostMetrics(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(HostMetrics_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HostMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostMetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostMetricsDefaultTypeInternal() {}
  union {
    HostMetrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostMetricsDefaultTypeInternal _HostMetrics_default_instance_;

inline constexpr HealthMetrics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        heart_bpm_{0u},
        spo2_{0u},
        temperature_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HealthMetrics::HealthMetrics(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(HealthMetrics_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HealthMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthMetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthMetricsDefaultTypeInternal() {}
  union {
    HealthMetrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthMetricsDefaultTypeInternal _HealthMetrics_default_instance_;

inline constexpr EnvironmentMetrics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        temperature_{0},
        relative_humidity_{0},
        barometric_pressure_{0},
        gas_resistance_{0},
        voltage_{0},
        current_{0},
        iaq_{0u},
        distance_{0},
        lux_{0},
        white_lux_{0},
        ir_lux_{0},
        uv_lux_{0},
        wind_direction_{0u},
        wind_speed_{0},
        weight_{0},
        wind_gust_{0},
        wind_lull_{0},
        radiation_{0},
        rainfall_1h_{0},
        rainfall_24h_{0},
        soil_moisture_{0u},
        soil_temperature_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EnvironmentMetrics::EnvironmentMetrics(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(EnvironmentMetrics_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EnvironmentMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnvironmentMetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnvironmentMetricsDefaultTypeInternal() {}
  union {
    EnvironmentMetrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnvironmentMetricsDefaultTypeInternal _EnvironmentMetrics_default_instance_;

inline constexpr DeviceMetrics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        battery_level_{0u},
        voltage_{0},
        channel_utilization_{0},
        air_util_tx_{0},
        uptime_seconds_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR DeviceMetrics::DeviceMetrics(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DeviceMetrics_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DeviceMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceMetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceMetricsDefaultTypeInternal() {}
  union {
    DeviceMetrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceMetricsDefaultTypeInternal _DeviceMetrics_default_instance_;

inline constexpr AirQualityMetrics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pm10_standard_{0u},
        pm25_standard_{0u},
        pm100_standard_{0u},
        pm10_environmental_{0u},
        pm25_environmental_{0u},
        pm100_environmental_{0u},
        particles_03um_{0u},
        particles_05um_{0u},
        particles_10um_{0u},
        particles_25um_{0u},
        particles_50um_{0u},
        particles_100um_{0u},
        co2_{0u},
        co2_temperature_{0},
        co2_humidity_{0},
        form_formaldehyde_{0},
        form_humidity_{0},
        form_temperature_{0},
        pm40_standard_{0u},
        particles_40um_{0u},
        pm_temperature_{0},
        pm_humidity_{0},
        pm_voc_idx_{0},
        pm_nox_idx_{0},
        particles_tps_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AirQualityMetrics::AirQualityMetrics(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AirQualityMetrics_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AirQualityMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AirQualityMetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AirQualityMetricsDefaultTypeInternal() {}
  union {
    AirQualityMetrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AirQualityMetricsDefaultTypeInternal _AirQualityMetrics_default_instance_;

inline constexpr Telemetry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        time_{0u},
        variant_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Telemetry::Telemetry(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Telemetry_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TelemetryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TelemetryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TelemetryDefaultTypeInternal() {}
  union {
    Telemetry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TelemetryDefaultTypeInternal _Telemetry_default_instance_;
}  // namespace meshtastic
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_meshtastic_2ftelemetry_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_meshtastic_2ftelemetry_2eproto = nullptr;
const ::uint32_t
    TableStruct_meshtastic_2ftelemetry_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceMetrics, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceMetrics, _impl_.battery_level_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceMetrics, _impl_.voltage_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceMetrics, _impl_.channel_utilization_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceMetrics, _impl_.air_util_tx_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceMetrics, _impl_.uptime_seconds_),
        0,
        1,
        2,
        3,
        4,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_._has_bits_),
        25, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.temperature_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.relative_humidity_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.barometric_pressure_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.gas_resistance_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.voltage_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.current_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.iaq_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.distance_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.lux_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.white_lux_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.ir_lux_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.uv_lux_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.wind_direction_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.wind_speed_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.weight_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.wind_gust_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.wind_lull_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.radiation_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.rainfall_1h_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.rainfall_24h_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.soil_moisture_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::EnvironmentMetrics, _impl_.soil_temperature_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_._has_bits_),
        19, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_.ch1_voltage_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_.ch1_current_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_.ch2_voltage_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_.ch2_current_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_.ch3_voltage_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_.ch3_current_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_.ch4_voltage_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_.ch4_current_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_.ch5_voltage_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_.ch5_current_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_.ch6_voltage_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_.ch6_current_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_.ch7_voltage_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_.ch7_current_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_.ch8_voltage_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::PowerMetrics, _impl_.ch8_current_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_._has_bits_),
        28, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.pm10_standard_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.pm25_standard_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.pm100_standard_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.pm10_environmental_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.pm25_environmental_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.pm100_environmental_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.particles_03um_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.particles_05um_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.particles_10um_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.particles_25um_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.particles_50um_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.particles_100um_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.co2_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.co2_temperature_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.co2_humidity_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.form_formaldehyde_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.form_humidity_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.form_temperature_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.pm40_standard_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.particles_40um_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.pm_temperature_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.pm_humidity_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.pm_voc_idx_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.pm_nox_idx_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::AirQualityMetrics, _impl_.particles_tps_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::LocalStats, _impl_._has_bits_),
        16, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::LocalStats, _impl_.uptime_seconds_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::LocalStats, _impl_.channel_utilization_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::LocalStats, _impl_.air_util_tx_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::LocalStats, _impl_.num_packets_tx_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::LocalStats, _impl_.num_packets_rx_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::LocalStats, _impl_.num_packets_rx_bad_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::LocalStats, _impl_.num_online_nodes_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::LocalStats, _impl_.num_total_nodes_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::LocalStats, _impl_.num_rx_dupe_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::LocalStats, _impl_.num_tx_relay_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::LocalStats, _impl_.num_tx_relay_canceled_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::LocalStats, _impl_.heap_total_bytes_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::LocalStats, _impl_.heap_free_bytes_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::HealthMetrics, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::HealthMetrics, _impl_.heart_bpm_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::HealthMetrics, _impl_.spo2_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::HealthMetrics, _impl_.temperature_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::HostMetrics, _impl_._has_bits_),
        12, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::HostMetrics, _impl_.uptime_seconds_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::HostMetrics, _impl_.freemem_bytes_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::HostMetrics, _impl_.diskfree1_bytes_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::HostMetrics, _impl_.diskfree2_bytes_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::HostMetrics, _impl_.diskfree3_bytes_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::HostMetrics, _impl_.load1_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::HostMetrics, _impl_.load5_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::HostMetrics, _impl_.load15_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::HostMetrics, _impl_.user_string_),
        3,
        1,
        2,
        5,
        6,
        4,
        7,
        8,
        0,
        0x085, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::Telemetry, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Telemetry, _impl_._oneof_case_[0]),
        13, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::Telemetry, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Telemetry, _impl_.variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Telemetry, _impl_.variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Telemetry, _impl_.variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Telemetry, _impl_.variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Telemetry, _impl_.variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Telemetry, _impl_.variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Telemetry, _impl_.variant_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Telemetry, _impl_.variant_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::Nau7802Config, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::Nau7802Config, _impl_.zerooffset_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Nau7802Config, _impl_.calibrationfactor_),
        0,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::meshtastic::DeviceMetrics)},
        {13, sizeof(::meshtastic::EnvironmentMetrics)},
        {60, sizeof(::meshtastic::PowerMetrics)},
        {95, sizeof(::meshtastic::AirQualityMetrics)},
        {148, sizeof(::meshtastic::LocalStats)},
        {177, sizeof(::meshtastic::HealthMetrics)},
        {186, sizeof(::meshtastic::HostMetrics)},
        {207, sizeof(::meshtastic::Telemetry)},
        {228, sizeof(::meshtastic::Nau7802Config)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::meshtastic::_DeviceMetrics_default_instance_._instance,
    &::meshtastic::_EnvironmentMetrics_default_instance_._instance,
    &::meshtastic::_PowerMetrics_default_instance_._instance,
    &::meshtastic::_AirQualityMetrics_default_instance_._instance,
    &::meshtastic::_LocalStats_default_instance_._instance,
    &::meshtastic::_HealthMetrics_default_instance_._instance,
    &::meshtastic::_HostMetrics_default_instance_._instance,
    &::meshtastic::_Telemetry_default_instance_._instance,
    &::meshtastic::_Nau7802Config_default_instance_._instance,
};
const char descriptor_table_protodef_meshtastic_2ftelemetry_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\032meshtastic/telemetry.proto\022\nmeshtastic"
    "\"\363\001\n\rDeviceMetrics\022\032\n\rbattery_level\030\001 \001("
    "\rH\000\210\001\001\022\024\n\007voltage\030\002 \001(\002H\001\210\001\001\022 \n\023channel_"
    "utilization\030\003 \001(\002H\002\210\001\001\022\030\n\013air_util_tx\030\004 "
    "\001(\002H\003\210\001\001\022\033\n\016uptime_seconds\030\005 \001(\rH\004\210\001\001B\020\n"
    "\016_battery_levelB\n\n\010_voltageB\026\n\024_channel_"
    "utilizationB\016\n\014_air_util_txB\021\n\017_uptime_s"
    "econds\"\202\007\n\022EnvironmentMetrics\022\030\n\013tempera"
    "ture\030\001 \001(\002H\000\210\001\001\022\036\n\021relative_humidity\030\002 \001"
    "(\002H\001\210\001\001\022 \n\023barometric_pressure\030\003 \001(\002H\002\210\001"
    "\001\022\033\n\016gas_resistance\030\004 \001(\002H\003\210\001\001\022\024\n\007voltag"
    "e\030\005 \001(\002H\004\210\001\001\022\024\n\007current\030\006 \001(\002H\005\210\001\001\022\020\n\003ia"
    "q\030\007 \001(\rH\006\210\001\001\022\025\n\010distance\030\010 \001(\002H\007\210\001\001\022\020\n\003l"
    "ux\030\t \001(\002H\010\210\001\001\022\026\n\twhite_lux\030\n \001(\002H\t\210\001\001\022\023\n"
    "\006ir_lux\030\013 \001(\002H\n\210\001\001\022\023\n\006uv_lux\030\014 \001(\002H\013\210\001\001\022"
    "\033\n\016wind_direction\030\r \001(\rH\014\210\001\001\022\027\n\nwind_spe"
    "ed\030\016 \001(\002H\r\210\001\001\022\023\n\006weight\030\017 \001(\002H\016\210\001\001\022\026\n\twi"
    "nd_gust\030\020 \001(\002H\017\210\001\001\022\026\n\twind_lull\030\021 \001(\002H\020\210"
    "\001\001\022\026\n\tradiation\030\022 \001(\002H\021\210\001\001\022\030\n\013rainfall_1"
    "h\030\023 \001(\002H\022\210\001\001\022\031\n\014rainfall_24h\030\024 \001(\002H\023\210\001\001\022"
    "\032\n\rsoil_moisture\030\025 \001(\rH\024\210\001\001\022\035\n\020soil_temp"
    "erature\030\026 \001(\002H\025\210\001\001B\016\n\014_temperatureB\024\n\022_r"
    "elative_humidityB\026\n\024_barometric_pressure"
    "B\021\n\017_gas_resistanceB\n\n\010_voltageB\n\n\010_curr"
    "entB\006\n\004_iaqB\013\n\t_distanceB\006\n\004_luxB\014\n\n_whi"
    "te_luxB\t\n\007_ir_luxB\t\n\007_uv_luxB\021\n\017_wind_di"
    "rectionB\r\n\013_wind_speedB\t\n\007_weightB\014\n\n_wi"
    "nd_gustB\014\n\n_wind_lullB\014\n\n_radiationB\016\n\014_"
    "rainfall_1hB\017\n\r_rainfall_24hB\020\n\016_soil_mo"
    "istureB\023\n\021_soil_temperature\"\256\005\n\014PowerMet"
    "rics\022\030\n\013ch1_voltage\030\001 \001(\002H\000\210\001\001\022\030\n\013ch1_cu"
    "rrent\030\002 \001(\002H\001\210\001\001\022\030\n\013ch2_voltage\030\003 \001(\002H\002\210"
    "\001\001\022\030\n\013ch2_current\030\004 \001(\002H\003\210\001\001\022\030\n\013ch3_volt"
    "age\030\005 \001(\002H\004\210\001\001\022\030\n\013ch3_current\030\006 \001(\002H\005\210\001\001"
    "\022\030\n\013ch4_voltage\030\007 \001(\002H\006\210\001\001\022\030\n\013ch4_curren"
    "t\030\010 \001(\002H\007\210\001\001\022\030\n\013ch5_voltage\030\t \001(\002H\010\210\001\001\022\030"
    "\n\013ch5_current\030\n \001(\002H\t\210\001\001\022\030\n\013ch6_voltage\030"
    "\013 \001(\002H\n\210\001\001\022\030\n\013ch6_current\030\014 \001(\002H\013\210\001\001\022\030\n\013"
    "ch7_voltage\030\r \001(\002H\014\210\001\001\022\030\n\013ch7_current\030\016 "
    "\001(\002H\r\210\001\001\022\030\n\013ch8_voltage\030\017 \001(\002H\016\210\001\001\022\030\n\013ch"
    "8_current\030\020 \001(\002H\017\210\001\001B\016\n\014_ch1_voltageB\016\n\014"
    "_ch1_currentB\016\n\014_ch2_voltageB\016\n\014_ch2_cur"
    "rentB\016\n\014_ch3_voltageB\016\n\014_ch3_currentB\016\n\014"
    "_ch4_voltageB\016\n\014_ch4_currentB\016\n\014_ch5_vol"
    "tageB\016\n\014_ch5_currentB\016\n\014_ch6_voltageB\016\n\014"
    "_ch6_currentB\016\n\014_ch7_voltageB\016\n\014_ch7_cur"
    "rentB\016\n\014_ch8_voltageB\016\n\014_ch8_current\"\261\t\n"
    "\021AirQualityMetrics\022\032\n\rpm10_standard\030\001 \001("
    "\rH\000\210\001\001\022\032\n\rpm25_standard\030\002 \001(\rH\001\210\001\001\022\033\n\016pm"
    "100_standard\030\003 \001(\rH\002\210\001\001\022\037\n\022pm10_environm"
    "ental\030\004 \001(\rH\003\210\001\001\022\037\n\022pm25_environmental\030\005"
    " \001(\rH\004\210\001\001\022 \n\023pm100_environmental\030\006 \001(\rH\005"
    "\210\001\001\022\033\n\016particles_03um\030\007 \001(\rH\006\210\001\001\022\033\n\016part"
    "icles_05um\030\010 \001(\rH\007\210\001\001\022\033\n\016particles_10um\030"
    "\t \001(\rH\010\210\001\001\022\033\n\016particles_25um\030\n \001(\rH\t\210\001\001\022"
    "\033\n\016particles_50um\030\013 \001(\rH\n\210\001\001\022\034\n\017particle"
    "s_100um\030\014 \001(\rH\013\210\001\001\022\020\n\003co2\030\r \001(\rH\014\210\001\001\022\034\n\017"
    "co2_temperature\030\016 \001(\002H\r\210\001\001\022\031\n\014co2_humidi"
    "ty\030\017 \001(\002H\016\210\001\001\022\036\n\021form_formaldehyde\030\020 \001(\002"
    "H\017\210\001\001\022\032\n\rform_humidity\030\021 \001(\002H\020\210\001\001\022\035\n\020for"
    "m_temperature\030\022 \001(\002H\021\210\001\001\022\032\n\rpm40_standar"
    "d\030\023 \001(\rH\022\210\001\001\022\033\n\016particles_40um\030\024 \001(\rH\023\210\001"
    "\001\022\033\n\016pm_temperature\030\025 \001(\002H\024\210\001\001\022\030\n\013pm_hum"
    "idity\030\026 \001(\002H\025\210\001\001\022\027\n\npm_voc_idx\030\027 \001(\002H\026\210\001"
    "\001\022\027\n\npm_nox_idx\030\030 \001(\002H\027\210\001\001\022\032\n\rparticles_"
    "tps\030\031 \001(\002H\030\210\001\001B\020\n\016_pm10_standardB\020\n\016_pm2"
    "5_standardB\021\n\017_pm100_standardB\025\n\023_pm10_e"
    "nvironmentalB\025\n\023_pm25_environmentalB\026\n\024_"
    "pm100_environmentalB\021\n\017_particles_03umB\021"
    "\n\017_particles_05umB\021\n\017_particles_10umB\021\n\017"
    "_particles_25umB\021\n\017_particles_50umB\022\n\020_p"
    "articles_100umB\006\n\004_co2B\022\n\020_co2_temperatu"
    "reB\017\n\r_co2_humidityB\024\n\022_form_formaldehyd"
    "eB\020\n\016_form_humidityB\023\n\021_form_temperature"
    "B\020\n\016_pm40_standardB\021\n\017_particles_40umB\021\n"
    "\017_pm_temperatureB\016\n\014_pm_humidityB\r\n\013_pm_"
    "voc_idxB\r\n\013_pm_nox_idxB\020\n\016_particles_tps"
    "\"\322\002\n\nLocalStats\022\026\n\016uptime_seconds\030\001 \001(\r\022"
    "\033\n\023channel_utilization\030\002 \001(\002\022\023\n\013air_util"
    "_tx\030\003 \001(\002\022\026\n\016num_packets_tx\030\004 \001(\r\022\026\n\016num"
    "_packets_rx\030\005 \001(\r\022\032\n\022num_packets_rx_bad\030"
    "\006 \001(\r\022\030\n\020num_online_nodes\030\007 \001(\r\022\027\n\017num_t"
    "otal_nodes\030\010 \001(\r\022\023\n\013num_rx_dupe\030\t \001(\r\022\024\n"
    "\014num_tx_relay\030\n \001(\r\022\035\n\025num_tx_relay_canc"
    "eled\030\013 \001(\r\022\030\n\020heap_total_bytes\030\014 \001(\r\022\027\n\017"
    "heap_free_bytes\030\r \001(\r\"{\n\rHealthMetrics\022\026"
    "\n\theart_bpm\030\001 \001(\rH\000\210\001\001\022\021\n\004spO2\030\002 \001(\rH\001\210\001"
    "\001\022\030\n\013temperature\030\003 \001(\002H\002\210\001\001B\014\n\n_heart_bp"
    "mB\007\n\005_spO2B\016\n\014_temperature\"\221\002\n\013HostMetri"
    "cs\022\026\n\016uptime_seconds\030\001 \001(\r\022\025\n\rfreemem_by"
    "tes\030\002 \001(\004\022\027\n\017diskfree1_bytes\030\003 \001(\004\022\034\n\017di"
    "skfree2_bytes\030\004 \001(\004H\000\210\001\001\022\034\n\017diskfree3_by"
    "tes\030\005 \001(\004H\001\210\001\001\022\r\n\005load1\030\006 \001(\r\022\r\n\005load5\030\007"
    " \001(\r\022\016\n\006load15\030\010 \001(\r\022\030\n\013user_string\030\t \001("
    "\tH\002\210\001\001B\022\n\020_diskfree2_bytesB\022\n\020_diskfree3"
    "_bytesB\016\n\014_user_string\"\236\003\n\tTelemetry\022\014\n\004"
    "time\030\001 \001(\007\0223\n\016device_metrics\030\002 \001(\0132\031.mes"
    "htastic.DeviceMetricsH\000\022=\n\023environment_m"
    "etrics\030\003 \001(\0132\036.meshtastic.EnvironmentMet"
    "ricsH\000\022<\n\023air_quality_metrics\030\004 \001(\0132\035.me"
    "shtastic.AirQualityMetricsH\000\0221\n\rpower_me"
    "trics\030\005 \001(\0132\030.meshtastic.PowerMetricsH\000\022"
    "-\n\013local_stats\030\006 \001(\0132\026.meshtastic.LocalS"
    "tatsH\000\0223\n\016health_metrics\030\007 \001(\0132\031.meshtas"
    "tic.HealthMetricsH\000\022/\n\014host_metrics\030\010 \001("
    "\0132\027.meshtastic.HostMetricsH\000B\t\n\007variant\""
    ">\n\rNau7802Config\022\022\n\nzeroOffset\030\001 \001(\005\022\031\n\021"
    "calibrationFactor\030\002 \001(\002*\355\004\n\023TelemetrySen"
    "sorType\022\020\n\014SENSOR_UNSET\020\000\022\n\n\006BME280\020\001\022\n\n"
    "\006BME680\020\002\022\013\n\007MCP9808\020\003\022\n\n\006INA260\020\004\022\n\n\006IN"
    "A219\020\005\022\n\n\006BMP280\020\006\022\t\n\005SHTC3\020\007\022\t\n\005LPS22\020\010"
    "\022\013\n\007QMC6310\020\t\022\013\n\007QMI8658\020\n\022\014\n\010QMC5883L\020\013"
    "\022\t\n\005SHT31\020\014\022\014\n\010PMSA003I\020\r\022\013\n\007INA3221\020\016\022\n"
    "\n\006BMP085\020\017\022\014\n\010RCWL9620\020\020\022\t\n\005SHT4X\020\021\022\014\n\010V"
    "EML7700\020\022\022\014\n\010MLX90632\020\023\022\013\n\007OPT3001\020\024\022\014\n\010"
    "LTR390UV\020\025\022\016\n\nTSL25911FN\020\026\022\t\n\005AHT10\020\027\022\020\n"
    "\014DFROBOT_LARK\020\030\022\013\n\007NAU7802\020\031\022\n\n\006BMP3XX\020\032"
    "\022\014\n\010ICM20948\020\033\022\014\n\010MAX17048\020\034\022\021\n\rCUSTOM_S"
    "ENSOR\020\035\022\014\n\010MAX30102\020\036\022\014\n\010MLX90614\020\037\022\t\n\005S"
    "CD4X\020 \022\013\n\007RADSENS\020!\022\n\n\006INA226\020\"\022\020\n\014DFROB"
    "OT_RAIN\020#\022\n\n\006DPS310\020$\022\014\n\010RAK12035\020%\022\014\n\010M"
    "AX17261\020&\022\013\n\007PCT2075\020\'\022\013\n\007ADS1X15\020(\022\017\n\013A"
    "DS1X15_ALT\020)\022\t\n\005SFA30\020*\022\t\n\005SEN5X\020+\022\013\n\007TS"
    "L2561\020,Bd\n\023com.geeksville.meshB\017Telemetr"
    "yProtosZ\"github.com/meshtastic/go/genera"
    "ted\252\002\024Meshtastic.Protobufs\272\002\000b\006proto3"
};
static ::absl::once_flag descriptor_table_meshtastic_2ftelemetry_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_meshtastic_2ftelemetry_2eproto = {
    false,
    false,
    5037,
    descriptor_table_protodef_meshtastic_2ftelemetry_2eproto,
    "meshtastic/telemetry.proto",
    &descriptor_table_meshtastic_2ftelemetry_2eproto_once,
    nullptr,
    0,
    9,
    schemas,
    file_default_instances,
    TableStruct_meshtastic_2ftelemetry_2eproto::offsets,
    file_level_enum_descriptors_meshtastic_2ftelemetry_2eproto,
    file_level_service_descriptors_meshtastic_2ftelemetry_2eproto,
};
namespace meshtastic {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TelemetrySensorType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2ftelemetry_2eproto);
  return file_level_enum_descriptors_meshtastic_2ftelemetry_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t TelemetrySensorType_internal_data_[] = {
    2949120u, 0u, };
// ===================================================================

class DeviceMetrics::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<DeviceMetrics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DeviceMetrics, _impl_._has_bits_);
};

DeviceMetrics::DeviceMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DeviceMetrics_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.DeviceMetrics)
}
DeviceMetrics::DeviceMetrics(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DeviceMetrics& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DeviceMetrics_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE DeviceMetrics::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void DeviceMetrics::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, battery_level_),
           0,
           offsetof(Impl_, uptime_seconds_) -
               offsetof(Impl_, battery_level_) +
               sizeof(Impl_::uptime_seconds_));
}
DeviceMetrics::~DeviceMetrics() {
  // @@protoc_insertion_point(destructor:meshtastic.DeviceMetrics)
  SharedDtor(*this);
}
inline void DeviceMetrics::SharedDtor(MessageLite& self) {
  DeviceMetrics& this_ = static_cast<DeviceMetrics&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DeviceMetrics::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DeviceMetrics(arena);
}
constexpr auto DeviceMetrics::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(DeviceMetrics),
                                            alignof(DeviceMetrics));
}
constexpr auto DeviceMetrics::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DeviceMetrics_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DeviceMetrics::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DeviceMetrics>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DeviceMetrics::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DeviceMetrics>(), &DeviceMetrics::ByteSizeLong,
              &DeviceMetrics::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DeviceMetrics, _impl_._cached_size_),
          false,
      },
      &DeviceMetrics::kDescriptorMethods,
      &descriptor_table_meshtastic_2ftelemetry_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull DeviceMetrics_class_data_ =
        DeviceMetrics::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
DeviceMetrics::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DeviceMetrics_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DeviceMetrics_class_data_.tc_table);
  return DeviceMetrics_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2>
DeviceMetrics::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DeviceMetrics, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    DeviceMetrics_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::DeviceMetrics>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 battery_level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceMetrics, _impl_.battery_level_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(DeviceMetrics, _impl_.battery_level_)}},
    // optional float voltage = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(DeviceMetrics, _impl_.voltage_)}},
    // optional float channel_utilization = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(DeviceMetrics, _impl_.channel_utilization_)}},
    // optional float air_util_tx = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(DeviceMetrics, _impl_.air_util_tx_)}},
    // optional uint32 uptime_seconds = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceMetrics, _impl_.uptime_seconds_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(DeviceMetrics, _impl_.uptime_seconds_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 battery_level = 1;
    {PROTOBUF_FIELD_OFFSET(DeviceMetrics, _impl_.battery_level_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional float voltage = 2;
    {PROTOBUF_FIELD_OFFSET(DeviceMetrics, _impl_.voltage_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float channel_utilization = 3;
    {PROTOBUF_FIELD_OFFSET(DeviceMetrics, _impl_.channel_utilization_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float air_util_tx = 4;
    {PROTOBUF_FIELD_OFFSET(DeviceMetrics, _impl_.air_util_tx_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional uint32 uptime_seconds = 5;
    {PROTOBUF_FIELD_OFFSET(DeviceMetrics, _impl_.uptime_seconds_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void DeviceMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.DeviceMetrics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    ::memset(&_impl_.battery_level_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.uptime_seconds_) -
        reinterpret_cast<char*>(&_impl_.battery_level_)) + sizeof(_impl_.uptime_seconds_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DeviceMetrics::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DeviceMetrics& this_ = static_cast<const DeviceMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DeviceMetrics::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DeviceMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.DeviceMetrics)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional uint32 battery_level = 1;
  if ((cached_has_bits & 0x00000001U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this_._internal_battery_level(), target);
  }

  // optional float voltage = 2;
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this_._internal_voltage(), target);
  }

  // optional float channel_utilization = 3;
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this_._internal_channel_utilization(), target);
  }

  // optional float air_util_tx = 4;
  if ((cached_has_bits & 0x00000008U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this_._internal_air_util_tx(), target);
  }

  // optional uint32 uptime_seconds = 5;
  if ((cached_has_bits & 0x00000010U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this_._internal_uptime_seconds(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.DeviceMetrics)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DeviceMetrics::ByteSizeLong(const MessageLite& base) {
  const DeviceMetrics& this_ = static_cast<const DeviceMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DeviceMetrics::ByteSizeLong() const {
  const DeviceMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.DeviceMetrics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x0000000eU & cached_has_bits) * 5;
  if ((cached_has_bits & 0x00000011U) != 0) {
    // optional uint32 battery_level = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_battery_level());
    }
    // optional uint32 uptime_seconds = 5;
    if ((cached_has_bits & 0x00000010U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_uptime_seconds());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DeviceMetrics::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DeviceMetrics*>(&to_msg);
  auto& from = static_cast<const DeviceMetrics&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.DeviceMetrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _this->_impl_.battery_level_ = from._impl_.battery_level_;
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _this->_impl_.voltage_ = from._impl_.voltage_;
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      _this->_impl_.channel_utilization_ = from._impl_.channel_utilization_;
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      _this->_impl_.air_util_tx_ = from._impl_.air_util_tx_;
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      _this->_impl_.uptime_seconds_ = from._impl_.uptime_seconds_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceMetrics::CopyFrom(const DeviceMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.DeviceMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DeviceMetrics::InternalSwap(DeviceMetrics* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceMetrics, _impl_.uptime_seconds_)
      + sizeof(DeviceMetrics::_impl_.uptime_seconds_)
      - PROTOBUF_FIELD_OFFSET(DeviceMetrics, _impl_.battery_level_)>(
          reinterpret_cast<char*>(&_impl_.battery_level_),
          reinterpret_cast<char*>(&other->_impl_.battery_level_));
}

::google::protobuf::Metadata DeviceMetrics::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EnvironmentMetrics::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<EnvironmentMetrics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_._has_bits_);
};

EnvironmentMetrics::EnvironmentMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EnvironmentMetrics_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.EnvironmentMetrics)
}
EnvironmentMetrics::EnvironmentMetrics(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const EnvironmentMetrics& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EnvironmentMetrics_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE EnvironmentMetrics::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void EnvironmentMetrics::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, temperature_),
           0,
           offsetof(Impl_, soil_temperature_) -
               offsetof(Impl_, temperature_) +
               sizeof(Impl_::soil_temperature_));
}
EnvironmentMetrics::~EnvironmentMetrics() {
  // @@protoc_insertion_point(destructor:meshtastic.EnvironmentMetrics)
  SharedDtor(*this);
}
inline void EnvironmentMetrics::SharedDtor(MessageLite& self) {
  EnvironmentMetrics& this_ = static_cast<EnvironmentMetrics&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL EnvironmentMetrics::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) EnvironmentMetrics(arena);
}
constexpr auto EnvironmentMetrics::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(EnvironmentMetrics),
                                            alignof(EnvironmentMetrics));
}
constexpr auto EnvironmentMetrics::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_EnvironmentMetrics_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &EnvironmentMetrics::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<EnvironmentMetrics>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &EnvironmentMetrics::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<EnvironmentMetrics>(), &EnvironmentMetrics::ByteSizeLong,
              &EnvironmentMetrics::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_._cached_size_),
          false,
      },
      &EnvironmentMetrics::kDescriptorMethods,
      &descriptor_table_meshtastic_2ftelemetry_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull EnvironmentMetrics_class_data_ =
        EnvironmentMetrics::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
EnvironmentMetrics::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&EnvironmentMetrics_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(EnvironmentMetrics_class_data_.tc_table);
  return EnvironmentMetrics_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 22, 0, 0, 2>
EnvironmentMetrics::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_._has_bits_),
    0, // no _extensions_
    22, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4290772992,  // skipmap
    offsetof(decltype(_table_), field_entries),
    22,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    EnvironmentMetrics_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::EnvironmentMetrics>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional float temperature = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.temperature_)}},
    // optional float relative_humidity = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.relative_humidity_)}},
    // optional float barometric_pressure = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.barometric_pressure_)}},
    // optional float gas_resistance = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.gas_resistance_)}},
    // optional float voltage = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.voltage_)}},
    // optional float current = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.current_)}},
    // optional uint32 iaq = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EnvironmentMetrics, _impl_.iaq_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.iaq_)}},
    // optional float distance = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 7, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.distance_)}},
    // optional float lux = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 8, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.lux_)}},
    // optional float white_lux = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 9, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.white_lux_)}},
    // optional float ir_lux = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 10, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.ir_lux_)}},
    // optional float uv_lux = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 11, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.uv_lux_)}},
    // optional uint32 wind_direction = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EnvironmentMetrics, _impl_.wind_direction_), 12>(),
     {104, 12, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.wind_direction_)}},
    // optional float wind_speed = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 13, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.wind_speed_)}},
    // optional float weight = 15;
    {::_pbi::TcParser::FastF32S1,
     {125, 14, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.weight_)}},
    // optional float wind_gust = 16;
    {::_pbi::TcParser::FastF32S2,
     {389, 15, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.wind_gust_)}},
    // optional float wind_lull = 17;
    {::_pbi::TcParser::FastF32S2,
     {397, 16, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.wind_lull_)}},
    // optional float radiation = 18;
    {::_pbi::TcParser::FastF32S2,
     {405, 17, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.radiation_)}},
    // optional float rainfall_1h = 19;
    {::_pbi::TcParser::FastF32S2,
     {413, 18, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.rainfall_1h_)}},
    // optional float rainfall_24h = 20;
    {::_pbi::TcParser::FastF32S2,
     {421, 19, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.rainfall_24h_)}},
    // optional uint32 soil_moisture = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 20, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.soil_moisture_)}},
    // optional float soil_temperature = 22;
    {::_pbi::TcParser::FastF32S2,
     {437, 21, 0, PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.soil_temperature_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional float temperature = 1;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.temperature_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float relative_humidity = 2;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.relative_humidity_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float barometric_pressure = 3;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.barometric_pressure_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float gas_resistance = 4;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.gas_resistance_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float voltage = 5;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.voltage_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float current = 6;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.current_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional uint32 iaq = 7;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.iaq_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional float distance = 8;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.distance_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float lux = 9;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.lux_), _Internal::kHasBitsOffset + 8, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float white_lux = 10;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.white_lux_), _Internal::kHasBitsOffset + 9, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ir_lux = 11;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.ir_lux_), _Internal::kHasBitsOffset + 10, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float uv_lux = 12;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.uv_lux_), _Internal::kHasBitsOffset + 11, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional uint32 wind_direction = 13;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.wind_direction_), _Internal::kHasBitsOffset + 12, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional float wind_speed = 14;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.wind_speed_), _Internal::kHasBitsOffset + 13, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float weight = 15;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.weight_), _Internal::kHasBitsOffset + 14, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float wind_gust = 16;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.wind_gust_), _Internal::kHasBitsOffset + 15, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float wind_lull = 17;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.wind_lull_), _Internal::kHasBitsOffset + 16, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float radiation = 18;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.radiation_), _Internal::kHasBitsOffset + 17, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float rainfall_1h = 19;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.rainfall_1h_), _Internal::kHasBitsOffset + 18, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float rainfall_24h = 20;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.rainfall_24h_), _Internal::kHasBitsOffset + 19, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional uint32 soil_moisture = 21;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.soil_moisture_), _Internal::kHasBitsOffset + 20, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional float soil_temperature = 22;
    {PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.soil_temperature_), _Internal::kHasBitsOffset + 21, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void EnvironmentMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.EnvironmentMetrics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    ::memset(&_impl_.temperature_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.distance_) -
        reinterpret_cast<char*>(&_impl_.temperature_)) + sizeof(_impl_.distance_));
  }
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    ::memset(&_impl_.lux_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.wind_gust_) -
        reinterpret_cast<char*>(&_impl_.lux_)) + sizeof(_impl_.wind_gust_));
  }
  if ((cached_has_bits & 0x003f0000U) != 0) {
    ::memset(&_impl_.wind_lull_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.soil_temperature_) -
        reinterpret_cast<char*>(&_impl_.wind_lull_)) + sizeof(_impl_.soil_temperature_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL EnvironmentMetrics::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const EnvironmentMetrics& this_ = static_cast<const EnvironmentMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL EnvironmentMetrics::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const EnvironmentMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.EnvironmentMetrics)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional float temperature = 1;
  if ((cached_has_bits & 0x00000001U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this_._internal_temperature(), target);
  }

  // optional float relative_humidity = 2;
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this_._internal_relative_humidity(), target);
  }

  // optional float barometric_pressure = 3;
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this_._internal_barometric_pressure(), target);
  }

  // optional float gas_resistance = 4;
  if ((cached_has_bits & 0x00000008U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this_._internal_gas_resistance(), target);
  }

  // optional float voltage = 5;
  if ((cached_has_bits & 0x00000010U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this_._internal_voltage(), target);
  }

  // optional float current = 6;
  if ((cached_has_bits & 0x00000020U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this_._internal_current(), target);
  }

  // optional uint32 iaq = 7;
  if ((cached_has_bits & 0x00000040U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this_._internal_iaq(), target);
  }

  // optional float distance = 8;
  if ((cached_has_bits & 0x00000080U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this_._internal_distance(), target);
  }

  // optional float lux = 9;
  if ((cached_has_bits & 0x00000100U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this_._internal_lux(), target);
  }

  // optional float white_lux = 10;
  if ((cached_has_bits & 0x00000200U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this_._internal_white_lux(), target);
  }

  // optional float ir_lux = 11;
  if ((cached_has_bits & 0x00000400U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this_._internal_ir_lux(), target);
  }

  // optional float uv_lux = 12;
  if ((cached_has_bits & 0x00000800U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this_._internal_uv_lux(), target);
  }

  // optional uint32 wind_direction = 13;
  if ((cached_has_bits & 0x00001000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this_._internal_wind_direction(), target);
  }

  // optional float wind_speed = 14;
  if ((cached_has_bits & 0x00002000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        14, this_._internal_wind_speed(), target);
  }

  // optional float weight = 15;
  if ((cached_has_bits & 0x00004000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        15, this_._internal_weight(), target);
  }

  // optional float wind_gust = 16;
  if ((cached_has_bits & 0x00008000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        16, this_._internal_wind_gust(), target);
  }

  // optional float wind_lull = 17;
  if ((cached_has_bits & 0x00010000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        17, this_._internal_wind_lull(), target);
  }

  // optional float radiation = 18;
  if ((cached_has_bits & 0x00020000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        18, this_._internal_radiation(), target);
  }

  // optional float rainfall_1h = 19;
  if ((cached_has_bits & 0x00040000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        19, this_._internal_rainfall_1h(), target);
  }

  // optional float rainfall_24h = 20;
  if ((cached_has_bits & 0x00080000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        20, this_._internal_rainfall_24h(), target);
  }

  // optional uint32 soil_moisture = 21;
  if ((cached_has_bits & 0x00100000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        21, this_._internal_soil_moisture(), target);
  }

  // optional float soil_temperature = 22;
  if ((cached_has_bits & 0x00200000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        22, this_._internal_soil_temperature(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.EnvironmentMetrics)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t EnvironmentMetrics::ByteSizeLong(const MessageLite& base) {
  const EnvironmentMetrics& this_ = static_cast<const EnvironmentMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t EnvironmentMetrics::ByteSizeLong() const {
  const EnvironmentMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.EnvironmentMetrics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x002f8000U & cached_has_bits) * 6;
  total_size += ::absl::popcount(0x00006fbfU & cached_has_bits) * 5;
   {
    // optional uint32 iaq = 7;
    if ((cached_has_bits & 0x00000040U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_iaq());
    }
  }
   {
    // optional uint32 wind_direction = 13;
    if ((cached_has_bits & 0x00001000U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_wind_direction());
    }
  }
   {
    // optional uint32 soil_moisture = 21;
    if ((cached_has_bits & 0x00100000U) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_soil_moisture());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void EnvironmentMetrics::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EnvironmentMetrics*>(&to_msg);
  auto& from = static_cast<const EnvironmentMetrics&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.EnvironmentMetrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _this->_impl_.temperature_ = from._impl_.temperature_;
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _this->_impl_.relative_humidity_ = from._impl_.relative_humidity_;
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      _this->_impl_.barometric_pressure_ = from._impl_.barometric_pressure_;
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      _this->_impl_.gas_resistance_ = from._impl_.gas_resistance_;
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      _this->_impl_.voltage_ = from._impl_.voltage_;
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      _this->_impl_.current_ = from._impl_.current_;
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      _this->_impl_.iaq_ = from._impl_.iaq_;
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
  }
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    if ((cached_has_bits & 0x00000100U) != 0) {
      _this->_impl_.lux_ = from._impl_.lux_;
    }
    if ((cached_has_bits & 0x00000200U) != 0) {
      _this->_impl_.white_lux_ = from._impl_.white_lux_;
    }
    if ((cached_has_bits & 0x00000400U) != 0) {
      _this->_impl_.ir_lux_ = from._impl_.ir_lux_;
    }
    if ((cached_has_bits & 0x00000800U) != 0) {
      _this->_impl_.uv_lux_ = from._impl_.uv_lux_;
    }
    if ((cached_has_bits & 0x00001000U) != 0) {
      _this->_impl_.wind_direction_ = from._impl_.wind_direction_;
    }
    if ((cached_has_bits & 0x00002000U) != 0) {
      _this->_impl_.wind_speed_ = from._impl_.wind_speed_;
    }
    if ((cached_has_bits & 0x00004000U) != 0) {
      _this->_impl_.weight_ = from._impl_.weight_;
    }
    if ((cached_has_bits & 0x00008000U) != 0) {
      _this->_impl_.wind_gust_ = from._impl_.wind_gust_;
    }
  }
  if ((cached_has_bits & 0x003f0000U) != 0) {
    if ((cached_has_bits & 0x00010000U) != 0) {
      _this->_impl_.wind_lull_ = from._impl_.wind_lull_;
    }
    if ((cached_has_bits & 0x00020000U) != 0) {
      _this->_impl_.radiation_ = from._impl_.radiation_;
    }
    if ((cached_has_bits & 0x00040000U) != 0) {
      _this->_impl_.rainfall_1h_ = from._impl_.rainfall_1h_;
    }
    if ((cached_has_bits & 0x00080000U) != 0) {
      _this->_impl_.rainfall_24h_ = from._impl_.rainfall_24h_;
    }
    if ((cached_has_bits & 0x00100000U) != 0) {
      _this->_impl_.soil_moisture_ = from._impl_.soil_moisture_;
    }
    if ((cached_has_bits & 0x00200000U) != 0) {
      _this->_impl_.soil_temperature_ = from._impl_.soil_temperature_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EnvironmentMetrics::CopyFrom(const EnvironmentMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.EnvironmentMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EnvironmentMetrics::InternalSwap(EnvironmentMetrics* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.soil_temperature_)
      + sizeof(EnvironmentMetrics::_impl_.soil_temperature_)
      - PROTOBUF_FIELD_OFFSET(EnvironmentMetrics, _impl_.temperature_)>(
          reinterpret_cast<char*>(&_impl_.temperature_),
          reinterpret_cast<char*>(&other->_impl_.temperature_));
}

::google::protobuf::Metadata EnvironmentMetrics::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PowerMetrics::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<PowerMetrics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_._has_bits_);
};

PowerMetrics::PowerMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PowerMetrics_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.PowerMetrics)
}
PowerMetrics::PowerMetrics(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const PowerMetrics& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PowerMetrics_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE PowerMetrics::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void PowerMetrics::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ch1_voltage_),
           0,
           offsetof(Impl_, ch8_current_) -
               offsetof(Impl_, ch1_voltage_) +
               sizeof(Impl_::ch8_current_));
}
PowerMetrics::~PowerMetrics() {
  // @@protoc_insertion_point(destructor:meshtastic.PowerMetrics)
  SharedDtor(*this);
}
inline void PowerMetrics::SharedDtor(MessageLite& self) {
  PowerMetrics& this_ = static_cast<PowerMetrics&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL PowerMetrics::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) PowerMetrics(arena);
}
constexpr auto PowerMetrics::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PowerMetrics),
                                            alignof(PowerMetrics));
}
constexpr auto PowerMetrics::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_PowerMetrics_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &PowerMetrics::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<PowerMetrics>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &PowerMetrics::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<PowerMetrics>(), &PowerMetrics::ByteSizeLong,
              &PowerMetrics::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_._cached_size_),
          false,
      },
      &PowerMetrics::kDescriptorMethods,
      &descriptor_table_meshtastic_2ftelemetry_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull PowerMetrics_class_data_ =
        PowerMetrics::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
PowerMetrics::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&PowerMetrics_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(PowerMetrics_class_data_.tc_table);
  return PowerMetrics_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 0, 0, 2>
PowerMetrics::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    PowerMetrics_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::PowerMetrics>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float ch8_current = 16;
    {::_pbi::TcParser::FastF32S2,
     {389, 15, 0, PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch8_current_)}},
    // optional float ch1_voltage = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch1_voltage_)}},
    // optional float ch1_current = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch1_current_)}},
    // optional float ch2_voltage = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch2_voltage_)}},
    // optional float ch2_current = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch2_current_)}},
    // optional float ch3_voltage = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch3_voltage_)}},
    // optional float ch3_current = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch3_current_)}},
    // optional float ch4_voltage = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 6, 0, PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch4_voltage_)}},
    // optional float ch4_current = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 7, 0, PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch4_current_)}},
    // optional float ch5_voltage = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 8, 0, PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch5_voltage_)}},
    // optional float ch5_current = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 9, 0, PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch5_current_)}},
    // optional float ch6_voltage = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 10, 0, PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch6_voltage_)}},
    // optional float ch6_current = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 11, 0, PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch6_current_)}},
    // optional float ch7_voltage = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 12, 0, PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch7_voltage_)}},
    // optional float ch7_current = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 13, 0, PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch7_current_)}},
    // optional float ch8_voltage = 15;
    {::_pbi::TcParser::FastF32S1,
     {125, 14, 0, PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch8_voltage_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional float ch1_voltage = 1;
    {PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch1_voltage_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ch1_current = 2;
    {PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch1_current_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ch2_voltage = 3;
    {PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch2_voltage_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ch2_current = 4;
    {PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch2_current_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ch3_voltage = 5;
    {PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch3_voltage_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ch3_current = 6;
    {PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch3_current_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ch4_voltage = 7;
    {PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch4_voltage_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ch4_current = 8;
    {PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch4_current_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ch5_voltage = 9;
    {PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch5_voltage_), _Internal::kHasBitsOffset + 8, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ch5_current = 10;
    {PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch5_current_), _Internal::kHasBitsOffset + 9, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ch6_voltage = 11;
    {PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch6_voltage_), _Internal::kHasBitsOffset + 10, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ch6_current = 12;
    {PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch6_current_), _Internal::kHasBitsOffset + 11, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ch7_voltage = 13;
    {PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch7_voltage_), _Internal::kHasBitsOffset + 12, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ch7_current = 14;
    {PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch7_current_), _Internal::kHasBitsOffset + 13, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ch8_voltage = 15;
    {PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch8_voltage_), _Internal::kHasBitsOffset + 14, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ch8_current = 16;
    {PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch8_current_), _Internal::kHasBitsOffset + 15, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void PowerMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.PowerMetrics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    ::memset(&_impl_.ch1_voltage_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ch4_current_) -
        reinterpret_cast<char*>(&_impl_.ch1_voltage_)) + sizeof(_impl_.ch4_current_));
  }
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    ::memset(&_impl_.ch5_voltage_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ch8_current_) -
        reinterpret_cast<char*>(&_impl_.ch5_voltage_)) + sizeof(_impl_.ch8_current_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL PowerMetrics::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const PowerMetrics& this_ = static_cast<const PowerMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL PowerMetrics::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const PowerMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.PowerMetrics)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional float ch1_voltage = 1;
  if ((cached_has_bits & 0x00000001U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this_._internal_ch1_voltage(), target);
  }

  // optional float ch1_current = 2;
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this_._internal_ch1_current(), target);
  }

  // optional float ch2_voltage = 3;
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this_._internal_ch2_voltage(), target);
  }

  // optional float ch2_current = 4;
  if ((cached_has_bits & 0x00000008U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this_._internal_ch2_current(), target);
  }

  // optional float ch3_voltage = 5;
  if ((cached_has_bits & 0x00000010U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this_._internal_ch3_voltage(), target);
  }

  // optional float ch3_current = 6;
  if ((cached_has_bits & 0x00000020U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this_._internal_ch3_current(), target);
  }

  // optional float ch4_voltage = 7;
  if ((cached_has_bits & 0x00000040U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this_._internal_ch4_voltage(), target);
  }

  // optional float ch4_current = 8;
  if ((cached_has_bits & 0x00000080U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this_._internal_ch4_current(), target);
  }

  // optional float ch5_voltage = 9;
  if ((cached_has_bits & 0x00000100U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this_._internal_ch5_voltage(), target);
  }

  // optional float ch5_current = 10;
  if ((cached_has_bits & 0x00000200U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this_._internal_ch5_current(), target);
  }

  // optional float ch6_voltage = 11;
  if ((cached_has_bits & 0x00000400U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this_._internal_ch6_voltage(), target);
  }

  // optional float ch6_current = 12;
  if ((cached_has_bits & 0x00000800U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this_._internal_ch6_current(), target);
  }

  // optional float ch7_voltage = 13;
  if ((cached_has_bits & 0x00001000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        13, this_._internal_ch7_voltage(), target);
  }

  // optional float ch7_current = 14;
  if ((cached_has_bits & 0x00002000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        14, this_._internal_ch7_current(), target);
  }

  // optional float ch8_voltage = 15;
  if ((cached_has_bits & 0x00004000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        15, this_._internal_ch8_voltage(), target);
  }

  // optional float ch8_current = 16;
  if ((cached_has_bits & 0x00008000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        16, this_._internal_ch8_current(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.PowerMetrics)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t PowerMetrics::ByteSizeLong(const MessageLite& base) {
  const PowerMetrics& this_ = static_cast<const PowerMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t PowerMetrics::ByteSizeLong() const {
  const PowerMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.PowerMetrics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00008000U & cached_has_bits) * 6;
  total_size += ::absl::popcount(0x00007fffU & cached_has_bits) * 5;
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void PowerMetrics::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PowerMetrics*>(&to_msg);
  auto& from = static_cast<const PowerMetrics&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.PowerMetrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _this->_impl_.ch1_voltage_ = from._impl_.ch1_voltage_;
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _this->_impl_.ch1_current_ = from._impl_.ch1_current_;
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      _this->_impl_.ch2_voltage_ = from._impl_.ch2_voltage_;
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      _this->_impl_.ch2_current_ = from._impl_.ch2_current_;
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      _this->_impl_.ch3_voltage_ = from._impl_.ch3_voltage_;
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      _this->_impl_.ch3_current_ = from._impl_.ch3_current_;
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      _this->_impl_.ch4_voltage_ = from._impl_.ch4_voltage_;
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      _this->_impl_.ch4_current_ = from._impl_.ch4_current_;
    }
  }
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    if ((cached_has_bits & 0x00000100U) != 0) {
      _this->_impl_.ch5_voltage_ = from._impl_.ch5_voltage_;
    }
    if ((cached_has_bits & 0x00000200U) != 0) {
      _this->_impl_.ch5_current_ = from._impl_.ch5_current_;
    }
    if ((cached_has_bits & 0x00000400U) != 0) {
      _this->_impl_.ch6_voltage_ = from._impl_.ch6_voltage_;
    }
    if ((cached_has_bits & 0x00000800U) != 0) {
      _this->_impl_.ch6_current_ = from._impl_.ch6_current_;
    }
    if ((cached_has_bits & 0x00001000U) != 0) {
      _this->_impl_.ch7_voltage_ = from._impl_.ch7_voltage_;
    }
    if ((cached_has_bits & 0x00002000U) != 0) {
      _this->_impl_.ch7_current_ = from._impl_.ch7_current_;
    }
    if ((cached_has_bits & 0x00004000U) != 0) {
      _this->_impl_.ch8_voltage_ = from._impl_.ch8_voltage_;
    }
    if ((cached_has_bits & 0x00008000U) != 0) {
      _this->_impl_.ch8_current_ = from._impl_.ch8_current_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PowerMetrics::CopyFrom(const PowerMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.PowerMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PowerMetrics::InternalSwap(PowerMetrics* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch8_current_)
      + sizeof(PowerMetrics::_impl_.ch8_current_)
      - PROTOBUF_FIELD_OFFSET(PowerMetrics, _impl_.ch1_voltage_)>(
          reinterpret_cast<char*>(&_impl_.ch1_voltage_),
          reinterpret_cast<char*>(&other->_impl_.ch1_voltage_));
}

::google::protobuf::Metadata PowerMetrics::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AirQualityMetrics::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AirQualityMetrics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_._has_bits_);
};

AirQualityMetrics::AirQualityMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AirQualityMetrics_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.AirQualityMetrics)
}
AirQualityMetrics::AirQualityMetrics(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const AirQualityMetrics& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AirQualityMetrics_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE AirQualityMetrics::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void AirQualityMetrics::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pm10_standard_),
           0,
           offsetof(Impl_, particles_tps_) -
               offsetof(Impl_, pm10_standard_) +
               sizeof(Impl_::particles_tps_));
}
AirQualityMetrics::~AirQualityMetrics() {
  // @@protoc_insertion_point(destructor:meshtastic.AirQualityMetrics)
  SharedDtor(*this);
}
inline void AirQualityMetrics::SharedDtor(MessageLite& self) {
  AirQualityMetrics& this_ = static_cast<AirQualityMetrics&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AirQualityMetrics::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AirQualityMetrics(arena);
}
constexpr auto AirQualityMetrics::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AirQualityMetrics),
                                            alignof(AirQualityMetrics));
}
constexpr auto AirQualityMetrics::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AirQualityMetrics_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AirQualityMetrics::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AirQualityMetrics>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AirQualityMetrics::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AirQualityMetrics>(), &AirQualityMetrics::ByteSizeLong,
              &AirQualityMetrics::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_._cached_size_),
          false,
      },
      &AirQualityMetrics::kDescriptorMethods,
      &descriptor_table_meshtastic_2ftelemetry_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AirQualityMetrics_class_data_ =
        AirQualityMetrics::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AirQualityMetrics::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AirQualityMetrics_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AirQualityMetrics_class_data_.tc_table);
  return AirQualityMetrics_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 25, 0, 0, 2>
AirQualityMetrics::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_._has_bits_),
    0, // no _extensions_
    25, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4261412864,  // skipmap
    offsetof(decltype(_table_), field_entries),
    25,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    AirQualityMetrics_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::AirQualityMetrics>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 pm10_standard = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AirQualityMetrics, _impl_.pm10_standard_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm10_standard_)}},
    // optional uint32 pm25_standard = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AirQualityMetrics, _impl_.pm25_standard_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm25_standard_)}},
    // optional uint32 pm100_standard = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AirQualityMetrics, _impl_.pm100_standard_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm100_standard_)}},
    // optional uint32 pm10_environmental = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AirQualityMetrics, _impl_.pm10_environmental_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm10_environmental_)}},
    // optional uint32 pm25_environmental = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AirQualityMetrics, _impl_.pm25_environmental_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm25_environmental_)}},
    // optional uint32 pm100_environmental = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AirQualityMetrics, _impl_.pm100_environmental_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm100_environmental_)}},
    // optional uint32 particles_03um = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AirQualityMetrics, _impl_.particles_03um_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_03um_)}},
    // optional uint32 particles_05um = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AirQualityMetrics, _impl_.particles_05um_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_05um_)}},
    // optional uint32 particles_10um = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AirQualityMetrics, _impl_.particles_10um_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_10um_)}},
    // optional uint32 particles_25um = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AirQualityMetrics, _impl_.particles_25um_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_25um_)}},
    // optional uint32 particles_50um = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AirQualityMetrics, _impl_.particles_50um_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_50um_)}},
    // optional uint32 particles_100um = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AirQualityMetrics, _impl_.particles_100um_), 11>(),
     {96, 11, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_100um_)}},
    // optional uint32 co2 = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AirQualityMetrics, _impl_.co2_), 12>(),
     {104, 12, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.co2_)}},
    // optional float co2_temperature = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 13, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.co2_temperature_)}},
    // optional float co2_humidity = 15;
    {::_pbi::TcParser::FastF32S1,
     {125, 14, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.co2_humidity_)}},
    // optional float form_formaldehyde = 16;
    {::_pbi::TcParser::FastF32S2,
     {389, 15, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.form_formaldehyde_)}},
    // optional float form_humidity = 17;
    {::_pbi::TcParser::FastF32S2,
     {397, 16, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.form_humidity_)}},
    // optional float form_temperature = 18;
    {::_pbi::TcParser::FastF32S2,
     {405, 17, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.form_temperature_)}},
    // optional uint32 pm40_standard = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 18, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm40_standard_)}},
    // optional uint32 particles_40um = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 19, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_40um_)}},
    // optional float pm_temperature = 21;
    {::_pbi::TcParser::FastF32S2,
     {429, 20, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm_temperature_)}},
    // optional float pm_humidity = 22;
    {::_pbi::TcParser::FastF32S2,
     {437, 21, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm_humidity_)}},
    // optional float pm_voc_idx = 23;
    {::_pbi::TcParser::FastF32S2,
     {445, 22, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm_voc_idx_)}},
    // optional float pm_nox_idx = 24;
    {::_pbi::TcParser::FastF32S2,
     {453, 23, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm_nox_idx_)}},
    // optional float particles_tps = 25;
    {::_pbi::TcParser::FastF32S2,
     {461, 24, 0, PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_tps_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 pm10_standard = 1;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm10_standard_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 pm25_standard = 2;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm25_standard_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 pm100_standard = 3;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm100_standard_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 pm10_environmental = 4;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm10_environmental_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 pm25_environmental = 5;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm25_environmental_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 pm100_environmental = 6;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm100_environmental_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 particles_03um = 7;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_03um_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 particles_05um = 8;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_05um_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 particles_10um = 9;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_10um_), _Internal::kHasBitsOffset + 8, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 particles_25um = 10;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_25um_), _Internal::kHasBitsOffset + 9, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 particles_50um = 11;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_50um_), _Internal::kHasBitsOffset + 10, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 particles_100um = 12;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_100um_), _Internal::kHasBitsOffset + 11, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 co2 = 13;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.co2_), _Internal::kHasBitsOffset + 12, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional float co2_temperature = 14;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.co2_temperature_), _Internal::kHasBitsOffset + 13, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float co2_humidity = 15;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.co2_humidity_), _Internal::kHasBitsOffset + 14, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float form_formaldehyde = 16;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.form_formaldehyde_), _Internal::kHasBitsOffset + 15, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float form_humidity = 17;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.form_humidity_), _Internal::kHasBitsOffset + 16, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float form_temperature = 18;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.form_temperature_), _Internal::kHasBitsOffset + 17, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional uint32 pm40_standard = 19;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm40_standard_), _Internal::kHasBitsOffset + 18, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 particles_40um = 20;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_40um_), _Internal::kHasBitsOffset + 19, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional float pm_temperature = 21;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm_temperature_), _Internal::kHasBitsOffset + 20, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float pm_humidity = 22;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm_humidity_), _Internal::kHasBitsOffset + 21, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float pm_voc_idx = 23;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm_voc_idx_), _Internal::kHasBitsOffset + 22, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float pm_nox_idx = 24;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm_nox_idx_), _Internal::kHasBitsOffset + 23, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float particles_tps = 25;
    {PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_tps_), _Internal::kHasBitsOffset + 24, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void AirQualityMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.AirQualityMetrics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    ::memset(&_impl_.pm10_standard_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.particles_05um_) -
        reinterpret_cast<char*>(&_impl_.pm10_standard_)) + sizeof(_impl_.particles_05um_));
  }
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    ::memset(&_impl_.particles_10um_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.form_formaldehyde_) -
        reinterpret_cast<char*>(&_impl_.particles_10um_)) + sizeof(_impl_.form_formaldehyde_));
  }
  if ((cached_has_bits & 0x00ff0000U) != 0) {
    ::memset(&_impl_.form_humidity_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pm_nox_idx_) -
        reinterpret_cast<char*>(&_impl_.form_humidity_)) + sizeof(_impl_.pm_nox_idx_));
  }
  _impl_.particles_tps_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AirQualityMetrics::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AirQualityMetrics& this_ = static_cast<const AirQualityMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AirQualityMetrics::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AirQualityMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.AirQualityMetrics)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional uint32 pm10_standard = 1;
  if ((cached_has_bits & 0x00000001U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this_._internal_pm10_standard(), target);
  }

  // optional uint32 pm25_standard = 2;
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this_._internal_pm25_standard(), target);
  }

  // optional uint32 pm100_standard = 3;
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_pm100_standard(), target);
  }

  // optional uint32 pm10_environmental = 4;
  if ((cached_has_bits & 0x00000008U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this_._internal_pm10_environmental(), target);
  }

  // optional uint32 pm25_environmental = 5;
  if ((cached_has_bits & 0x00000010U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this_._internal_pm25_environmental(), target);
  }

  // optional uint32 pm100_environmental = 6;
  if ((cached_has_bits & 0x00000020U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this_._internal_pm100_environmental(), target);
  }

  // optional uint32 particles_03um = 7;
  if ((cached_has_bits & 0x00000040U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this_._internal_particles_03um(), target);
  }

  // optional uint32 particles_05um = 8;
  if ((cached_has_bits & 0x00000080U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this_._internal_particles_05um(), target);
  }

  // optional uint32 particles_10um = 9;
  if ((cached_has_bits & 0x00000100U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this_._internal_particles_10um(), target);
  }

  // optional uint32 particles_25um = 10;
  if ((cached_has_bits & 0x00000200U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this_._internal_particles_25um(), target);
  }

  // optional uint32 particles_50um = 11;
  if ((cached_has_bits & 0x00000400U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this_._internal_particles_50um(), target);
  }

  // optional uint32 particles_100um = 12;
  if ((cached_has_bits & 0x00000800U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this_._internal_particles_100um(), target);
  }

  // optional uint32 co2 = 13;
  if ((cached_has_bits & 0x00001000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this_._internal_co2(), target);
  }

  // optional float co2_temperature = 14;
  if ((cached_has_bits & 0x00002000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        14, this_._internal_co2_temperature(), target);
  }

  // optional float co2_humidity = 15;
  if ((cached_has_bits & 0x00004000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        15, this_._internal_co2_humidity(), target);
  }

  // optional float form_formaldehyde = 16;
  if ((cached_has_bits & 0x00008000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        16, this_._internal_form_formaldehyde(), target);
  }

  // optional float form_humidity = 17;
  if ((cached_has_bits & 0x00010000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        17, this_._internal_form_humidity(), target);
  }

  // optional float form_temperature = 18;
  if ((cached_has_bits & 0x00020000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        18, this_._internal_form_temperature(), target);
  }

  // optional uint32 pm40_standard = 19;
  if ((cached_has_bits & 0x00040000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        19, this_._internal_pm40_standard(), target);
  }

  // optional uint32 particles_40um = 20;
  if ((cached_has_bits & 0x00080000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        20, this_._internal_particles_40um(), target);
  }

  // optional float pm_temperature = 21;
  if ((cached_has_bits & 0x00100000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        21, this_._internal_pm_temperature(), target);
  }

  // optional float pm_humidity = 22;
  if ((cached_has_bits & 0x00200000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        22, this_._internal_pm_humidity(), target);
  }

  // optional float pm_voc_idx = 23;
  if ((cached_has_bits & 0x00400000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        23, this_._internal_pm_voc_idx(), target);
  }

  // optional float pm_nox_idx = 24;
  if ((cached_has_bits & 0x00800000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        24, this_._internal_pm_nox_idx(), target);
  }

  // optional float particles_tps = 25;
  if ((cached_has_bits & 0x01000000U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        25, this_._internal_particles_tps(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.AirQualityMetrics)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AirQualityMetrics::ByteSizeLong(const MessageLite& base) {
  const AirQualityMetrics& this_ = static_cast<const AirQualityMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AirQualityMetrics::ByteSizeLong() const {
  const AirQualityMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.AirQualityMetrics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x01f38000U & cached_has_bits) * 6;
  total_size += ::absl::popcount(0x00006000U & cached_has_bits) * 5;
  if ((cached_has_bits & 0x000000ffU) != 0) {
    // optional uint32 pm10_standard = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_pm10_standard());
    }
    // optional uint32 pm25_standard = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_pm25_standard());
    }
    // optional uint32 pm100_standard = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_pm100_standard());
    }
    // optional uint32 pm10_environmental = 4;
    if ((cached_has_bits & 0x00000008U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_pm10_environmental());
    }
    // optional uint32 pm25_environmental = 5;
    if ((cached_has_bits & 0x00000010U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_pm25_environmental());
    }
    // optional uint32 pm100_environmental = 6;
    if ((cached_has_bits & 0x00000020U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_pm100_environmental());
    }
    // optional uint32 particles_03um = 7;
    if ((cached_has_bits & 0x00000040U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_particles_03um());
    }
    // optional uint32 particles_05um = 8;
    if ((cached_has_bits & 0x00000080U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_particles_05um());
    }
  }
  if ((cached_has_bits & 0x00001f00U) != 0) {
    // optional uint32 particles_10um = 9;
    if ((cached_has_bits & 0x00000100U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_particles_10um());
    }
    // optional uint32 particles_25um = 10;
    if ((cached_has_bits & 0x00000200U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_particles_25um());
    }
    // optional uint32 particles_50um = 11;
    if ((cached_has_bits & 0x00000400U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_particles_50um());
    }
    // optional uint32 particles_100um = 12;
    if ((cached_has_bits & 0x00000800U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_particles_100um());
    }
    // optional uint32 co2 = 13;
    if ((cached_has_bits & 0x00001000U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_co2());
    }
  }
  if ((cached_has_bits & 0x000c0000U) != 0) {
    // optional uint32 pm40_standard = 19;
    if ((cached_has_bits & 0x00040000U) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_pm40_standard());
    }
    // optional uint32 particles_40um = 20;
    if ((cached_has_bits & 0x00080000U) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_particles_40um());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AirQualityMetrics::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AirQualityMetrics*>(&to_msg);
  auto& from = static_cast<const AirQualityMetrics&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.AirQualityMetrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _this->_impl_.pm10_standard_ = from._impl_.pm10_standard_;
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _this->_impl_.pm25_standard_ = from._impl_.pm25_standard_;
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      _this->_impl_.pm100_standard_ = from._impl_.pm100_standard_;
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      _this->_impl_.pm10_environmental_ = from._impl_.pm10_environmental_;
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      _this->_impl_.pm25_environmental_ = from._impl_.pm25_environmental_;
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      _this->_impl_.pm100_environmental_ = from._impl_.pm100_environmental_;
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      _this->_impl_.particles_03um_ = from._impl_.particles_03um_;
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      _this->_impl_.particles_05um_ = from._impl_.particles_05um_;
    }
  }
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    if ((cached_has_bits & 0x00000100U) != 0) {
      _this->_impl_.particles_10um_ = from._impl_.particles_10um_;
    }
    if ((cached_has_bits & 0x00000200U) != 0) {
      _this->_impl_.particles_25um_ = from._impl_.particles_25um_;
    }
    if ((cached_has_bits & 0x00000400U) != 0) {
      _this->_impl_.particles_50um_ = from._impl_.particles_50um_;
    }
    if ((cached_has_bits & 0x00000800U) != 0) {
      _this->_impl_.particles_100um_ = from._impl_.particles_100um_;
    }
    if ((cached_has_bits & 0x00001000U) != 0) {
      _this->_impl_.co2_ = from._impl_.co2_;
    }
    if ((cached_has_bits & 0x00002000U) != 0) {
      _this->_impl_.co2_temperature_ = from._impl_.co2_temperature_;
    }
    if ((cached_has_bits & 0x00004000U) != 0) {
      _this->_impl_.co2_humidity_ = from._impl_.co2_humidity_;
    }
    if ((cached_has_bits & 0x00008000U) != 0) {
      _this->_impl_.form_formaldehyde_ = from._impl_.form_formaldehyde_;
    }
  }
  if ((cached_has_bits & 0x00ff0000U) != 0) {
    if ((cached_has_bits & 0x00010000U) != 0) {
      _this->_impl_.form_humidity_ = from._impl_.form_humidity_;
    }
    if ((cached_has_bits & 0x00020000U) != 0) {
      _this->_impl_.form_temperature_ = from._impl_.form_temperature_;
    }
    if ((cached_has_bits & 0x00040000U) != 0) {
      _this->_impl_.pm40_standard_ = from._impl_.pm40_standard_;
    }
    if ((cached_has_bits & 0x00080000U) != 0) {
      _this->_impl_.particles_40um_ = from._impl_.particles_40um_;
    }
    if ((cached_has_bits & 0x00100000U) != 0) {
      _this->_impl_.pm_temperature_ = from._impl_.pm_temperature_;
    }
    if ((cached_has_bits & 0x00200000U) != 0) {
      _this->_impl_.pm_humidity_ = from._impl_.pm_humidity_;
    }
    if ((cached_has_bits & 0x00400000U) != 0) {
      _this->_impl_.pm_voc_idx_ = from._impl_.pm_voc_idx_;
    }
    if ((cached_has_bits & 0x00800000U) != 0) {
      _this->_impl_.pm_nox_idx_ = from._impl_.pm_nox_idx_;
    }
  }
  if ((cached_has_bits & 0x01000000U) != 0) {
    _this->_impl_.particles_tps_ = from._impl_.particles_tps_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AirQualityMetrics::CopyFrom(const AirQualityMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.AirQualityMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AirQualityMetrics::InternalSwap(AirQualityMetrics* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.particles_tps_)
      + sizeof(AirQualityMetrics::_impl_.particles_tps_)
      - PROTOBUF_FIELD_OFFSET(AirQualityMetrics, _impl_.pm10_standard_)>(
          reinterpret_cast<char*>(&_impl_.pm10_standard_),
          reinterpret_cast<char*>(&other->_impl_.pm10_standard_));
}

::google::protobuf::Metadata AirQualityMetrics::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LocalStats::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<LocalStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LocalStats, _impl_._has_bits_);
};

LocalStats::LocalStats(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LocalStats_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.LocalStats)
}
LocalStats::LocalStats(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const LocalStats& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LocalStats_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE LocalStats::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void LocalStats::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, uptime_seconds_),
           0,
           offsetof(Impl_, heap_free_bytes_) -
               offsetof(Impl_, uptime_seconds_) +
               sizeof(Impl_::heap_free_bytes_));
}
LocalStats::~LocalStats() {
  // @@protoc_insertion_point(destructor:meshtastic.LocalStats)
  SharedDtor(*this);
}
inline void LocalStats::SharedDtor(MessageLite& self) {
  LocalStats& this_ = static_cast<LocalStats&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL LocalStats::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) LocalStats(arena);
}
constexpr auto LocalStats::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LocalStats),
                                            alignof(LocalStats));
}
constexpr auto LocalStats::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_LocalStats_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &LocalStats::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<LocalStats>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &LocalStats::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<LocalStats>(), &LocalStats::ByteSizeLong,
              &LocalStats::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(LocalStats, _impl_._cached_size_),
          false,
      },
      &LocalStats::kDescriptorMethods,
      &descriptor_table_meshtastic_2ftelemetry_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull LocalStats_class_data_ =
        LocalStats::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
LocalStats::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&LocalStats_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(LocalStats_class_data_.tc_table);
  return LocalStats_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 0, 0, 2>
LocalStats::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LocalStats, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    LocalStats_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::LocalStats>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 uptime_seconds = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LocalStats, _impl_.uptime_seconds_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.uptime_seconds_)}},
    // float channel_utilization = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.channel_utilization_)}},
    // float air_util_tx = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.air_util_tx_)}},
    // uint32 num_packets_tx = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LocalStats, _impl_.num_packets_tx_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.num_packets_tx_)}},
    // uint32 num_packets_rx = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LocalStats, _impl_.num_packets_rx_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.num_packets_rx_)}},
    // uint32 num_packets_rx_bad = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LocalStats, _impl_.num_packets_rx_bad_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.num_packets_rx_bad_)}},
    // uint32 num_online_nodes = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LocalStats, _impl_.num_online_nodes_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.num_online_nodes_)}},
    // uint32 num_total_nodes = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LocalStats, _impl_.num_total_nodes_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.num_total_nodes_)}},
    // uint32 num_rx_dupe = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LocalStats, _impl_.num_rx_dupe_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.num_rx_dupe_)}},
    // uint32 num_tx_relay = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LocalStats, _impl_.num_tx_relay_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.num_tx_relay_)}},
    // uint32 num_tx_relay_canceled = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LocalStats, _impl_.num_tx_relay_canceled_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.num_tx_relay_canceled_)}},
    // uint32 heap_total_bytes = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LocalStats, _impl_.heap_total_bytes_), 11>(),
     {96, 11, 0, PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.heap_total_bytes_)}},
    // uint32 heap_free_bytes = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LocalStats, _impl_.heap_free_bytes_), 12>(),
     {104, 12, 0, PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.heap_free_bytes_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 uptime_seconds = 1;
    {PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.uptime_seconds_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // float channel_utilization = 2;
    {PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.channel_utilization_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float air_util_tx = 3;
    {PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.air_util_tx_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // uint32 num_packets_tx = 4;
    {PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.num_packets_tx_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 num_packets_rx = 5;
    {PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.num_packets_rx_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 num_packets_rx_bad = 6;
    {PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.num_packets_rx_bad_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 num_online_nodes = 7;
    {PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.num_online_nodes_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 num_total_nodes = 8;
    {PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.num_total_nodes_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 num_rx_dupe = 9;
    {PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.num_rx_dupe_), _Internal::kHasBitsOffset + 8, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 num_tx_relay = 10;
    {PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.num_tx_relay_), _Internal::kHasBitsOffset + 9, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 num_tx_relay_canceled = 11;
    {PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.num_tx_relay_canceled_), _Internal::kHasBitsOffset + 10, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 heap_total_bytes = 12;
    {PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.heap_total_bytes_), _Internal::kHasBitsOffset + 11, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 heap_free_bytes = 13;
    {PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.heap_free_bytes_), _Internal::kHasBitsOffset + 12, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void LocalStats::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.LocalStats)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    ::memset(&_impl_.uptime_seconds_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.num_total_nodes_) -
        reinterpret_cast<char*>(&_impl_.uptime_seconds_)) + sizeof(_impl_.num_total_nodes_));
  }
  if ((cached_has_bits & 0x00001f00U) != 0) {
    ::memset(&_impl_.num_rx_dupe_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.heap_free_bytes_) -
        reinterpret_cast<char*>(&_impl_.num_rx_dupe_)) + sizeof(_impl_.heap_free_bytes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL LocalStats::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const LocalStats& this_ = static_cast<const LocalStats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL LocalStats::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const LocalStats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.LocalStats)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 uptime_seconds = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (this_._internal_uptime_seconds() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_uptime_seconds(), target);
    }
  }

  // float channel_utilization = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_channel_utilization()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          2, this_._internal_channel_utilization(), target);
    }
  }

  // float air_util_tx = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_air_util_tx()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          3, this_._internal_air_util_tx(), target);
    }
  }

  // uint32 num_packets_tx = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_num_packets_tx() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_num_packets_tx(), target);
    }
  }

  // uint32 num_packets_rx = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_num_packets_rx() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          5, this_._internal_num_packets_rx(), target);
    }
  }

  // uint32 num_packets_rx_bad = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (this_._internal_num_packets_rx_bad() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          6, this_._internal_num_packets_rx_bad(), target);
    }
  }

  // uint32 num_online_nodes = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040U) != 0) {
    if (this_._internal_num_online_nodes() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          7, this_._internal_num_online_nodes(), target);
    }
  }

  // uint32 num_total_nodes = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000080U) != 0) {
    if (this_._internal_num_total_nodes() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          8, this_._internal_num_total_nodes(), target);
    }
  }

  // uint32 num_rx_dupe = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000100U) != 0) {
    if (this_._internal_num_rx_dupe() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          9, this_._internal_num_rx_dupe(), target);
    }
  }

  // uint32 num_tx_relay = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000200U) != 0) {
    if (this_._internal_num_tx_relay() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          10, this_._internal_num_tx_relay(), target);
    }
  }

  // uint32 num_tx_relay_canceled = 11;
  if ((this_._impl_._has_bits_[0] & 0x00000400U) != 0) {
    if (this_._internal_num_tx_relay_canceled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          11, this_._internal_num_tx_relay_canceled(), target);
    }
  }

  // uint32 heap_total_bytes = 12;
  if ((this_._impl_._has_bits_[0] & 0x00000800U) != 0) {
    if (this_._internal_heap_total_bytes() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          12, this_._internal_heap_total_bytes(), target);
    }
  }

  // uint32 heap_free_bytes = 13;
  if ((this_._impl_._has_bits_[0] & 0x00001000U) != 0) {
    if (this_._internal_heap_free_bytes() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          13, this_._internal_heap_free_bytes(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.LocalStats)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t LocalStats::ByteSizeLong(const MessageLite& base) {
  const LocalStats& this_ = static_cast<const LocalStats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t LocalStats::ByteSizeLong() const {
  const LocalStats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.LocalStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    // uint32 uptime_seconds = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (this_._internal_uptime_seconds() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_uptime_seconds());
      }
    }
    // float channel_utilization = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_channel_utilization()) != 0) {
        total_size += 5;
      }
    }
    // float air_util_tx = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_air_util_tx()) != 0) {
        total_size += 5;
      }
    }
    // uint32 num_packets_tx = 4;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_num_packets_tx() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_num_packets_tx());
      }
    }
    // uint32 num_packets_rx = 5;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_num_packets_rx() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_num_packets_rx());
      }
    }
    // uint32 num_packets_rx_bad = 6;
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (this_._internal_num_packets_rx_bad() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_num_packets_rx_bad());
      }
    }
    // uint32 num_online_nodes = 7;
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (this_._internal_num_online_nodes() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_num_online_nodes());
      }
    }
    // uint32 num_total_nodes = 8;
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (this_._internal_num_total_nodes() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_num_total_nodes());
      }
    }
  }
  if ((cached_has_bits & 0x00001f00U) != 0) {
    // uint32 num_rx_dupe = 9;
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (this_._internal_num_rx_dupe() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_num_rx_dupe());
      }
    }
    // uint32 num_tx_relay = 10;
    if ((cached_has_bits & 0x00000200U) != 0) {
      if (this_._internal_num_tx_relay() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_num_tx_relay());
      }
    }
    // uint32 num_tx_relay_canceled = 11;
    if ((cached_has_bits & 0x00000400U) != 0) {
      if (this_._internal_num_tx_relay_canceled() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_num_tx_relay_canceled());
      }
    }
    // uint32 heap_total_bytes = 12;
    if ((cached_has_bits & 0x00000800U) != 0) {
      if (this_._internal_heap_total_bytes() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_heap_total_bytes());
      }
    }
    // uint32 heap_free_bytes = 13;
    if ((cached_has_bits & 0x00001000U) != 0) {
      if (this_._internal_heap_free_bytes() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_heap_free_bytes());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void LocalStats::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LocalStats*>(&to_msg);
  auto& from = static_cast<const LocalStats&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.LocalStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (from._internal_uptime_seconds() != 0) {
        _this->_impl_.uptime_seconds_ = from._impl_.uptime_seconds_;
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_channel_utilization()) != 0) {
        _this->_impl_.channel_utilization_ = from._impl_.channel_utilization_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_air_util_tx()) != 0) {
        _this->_impl_.air_util_tx_ = from._impl_.air_util_tx_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_num_packets_tx() != 0) {
        _this->_impl_.num_packets_tx_ = from._impl_.num_packets_tx_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_num_packets_rx() != 0) {
        _this->_impl_.num_packets_rx_ = from._impl_.num_packets_rx_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (from._internal_num_packets_rx_bad() != 0) {
        _this->_impl_.num_packets_rx_bad_ = from._impl_.num_packets_rx_bad_;
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (from._internal_num_online_nodes() != 0) {
        _this->_impl_.num_online_nodes_ = from._impl_.num_online_nodes_;
      }
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (from._internal_num_total_nodes() != 0) {
        _this->_impl_.num_total_nodes_ = from._impl_.num_total_nodes_;
      }
    }
  }
  if ((cached_has_bits & 0x00001f00U) != 0) {
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (from._internal_num_rx_dupe() != 0) {
        _this->_impl_.num_rx_dupe_ = from._impl_.num_rx_dupe_;
      }
    }
    if ((cached_has_bits & 0x00000200U) != 0) {
      if (from._internal_num_tx_relay() != 0) {
        _this->_impl_.num_tx_relay_ = from._impl_.num_tx_relay_;
      }
    }
    if ((cached_has_bits & 0x00000400U) != 0) {
      if (from._internal_num_tx_relay_canceled() != 0) {
        _this->_impl_.num_tx_relay_canceled_ = from._impl_.num_tx_relay_canceled_;
      }
    }
    if ((cached_has_bits & 0x00000800U) != 0) {
      if (from._internal_heap_total_bytes() != 0) {
        _this->_impl_.heap_total_bytes_ = from._impl_.heap_total_bytes_;
      }
    }
    if ((cached_has_bits & 0x00001000U) != 0) {
      if (from._internal_heap_free_bytes() != 0) {
        _this->_impl_.heap_free_bytes_ = from._impl_.heap_free_bytes_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LocalStats::CopyFrom(const LocalStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.LocalStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LocalStats::InternalSwap(LocalStats* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.heap_free_bytes_)
      + sizeof(LocalStats::_impl_.heap_free_bytes_)
      - PROTOBUF_FIELD_OFFSET(LocalStats, _impl_.uptime_seconds_)>(
          reinterpret_cast<char*>(&_impl_.uptime_seconds_),
          reinterpret_cast<char*>(&other->_impl_.uptime_seconds_));
}

::google::protobuf::Metadata LocalStats::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HealthMetrics::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<HealthMetrics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(HealthMetrics, _impl_._has_bits_);
};

HealthMetrics::HealthMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, HealthMetrics_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.HealthMetrics)
}
HealthMetrics::HealthMetrics(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const HealthMetrics& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, HealthMetrics_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE HealthMetrics::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void HealthMetrics::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, heart_bpm_),
           0,
           offsetof(Impl_, temperature_) -
               offsetof(Impl_, heart_bpm_) +
               sizeof(Impl_::temperature_));
}
HealthMetrics::~HealthMetrics() {
  // @@protoc_insertion_point(destructor:meshtastic.HealthMetrics)
  SharedDtor(*this);
}
inline void HealthMetrics::SharedDtor(MessageLite& self) {
  HealthMetrics& this_ = static_cast<HealthMetrics&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL HealthMetrics::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) HealthMetrics(arena);
}
constexpr auto HealthMetrics::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(HealthMetrics),
                                            alignof(HealthMetrics));
}
constexpr auto HealthMetrics::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_HealthMetrics_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &HealthMetrics::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<HealthMetrics>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &HealthMetrics::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<HealthMetrics>(), &HealthMetrics::ByteSizeLong,
              &HealthMetrics::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(HealthMetrics, _impl_._cached_size_),
          false,
      },
      &HealthMetrics::kDescriptorMethods,
      &descriptor_table_meshtastic_2ftelemetry_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull HealthMetrics_class_data_ =
        HealthMetrics::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
HealthMetrics::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&HealthMetrics_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(HealthMetrics_class_data_.tc_table);
  return HealthMetrics_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2>
HealthMetrics::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HealthMetrics, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    HealthMetrics_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::HealthMetrics>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 heart_bpm = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HealthMetrics, _impl_.heart_bpm_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(HealthMetrics, _impl_.heart_bpm_)}},
    // optional uint32 spO2 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HealthMetrics, _impl_.spo2_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(HealthMetrics, _impl_.spo2_)}},
    // optional float temperature = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(HealthMetrics, _impl_.temperature_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 heart_bpm = 1;
    {PROTOBUF_FIELD_OFFSET(HealthMetrics, _impl_.heart_bpm_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 spO2 = 2;
    {PROTOBUF_FIELD_OFFSET(HealthMetrics, _impl_.spo2_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional float temperature = 3;
    {PROTOBUF_FIELD_OFFSET(HealthMetrics, _impl_.temperature_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void HealthMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.HealthMetrics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    ::memset(&_impl_.heart_bpm_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.temperature_) -
        reinterpret_cast<char*>(&_impl_.heart_bpm_)) + sizeof(_impl_.temperature_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL HealthMetrics::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const HealthMetrics& this_ = static_cast<const HealthMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL HealthMetrics::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const HealthMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.HealthMetrics)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional uint32 heart_bpm = 1;
  if ((cached_has_bits & 0x00000001U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this_._internal_heart_bpm(), target);
  }

  // optional uint32 spO2 = 2;
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this_._internal_spo2(), target);
  }

  // optional float temperature = 3;
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this_._internal_temperature(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.HealthMetrics)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t HealthMetrics::ByteSizeLong(const MessageLite& base) {
  const HealthMetrics& this_ = static_cast<const HealthMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t HealthMetrics::ByteSizeLong() const {
  const HealthMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.HealthMetrics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000004U & cached_has_bits) * 5;
  if ((cached_has_bits & 0x00000003U) != 0) {
    // optional uint32 heart_bpm = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_heart_bpm());
    }
    // optional uint32 spO2 = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_spo2());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void HealthMetrics::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HealthMetrics*>(&to_msg);
  auto& from = static_cast<const HealthMetrics&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.HealthMetrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _this->_impl_.heart_bpm_ = from._impl_.heart_bpm_;
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _this->_impl_.spo2_ = from._impl_.spo2_;
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      _this->_impl_.temperature_ = from._impl_.temperature_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthMetrics::CopyFrom(const HealthMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.HealthMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HealthMetrics::InternalSwap(HealthMetrics* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthMetrics, _impl_.temperature_)
      + sizeof(HealthMetrics::_impl_.temperature_)
      - PROTOBUF_FIELD_OFFSET(HealthMetrics, _impl_.heart_bpm_)>(
          reinterpret_cast<char*>(&_impl_.heart_bpm_),
          reinterpret_cast<char*>(&other->_impl_.heart_bpm_));
}

::google::protobuf::Metadata HealthMetrics::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HostMetrics::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<HostMetrics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_._has_bits_);
};

HostMetrics::HostMetrics(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, HostMetrics_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.HostMetrics)
}
PROTOBUF_NDEBUG_INLINE HostMetrics::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::meshtastic::HostMetrics& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        user_string_(arena, from.user_string_) {}

HostMetrics::HostMetrics(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const HostMetrics& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, HostMetrics_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HostMetrics* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, freemem_bytes_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, freemem_bytes_),
           offsetof(Impl_, load15_) -
               offsetof(Impl_, freemem_bytes_) +
               sizeof(Impl_::load15_));

  // @@protoc_insertion_point(copy_constructor:meshtastic.HostMetrics)
}
PROTOBUF_NDEBUG_INLINE HostMetrics::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        user_string_(arena) {}

inline void HostMetrics::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, freemem_bytes_),
           0,
           offsetof(Impl_, load15_) -
               offsetof(Impl_, freemem_bytes_) +
               sizeof(Impl_::load15_));
}
HostMetrics::~HostMetrics() {
  // @@protoc_insertion_point(destructor:meshtastic.HostMetrics)
  SharedDtor(*this);
}
inline void HostMetrics::SharedDtor(MessageLite& self) {
  HostMetrics& this_ = static_cast<HostMetrics&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.user_string_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL HostMetrics::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) HostMetrics(arena);
}
constexpr auto HostMetrics::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(HostMetrics),
                                            alignof(HostMetrics));
}
constexpr auto HostMetrics::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_HostMetrics_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &HostMetrics::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<HostMetrics>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &HostMetrics::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<HostMetrics>(), &HostMetrics::ByteSizeLong,
              &HostMetrics::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_._cached_size_),
          false,
      },
      &HostMetrics::kDescriptorMethods,
      &descriptor_table_meshtastic_2ftelemetry_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull HostMetrics_class_data_ =
        HostMetrics::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
HostMetrics::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&HostMetrics_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(HostMetrics_class_data_.tc_table);
  return HostMetrics_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 50, 2>
HostMetrics::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    HostMetrics_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::HostMetrics>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 uptime_seconds = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HostMetrics, _impl_.uptime_seconds_), 3>(),
     {8, 3, 0, PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.uptime_seconds_)}},
    // uint64 freemem_bytes = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HostMetrics, _impl_.freemem_bytes_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.freemem_bytes_)}},
    // uint64 diskfree1_bytes = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HostMetrics, _impl_.diskfree1_bytes_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.diskfree1_bytes_)}},
    // optional uint64 diskfree2_bytes = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HostMetrics, _impl_.diskfree2_bytes_), 5>(),
     {32, 5, 0, PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.diskfree2_bytes_)}},
    // optional uint64 diskfree3_bytes = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HostMetrics, _impl_.diskfree3_bytes_), 6>(),
     {40, 6, 0, PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.diskfree3_bytes_)}},
    // uint32 load1 = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HostMetrics, _impl_.load1_), 4>(),
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.load1_)}},
    // uint32 load5 = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HostMetrics, _impl_.load5_), 7>(),
     {56, 7, 0, PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.load5_)}},
    // uint32 load15 = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HostMetrics, _impl_.load15_), 8>(),
     {64, 8, 0, PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.load15_)}},
    // optional string user_string = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 0, 0, PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.user_string_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 uptime_seconds = 1;
    {PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.uptime_seconds_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint64 freemem_bytes = 2;
    {PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.freemem_bytes_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // uint64 diskfree1_bytes = 3;
    {PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.diskfree1_bytes_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 diskfree2_bytes = 4;
    {PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.diskfree2_bytes_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 diskfree3_bytes = 5;
    {PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.diskfree3_bytes_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // uint32 load1 = 6;
    {PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.load1_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 load5 = 7;
    {PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.load5_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 load15 = 8;
    {PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.load15_), _Internal::kHasBitsOffset + 8, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string user_string = 9;
    {PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.user_string_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\0\0\0\0\0\0\0\0\13\0\0\0\0\0\0"
    "meshtastic.HostMetrics"
    "user_string"
  }},
};
PROTOBUF_NOINLINE void HostMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.HostMetrics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.user_string_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x000000feU) != 0) {
    ::memset(&_impl_.freemem_bytes_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.load5_) -
        reinterpret_cast<char*>(&_impl_.freemem_bytes_)) + sizeof(_impl_.load5_));
  }
  _impl_.load15_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL HostMetrics::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const HostMetrics& this_ = static_cast<const HostMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL HostMetrics::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const HostMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.HostMetrics)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 uptime_seconds = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_uptime_seconds() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_uptime_seconds(), target);
    }
  }

  // uint64 freemem_bytes = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_freemem_bytes() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          2, this_._internal_freemem_bytes(), target);
    }
  }

  // uint64 diskfree1_bytes = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_diskfree1_bytes() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          3, this_._internal_diskfree1_bytes(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional uint64 diskfree2_bytes = 4;
  if ((cached_has_bits & 0x00000020U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this_._internal_diskfree2_bytes(), target);
  }

  // optional uint64 diskfree3_bytes = 5;
  if ((cached_has_bits & 0x00000040U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this_._internal_diskfree3_bytes(), target);
  }

  // uint32 load1 = 6;
  if ((cached_has_bits & 0x00000010U) != 0) {
    if (this_._internal_load1() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          6, this_._internal_load1(), target);
    }
  }

  // uint32 load5 = 7;
  if ((cached_has_bits & 0x00000080U) != 0) {
    if (this_._internal_load5() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          7, this_._internal_load5(), target);
    }
  }

  // uint32 load15 = 8;
  if ((cached_has_bits & 0x00000100U) != 0) {
    if (this_._internal_load15() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          8, this_._internal_load15(), target);
    }
  }

  // optional string user_string = 9;
  if ((cached_has_bits & 0x00000001U) != 0) {
    const ::std::string& _s = this_._internal_user_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "meshtastic.HostMetrics.user_string");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.HostMetrics)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t HostMetrics::ByteSizeLong(const MessageLite& base) {
  const HostMetrics& this_ = static_cast<const HostMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t HostMetrics::ByteSizeLong() const {
  const HostMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.HostMetrics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    // optional string user_string = 9;
    if ((cached_has_bits & 0x00000001U) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_user_string());
    }
    // uint64 freemem_bytes = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_freemem_bytes() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_freemem_bytes());
      }
    }
    // uint64 diskfree1_bytes = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_diskfree1_bytes() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_diskfree1_bytes());
      }
    }
    // uint32 uptime_seconds = 1;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_uptime_seconds() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_uptime_seconds());
      }
    }
    // uint32 load1 = 6;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_load1() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_load1());
      }
    }
    // optional uint64 diskfree2_bytes = 4;
    if ((cached_has_bits & 0x00000020U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_diskfree2_bytes());
    }
    // optional uint64 diskfree3_bytes = 5;
    if ((cached_has_bits & 0x00000040U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_diskfree3_bytes());
    }
    // uint32 load5 = 7;
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (this_._internal_load5() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_load5());
      }
    }
  }
   {
    // uint32 load15 = 8;
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (this_._internal_load15() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_load15());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void HostMetrics::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HostMetrics*>(&to_msg);
  auto& from = static_cast<const HostMetrics&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.HostMetrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _this->_internal_set_user_string(from._internal_user_string());
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_freemem_bytes() != 0) {
        _this->_impl_.freemem_bytes_ = from._impl_.freemem_bytes_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_diskfree1_bytes() != 0) {
        _this->_impl_.diskfree1_bytes_ = from._impl_.diskfree1_bytes_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_uptime_seconds() != 0) {
        _this->_impl_.uptime_seconds_ = from._impl_.uptime_seconds_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_load1() != 0) {
        _this->_impl_.load1_ = from._impl_.load1_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      _this->_impl_.diskfree2_bytes_ = from._impl_.diskfree2_bytes_;
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      _this->_impl_.diskfree3_bytes_ = from._impl_.diskfree3_bytes_;
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (from._internal_load5() != 0) {
        _this->_impl_.load5_ = from._impl_.load5_;
      }
    }
  }
  if ((cached_has_bits & 0x00000100U) != 0) {
    if (from._internal_load15() != 0) {
      _this->_impl_.load15_ = from._impl_.load15_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HostMetrics::CopyFrom(const HostMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.HostMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HostMetrics::InternalSwap(HostMetrics* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_string_, &other->_impl_.user_string_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.load15_)
      + sizeof(HostMetrics::_impl_.load15_)
      - PROTOBUF_FIELD_OFFSET(HostMetrics, _impl_.freemem_bytes_)>(
          reinterpret_cast<char*>(&_impl_.freemem_bytes_),
          reinterpret_cast<char*>(&other->_impl_.freemem_bytes_));
}

::google::protobuf::Metadata HostMetrics::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Telemetry::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Telemetry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Telemetry, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::meshtastic::Telemetry, _impl_._oneof_case_);
};

void Telemetry::set_allocated_device_metrics(::meshtastic::DeviceMetrics* PROTOBUF_NULLABLE device_metrics) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_variant();
  if (device_metrics) {
    ::google::protobuf::Arena* submessage_arena = device_metrics->GetArena();
    if (message_arena != submessage_arena) {
      device_metrics = ::google::protobuf::internal::GetOwnedMessage(message_arena, device_metrics, submessage_arena);
    }
    set_has_device_metrics();
    _impl_.variant_.device_metrics_ = device_metrics;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Telemetry.device_metrics)
}
void Telemetry::set_allocated_environment_metrics(::meshtastic::EnvironmentMetrics* PROTOBUF_NULLABLE environment_metrics) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_variant();
  if (environment_metrics) {
    ::google::protobuf::Arena* submessage_arena = environment_metrics->GetArena();
    if (message_arena != submessage_arena) {
      environment_metrics = ::google::protobuf::internal::GetOwnedMessage(message_arena, environment_metrics, submessage_arena);
    }
    set_has_environment_metrics();
    _impl_.variant_.environment_metrics_ = environment_metrics;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Telemetry.environment_metrics)
}
void Telemetry::set_allocated_air_quality_metrics(::meshtastic::AirQualityMetrics* PROTOBUF_NULLABLE air_quality_metrics) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_variant();
  if (air_quality_metrics) {
    ::google::protobuf::Arena* submessage_arena = air_quality_metrics->GetArena();
    if (message_arena != submessage_arena) {
      air_quality_metrics = ::google::protobuf::internal::GetOwnedMessage(message_arena, air_quality_metrics, submessage_arena);
    }
    set_has_air_quality_metrics();
    _impl_.variant_.air_quality_metrics_ = air_quality_metrics;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Telemetry.air_quality_metrics)
}
void Telemetry::set_allocated_power_metrics(::meshtastic::PowerMetrics* PROTOBUF_NULLABLE power_metrics) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_variant();
  if (power_metrics) {
    ::google::protobuf::Arena* submessage_arena = power_metrics->GetArena();
    if (message_arena != submessage_arena) {
      power_metrics = ::google::protobuf::internal::GetOwnedMessage(message_arena, power_metrics, submessage_arena);
    }
    set_has_power_metrics();
    _impl_.variant_.power_metrics_ = power_metrics;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Telemetry.power_metrics)
}
void Telemetry::set_allocated_local_stats(::meshtastic::LocalStats* PROTOBUF_NULLABLE local_stats) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_variant();
  if (local_stats) {
    ::google::protobuf::Arena* submessage_arena = local_stats->GetArena();
    if (message_arena != submessage_arena) {
      local_stats = ::google::protobuf::internal::GetOwnedMessage(message_arena, local_stats, submessage_arena);
    }
    set_has_local_stats();
    _impl_.variant_.local_stats_ = local_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Telemetry.local_stats)
}
void Telemetry::set_allocated_health_metrics(::meshtastic::HealthMetrics* PROTOBUF_NULLABLE health_metrics) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_variant();
  if (health_metrics) {
    ::google::protobuf::Arena* submessage_arena = health_metrics->GetArena();
    if (message_arena != submessage_arena) {
      health_metrics = ::google::protobuf::internal::GetOwnedMessage(message_arena, health_metrics, submessage_arena);
    }
    set_has_health_metrics();
    _impl_.variant_.health_metrics_ = health_metrics;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Telemetry.health_metrics)
}
void Telemetry::set_allocated_host_metrics(::meshtastic::HostMetrics* PROTOBUF_NULLABLE host_metrics) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_variant();
  if (host_metrics) {
    ::google::protobuf::Arena* submessage_arena = host_metrics->GetArena();
    if (message_arena != submessage_arena) {
      host_metrics = ::google::protobuf::internal::GetOwnedMessage(message_arena, host_metrics, submessage_arena);
    }
    set_has_host_metrics();
    _impl_.variant_.host_metrics_ = host_metrics;
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Telemetry.host_metrics)
}
Telemetry::Telemetry(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Telemetry_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.Telemetry)
}
PROTOBUF_NDEBUG_INLINE Telemetry::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::meshtastic::Telemetry& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        variant_{},
        _oneof_case_{from._oneof_case_[0]} {}

Telemetry::Telemetry(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Telemetry& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Telemetry_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Telemetry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.time_ = from._impl_.time_;
  switch (variant_case()) {
    case VARIANT_NOT_SET:
      break;
      case kDeviceMetrics:
        _impl_.variant_.device_metrics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.variant_.device_metrics_);
        break;
      case kEnvironmentMetrics:
        _impl_.variant_.environment_metrics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.variant_.environment_metrics_);
        break;
      case kAirQualityMetrics:
        _impl_.variant_.air_quality_metrics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.variant_.air_quality_metrics_);
        break;
      case kPowerMetrics:
        _impl_.variant_.power_metrics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.variant_.power_metrics_);
        break;
      case kLocalStats:
        _impl_.variant_.local_stats_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.variant_.local_stats_);
        break;
      case kHealthMetrics:
        _impl_.variant_.health_metrics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.variant_.health_metrics_);
        break;
      case kHostMetrics:
        _impl_.variant_.host_metrics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.variant_.host_metrics_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:meshtastic.Telemetry)
}
PROTOBUF_NDEBUG_INLINE Telemetry::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        variant_{},
        _oneof_case_{} {}

inline void Telemetry::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.time_ = {};
}
Telemetry::~Telemetry() {
  // @@protoc_insertion_point(destructor:meshtastic.Telemetry)
  SharedDtor(*this);
}
inline void Telemetry::SharedDtor(MessageLite& self) {
  Telemetry& this_ = static_cast<Telemetry&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_variant()) {
    this_.clear_variant();
  }
  this_._impl_.~Impl_();
}

void Telemetry::clear_variant() {
// @@protoc_insertion_point(one_of_clear_start:meshtastic.Telemetry)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (variant_case()) {
    case kDeviceMetrics: {
      if (GetArena() == nullptr) {
        delete _impl_.variant_.device_metrics_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.variant_.device_metrics_);
      }
      break;
    }
    case kEnvironmentMetrics: {
      if (GetArena() == nullptr) {
        delete _impl_.variant_.environment_metrics_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.variant_.environment_metrics_);
      }
      break;
    }
    case kAirQualityMetrics: {
      if (GetArena() == nullptr) {
        delete _impl_.variant_.air_quality_metrics_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.variant_.air_quality_metrics_);
      }
      break;
    }
    case kPowerMetrics: {
      if (GetArena() == nullptr) {
        delete _impl_.variant_.power_metrics_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.variant_.power_metrics_);
      }
      break;
    }
    case kLocalStats: {
      if (GetArena() == nullptr) {
        delete _impl_.variant_.local_stats_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.variant_.local_stats_);
      }
      break;
    }
    case kHealthMetrics: {
      if (GetArena() == nullptr) {
        delete _impl_.variant_.health_metrics_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.variant_.health_metrics_);
      }
      break;
    }
    case kHostMetrics: {
      if (GetArena() == nullptr) {
        delete _impl_.variant_.host_metrics_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.variant_.host_metrics_);
      }
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VARIANT_NOT_SET;
}


inline void* PROTOBUF_NONNULL Telemetry::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Telemetry(arena);
}
constexpr auto Telemetry::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Telemetry),
                                            alignof(Telemetry));
}
constexpr auto Telemetry::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Telemetry_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Telemetry::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Telemetry>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Telemetry::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Telemetry>(), &Telemetry::ByteSizeLong,
              &Telemetry::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Telemetry, _impl_._cached_size_),
          false,
      },
      &Telemetry::kDescriptorMethods,
      &descriptor_table_meshtastic_2ftelemetry_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Telemetry_class_data_ =
        Telemetry::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Telemetry::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Telemetry_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Telemetry_class_data_.tc_table);
  return Telemetry_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 8, 7, 0, 2>
Telemetry::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Telemetry, _impl_._has_bits_),
    0, // no _extensions_
    8, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    7,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Telemetry_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::Telemetry>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // fixed32 time = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // fixed32 time = 1;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.time_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // .meshtastic.DeviceMetrics device_metrics = 2;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.variant_.device_metrics_), _Internal::kOneofCaseOffset + 0, 0, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.EnvironmentMetrics environment_metrics = 3;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.variant_.environment_metrics_), _Internal::kOneofCaseOffset + 0, 1, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.AirQualityMetrics air_quality_metrics = 4;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.variant_.air_quality_metrics_), _Internal::kOneofCaseOffset + 0, 2, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.PowerMetrics power_metrics = 5;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.variant_.power_metrics_), _Internal::kOneofCaseOffset + 0, 3, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.LocalStats local_stats = 6;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.variant_.local_stats_), _Internal::kOneofCaseOffset + 0, 4, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.HealthMetrics health_metrics = 7;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.variant_.health_metrics_), _Internal::kOneofCaseOffset + 0, 5, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.HostMetrics host_metrics = 8;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.variant_.host_metrics_), _Internal::kOneofCaseOffset + 0, 6, (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::meshtastic::DeviceMetrics>()},
      {::_pbi::TcParser::GetTable<::meshtastic::EnvironmentMetrics>()},
      {::_pbi::TcParser::GetTable<::meshtastic::AirQualityMetrics>()},
      {::_pbi::TcParser::GetTable<::meshtastic::PowerMetrics>()},
      {::_pbi::TcParser::GetTable<::meshtastic::LocalStats>()},
      {::_pbi::TcParser::GetTable<::meshtastic::HealthMetrics>()},
      {::_pbi::TcParser::GetTable<::meshtastic::HostMetrics>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void Telemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.Telemetry)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_ = 0u;
  clear_variant();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Telemetry::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Telemetry& this_ = static_cast<const Telemetry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Telemetry::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Telemetry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.Telemetry)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // fixed32 time = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (this_._internal_time() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
          1, this_._internal_time(), target);
    }
  }

  switch (this_.variant_case()) {
    case kDeviceMetrics: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.variant_.device_metrics_, this_._impl_.variant_.device_metrics_->GetCachedSize(), target,
          stream);
      break;
    }
    case kEnvironmentMetrics: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *this_._impl_.variant_.environment_metrics_, this_._impl_.variant_.environment_metrics_->GetCachedSize(), target,
          stream);
      break;
    }
    case kAirQualityMetrics: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *this_._impl_.variant_.air_quality_metrics_, this_._impl_.variant_.air_quality_metrics_->GetCachedSize(), target,
          stream);
      break;
    }
    case kPowerMetrics: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *this_._impl_.variant_.power_metrics_, this_._impl_.variant_.power_metrics_->GetCachedSize(), target,
          stream);
      break;
    }
    case kLocalStats: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *this_._impl_.variant_.local_stats_, this_._impl_.variant_.local_stats_->GetCachedSize(), target,
          stream);
      break;
    }
    case kHealthMetrics: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, *this_._impl_.variant_.health_metrics_, this_._impl_.variant_.health_metrics_->GetCachedSize(), target,
          stream);
      break;
    }
    case kHostMetrics: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, *this_._impl_.variant_.host_metrics_, this_._impl_.variant_.host_metrics_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.Telemetry)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Telemetry::ByteSizeLong(const MessageLite& base) {
  const Telemetry& this_ = static_cast<const Telemetry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Telemetry::ByteSizeLong() const {
  const Telemetry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.Telemetry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // fixed32 time = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (this_._internal_time() != 0) {
        total_size += 5;
      }
    }
  }
  switch (this_.variant_case()) {
    // .meshtastic.DeviceMetrics device_metrics = 2;
    case kDeviceMetrics: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.variant_.device_metrics_);
      break;
    }
    // .meshtastic.EnvironmentMetrics environment_metrics = 3;
    case kEnvironmentMetrics: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.variant_.environment_metrics_);
      break;
    }
    // .meshtastic.AirQualityMetrics air_quality_metrics = 4;
    case kAirQualityMetrics: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.variant_.air_quality_metrics_);
      break;
    }
    // .meshtastic.PowerMetrics power_metrics = 5;
    case kPowerMetrics: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.variant_.power_metrics_);
      break;
    }
    // .meshtastic.LocalStats local_stats = 6;
    case kLocalStats: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.variant_.local_stats_);
      break;
    }
    // .meshtastic.HealthMetrics health_metrics = 7;
    case kHealthMetrics: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.variant_.health_metrics_);
      break;
    }
    // .meshtastic.HostMetrics host_metrics = 8;
    case kHostMetrics: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.variant_.host_metrics_);
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Telemetry::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Telemetry*>(&to_msg);
  auto& from = static_cast<const Telemetry&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.Telemetry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    if (from._internal_time() != 0) {
      _this->_impl_.time_ = from._impl_.time_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_variant();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kDeviceMetrics: {
        if (oneof_needs_init) {
          _this->_impl_.variant_.device_metrics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.variant_.device_metrics_);
        } else {
          _this->_impl_.variant_.device_metrics_->MergeFrom(*from._impl_.variant_.device_metrics_);
        }
        break;
      }
      case kEnvironmentMetrics: {
        if (oneof_needs_init) {
          _this->_impl_.variant_.environment_metrics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.variant_.environment_metrics_);
        } else {
          _this->_impl_.variant_.environment_metrics_->MergeFrom(*from._impl_.variant_.environment_metrics_);
        }
        break;
      }
      case kAirQualityMetrics: {
        if (oneof_needs_init) {
          _this->_impl_.variant_.air_quality_metrics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.variant_.air_quality_metrics_);
        } else {
          _this->_impl_.variant_.air_quality_metrics_->MergeFrom(*from._impl_.variant_.air_quality_metrics_);
        }
        break;
      }
      case kPowerMetrics: {
        if (oneof_needs_init) {
          _this->_impl_.variant_.power_metrics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.variant_.power_metrics_);
        } else {
          _this->_impl_.variant_.power_metrics_->MergeFrom(*from._impl_.variant_.power_metrics_);
        }
        break;
      }
      case kLocalStats: {
        if (oneof_needs_init) {
          _this->_impl_.variant_.local_stats_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.variant_.local_stats_);
        } else {
          _this->_impl_.variant_.local_stats_->MergeFrom(*from._impl_.variant_.local_stats_);
        }
        break;
      }
      case kHealthMetrics: {
        if (oneof_needs_init) {
          _this->_impl_.variant_.health_metrics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.variant_.health_metrics_);
        } else {
          _this->_impl_.variant_.health_metrics_->MergeFrom(*from._impl_.variant_.health_metrics_);
        }
        break;
      }
      case kHostMetrics: {
        if (oneof_needs_init) {
          _this->_impl_.variant_.host_metrics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.variant_.host_metrics_);
        } else {
          _this->_impl_.variant_.host_metrics_->MergeFrom(*from._impl_.variant_.host_metrics_);
        }
        break;
      }
      case VARIANT_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Telemetry::CopyFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Telemetry::InternalSwap(Telemetry* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.time_, other->_impl_.time_);
  swap(_impl_.variant_, other->_impl_.variant_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Telemetry::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Nau7802Config::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Nau7802Config>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Nau7802Config, _impl_._has_bits_);
};

Nau7802Config::Nau7802Config(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Nau7802Config_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.Nau7802Config)
}
Nau7802Config::Nau7802Config(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Nau7802Config& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Nau7802Config_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE Nau7802Config::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Nau7802Config::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, zerooffset_),
           0,
           offsetof(Impl_, calibrationfactor_) -
               offsetof(Impl_, zerooffset_) +
               sizeof(Impl_::calibrationfactor_));
}
Nau7802Config::~Nau7802Config() {
  // @@protoc_insertion_point(destructor:meshtastic.Nau7802Config)
  SharedDtor(*this);
}
inline void Nau7802Config::SharedDtor(MessageLite& self) {
  Nau7802Config& this_ = static_cast<Nau7802Config&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Nau7802Config::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Nau7802Config(arena);
}
constexpr auto Nau7802Config::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Nau7802Config),
                                            alignof(Nau7802Config));
}
constexpr auto Nau7802Config::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Nau7802Config_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Nau7802Config::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Nau7802Config>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Nau7802Config::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Nau7802Config>(), &Nau7802Config::ByteSizeLong,
              &Nau7802Config::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Nau7802Config, _impl_._cached_size_),
          false,
      },
      &Nau7802Config::kDescriptorMethods,
      &descriptor_table_meshtastic_2ftelemetry_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Nau7802Config_class_data_ =
        Nau7802Config::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Nau7802Config::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Nau7802Config_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Nau7802Config_class_data_.tc_table);
  return Nau7802Config_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2>
Nau7802Config::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Nau7802Config, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Nau7802Config_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::Nau7802Config>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float calibrationFactor = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(Nau7802Config, _impl_.calibrationfactor_)}},
    // int32 zeroOffset = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Nau7802Config, _impl_.zerooffset_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Nau7802Config, _impl_.zerooffset_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 zeroOffset = 1;
    {PROTOBUF_FIELD_OFFSET(Nau7802Config, _impl_.zerooffset_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // float calibrationFactor = 2;
    {PROTOBUF_FIELD_OFFSET(Nau7802Config, _impl_.calibrationfactor_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Nau7802Config::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.Nau7802Config)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    ::memset(&_impl_.zerooffset_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.calibrationfactor_) -
        reinterpret_cast<char*>(&_impl_.zerooffset_)) + sizeof(_impl_.calibrationfactor_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Nau7802Config::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Nau7802Config& this_ = static_cast<const Nau7802Config&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Nau7802Config::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Nau7802Config& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.Nau7802Config)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 zeroOffset = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (this_._internal_zerooffset() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_zerooffset(), target);
    }
  }

  // float calibrationFactor = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_calibrationfactor()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          2, this_._internal_calibrationfactor(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.Nau7802Config)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Nau7802Config::ByteSizeLong(const MessageLite& base) {
  const Nau7802Config& this_ = static_cast<const Nau7802Config&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Nau7802Config::ByteSizeLong() const {
  const Nau7802Config& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.Nau7802Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    // int32 zeroOffset = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (this_._internal_zerooffset() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_zerooffset());
      }
    }
    // float calibrationFactor = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_calibrationfactor()) != 0) {
        total_size += 5;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Nau7802Config::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Nau7802Config*>(&to_msg);
  auto& from = static_cast<const Nau7802Config&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.Nau7802Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (from._internal_zerooffset() != 0) {
        _this->_impl_.zerooffset_ = from._impl_.zerooffset_;
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_calibrationfactor()) != 0) {
        _this->_impl_.calibrationfactor_ = from._impl_.calibrationfactor_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Nau7802Config::CopyFrom(const Nau7802Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.Nau7802Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Nau7802Config::InternalSwap(Nau7802Config* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Nau7802Config, _impl_.calibrationfactor_)
      + sizeof(Nau7802Config::_impl_.calibrationfactor_)
      - PROTOBUF_FIELD_OFFSET(Nau7802Config, _impl_.zerooffset_)>(
          reinterpret_cast<char*>(&_impl_.zerooffset_),
          reinterpret_cast<char*>(&other->_impl_.zerooffset_));
}

::google::protobuf::Metadata Nau7802Config::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace meshtastic
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_meshtastic_2ftelemetry_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
