// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: meshtastic/device_ui.proto
// Protobuf C++ Version: 6.32.0

#include "meshtastic/device_ui.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace meshtastic {

inline constexpr NodeHighlight::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        node_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        chat_switch_{false},
        position_switch_{false},
        telemetry_switch_{false},
        iaq_switch_{false} {}

template <typename>
PROTOBUF_CONSTEXPR NodeHighlight::NodeHighlight(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(NodeHighlight_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NodeHighlightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeHighlightDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeHighlightDefaultTypeInternal() {}
  union {
    NodeHighlight _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeHighlightDefaultTypeInternal _NodeHighlight_default_instance_;

inline constexpr NodeFilter::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        node_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        unknown_switch_{false},
        offline_switch_{false},
        public_key_switch_{false},
        position_switch_{false},
        hops_away_{0},
        channel_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NodeFilter::NodeFilter(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(NodeFilter_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NodeFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeFilterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeFilterDefaultTypeInternal() {}
  union {
    NodeFilter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeFilterDefaultTypeInternal _NodeFilter_default_instance_;

inline constexpr GeoPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        zoom_{0},
        latitude_{0},
        longitude_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GeoPoint::GeoPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(GeoPoint_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GeoPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeoPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeoPointDefaultTypeInternal() {}
  union {
    GeoPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeoPointDefaultTypeInternal _GeoPoint_default_instance_;

inline constexpr Map::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        style_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        home_{nullptr},
        follow_gps_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Map::Map(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Map_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapDefaultTypeInternal() {}
  union {
    Map _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapDefaultTypeInternal _Map_default_instance_;

inline constexpr DeviceUIConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        calibration_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        node_filter_{nullptr},
        node_highlight_{nullptr},
        map_data_{nullptr},
        version_{0u},
        screen_brightness_{0u},
        screen_timeout_{0u},
        pin_code_{0u},
        screen_lock_{false},
        settings_lock_{false},
        alert_enabled_{false},
        banner_enabled_{false},
        theme_{static_cast< ::meshtastic::Theme >(0)},
        ring_tone_id_{0u},
        language_{static_cast< ::meshtastic::Language >(0)},
        compass_mode_{static_cast< ::meshtastic::CompassMode >(0)},
        screen_rgb_color_{0u},
        is_clockface_analog_{false} {}

template <typename>
PROTOBUF_CONSTEXPR DeviceUIConfig::DeviceUIConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DeviceUIConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DeviceUIConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceUIConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceUIConfigDefaultTypeInternal() {}
  union {
    DeviceUIConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceUIConfigDefaultTypeInternal _DeviceUIConfig_default_instance_;
}  // namespace meshtastic
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_meshtastic_2fdevice_5fui_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_meshtastic_2fdevice_5fui_2eproto = nullptr;
const ::uint32_t
    TableStruct_meshtastic_2fdevice_5fui_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_._has_bits_),
        21, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.screen_brightness_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.screen_timeout_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.screen_lock_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.settings_lock_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.pin_code_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.theme_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.alert_enabled_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.banner_enabled_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.ring_tone_id_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.language_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.node_filter_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.node_highlight_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.calibration_data_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.map_data_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.compass_mode_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.screen_rgb_color_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::DeviceUIConfig, _impl_.is_clockface_analog_),
        4,
        5,
        6,
        8,
        9,
        7,
        12,
        10,
        11,
        13,
        14,
        1,
        2,
        0,
        3,
        15,
        16,
        17,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::NodeFilter, _impl_._has_bits_),
        10, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::NodeFilter, _impl_.unknown_switch_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::NodeFilter, _impl_.offline_switch_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::NodeFilter, _impl_.public_key_switch_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::NodeFilter, _impl_.hops_away_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::NodeFilter, _impl_.position_switch_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::NodeFilter, _impl_.node_name_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::NodeFilter, _impl_.channel_),
        1,
        2,
        3,
        5,
        4,
        0,
        6,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::NodeHighlight, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::NodeHighlight, _impl_.chat_switch_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::NodeHighlight, _impl_.position_switch_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::NodeHighlight, _impl_.telemetry_switch_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::NodeHighlight, _impl_.iaq_switch_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::NodeHighlight, _impl_.node_name_),
        1,
        2,
        3,
        4,
        0,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::GeoPoint, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::GeoPoint, _impl_.zoom_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::GeoPoint, _impl_.latitude_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::GeoPoint, _impl_.longitude_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::Map, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::Map, _impl_.home_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Map, _impl_.style_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::Map, _impl_.follow_gps_),
        1,
        0,
        2,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::meshtastic::DeviceUIConfig)},
        {39, sizeof(::meshtastic::NodeFilter)},
        {56, sizeof(::meshtastic::NodeHighlight)},
        {69, sizeof(::meshtastic::GeoPoint)},
        {78, sizeof(::meshtastic::Map)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::meshtastic::_DeviceUIConfig_default_instance_._instance,
    &::meshtastic::_NodeFilter_default_instance_._instance,
    &::meshtastic::_NodeHighlight_default_instance_._instance,
    &::meshtastic::_GeoPoint_default_instance_._instance,
    &::meshtastic::_Map_default_instance_._instance,
};
const char descriptor_table_protodef_meshtastic_2fdevice_5fui_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\032meshtastic/device_ui.proto\022\nmeshtastic"
    "\"\244\004\n\016DeviceUIConfig\022\017\n\007version\030\001 \001(\r\022\031\n\021"
    "screen_brightness\030\002 \001(\r\022\026\n\016screen_timeou"
    "t\030\003 \001(\r\022\023\n\013screen_lock\030\004 \001(\010\022\025\n\rsettings"
    "_lock\030\005 \001(\010\022\020\n\010pin_code\030\006 \001(\r\022 \n\005theme\030\007"
    " \001(\0162\021.meshtastic.Theme\022\025\n\ralert_enabled"
    "\030\010 \001(\010\022\026\n\016banner_enabled\030\t \001(\010\022\024\n\014ring_t"
    "one_id\030\n \001(\r\022&\n\010language\030\013 \001(\0162\024.meshtas"
    "tic.Language\022+\n\013node_filter\030\014 \001(\0132\026.mesh"
    "tastic.NodeFilter\0221\n\016node_highlight\030\r \001("
    "\0132\031.meshtastic.NodeHighlight\022\030\n\020calibrat"
    "ion_data\030\016 \001(\014\022!\n\010map_data\030\017 \001(\0132\017.mesht"
    "astic.Map\022-\n\014compass_mode\030\020 \001(\0162\027.meshta"
    "stic.CompassMode\022\030\n\020screen_rgb_color\030\021 \001"
    "(\r\022\033\n\023is_clockface_analog\030\022 \001(\010\"\247\001\n\nNode"
    "Filter\022\026\n\016unknown_switch\030\001 \001(\010\022\026\n\016offlin"
    "e_switch\030\002 \001(\010\022\031\n\021public_key_switch\030\003 \001("
    "\010\022\021\n\thops_away\030\004 \001(\005\022\027\n\017position_switch\030"
    "\005 \001(\010\022\021\n\tnode_name\030\006 \001(\t\022\017\n\007channel\030\007 \001("
    "\005\"~\n\rNodeHighlight\022\023\n\013chat_switch\030\001 \001(\010\022"
    "\027\n\017position_switch\030\002 \001(\010\022\030\n\020telemetry_sw"
    "itch\030\003 \001(\010\022\022\n\niaq_switch\030\004 \001(\010\022\021\n\tnode_n"
    "ame\030\005 \001(\t\"=\n\010GeoPoint\022\014\n\004zoom\030\001 \001(\005\022\020\n\010l"
    "atitude\030\002 \001(\005\022\021\n\tlongitude\030\003 \001(\005\"L\n\003Map\022"
    "\"\n\004home\030\001 \001(\0132\024.meshtastic.GeoPoint\022\r\n\005s"
    "tyle\030\002 \001(\t\022\022\n\nfollow_gps\030\003 \001(\010*>\n\013Compas"
    "sMode\022\013\n\007DYNAMIC\020\000\022\016\n\nFIXED_RING\020\001\022\022\n\016FR"
    "EEZE_HEADING\020\002*%\n\005Theme\022\010\n\004DARK\020\000\022\t\n\005LIG"
    "HT\020\001\022\007\n\003RED\020\002*\264\002\n\010Language\022\013\n\007ENGLISH\020\000\022"
    "\n\n\006FRENCH\020\001\022\n\n\006GERMAN\020\002\022\013\n\007ITALIAN\020\003\022\016\n\n"
    "PORTUGUESE\020\004\022\013\n\007SPANISH\020\005\022\013\n\007SWEDISH\020\006\022\013"
    "\n\007FINNISH\020\007\022\n\n\006POLISH\020\010\022\013\n\007TURKISH\020\t\022\013\n\007"
    "SERBIAN\020\n\022\013\n\007RUSSIAN\020\013\022\t\n\005DUTCH\020\014\022\t\n\005GRE"
    "EK\020\r\022\r\n\tNORWEGIAN\020\016\022\r\n\tSLOVENIAN\020\017\022\r\n\tUK"
    "RAINIAN\020\020\022\r\n\tBULGARIAN\020\021\022\t\n\005CZECH\020\022\022\026\n\022S"
    "IMPLIFIED_CHINESE\020\036\022\027\n\023TRADITIONAL_CHINE"
    "SE\020\037Bc\n\023com.geeksville.meshB\016DeviceUIPro"
    "tosZ\"github.com/meshtastic/go/generated\252"
    "\002\024Meshtastic.Protobufs\272\002\000b\006proto3"
};
static ::absl::once_flag descriptor_table_meshtastic_2fdevice_5fui_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_meshtastic_2fdevice_5fui_2eproto = {
    false,
    false,
    1553,
    descriptor_table_protodef_meshtastic_2fdevice_5fui_2eproto,
    "meshtastic/device_ui.proto",
    &descriptor_table_meshtastic_2fdevice_5fui_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_meshtastic_2fdevice_5fui_2eproto::offsets,
    file_level_enum_descriptors_meshtastic_2fdevice_5fui_2eproto,
    file_level_service_descriptors_meshtastic_2fdevice_5fui_2eproto,
};
namespace meshtastic {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CompassMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fdevice_5fui_2eproto);
  return file_level_enum_descriptors_meshtastic_2fdevice_5fui_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t CompassMode_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Theme_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fdevice_5fui_2eproto);
  return file_level_enum_descriptors_meshtastic_2fdevice_5fui_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t Theme_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Language_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_meshtastic_2fdevice_5fui_2eproto);
  return file_level_enum_descriptors_meshtastic_2fdevice_5fui_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t Language_internal_data_[] = {
    1245184u, 32u, 6144u, };
// ===================================================================

class DeviceUIConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<DeviceUIConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_._has_bits_);
};

DeviceUIConfig::DeviceUIConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DeviceUIConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.DeviceUIConfig)
}
PROTOBUF_NDEBUG_INLINE DeviceUIConfig::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::meshtastic::DeviceUIConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        calibration_data_(arena, from.calibration_data_) {}

DeviceUIConfig::DeviceUIConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DeviceUIConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DeviceUIConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DeviceUIConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.node_filter_ = ((cached_has_bits & 0x00000002U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.node_filter_)
                : nullptr;
  _impl_.node_highlight_ = ((cached_has_bits & 0x00000004U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.node_highlight_)
                : nullptr;
  _impl_.map_data_ = ((cached_has_bits & 0x00000008U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.map_data_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, version_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, version_),
           offsetof(Impl_, is_clockface_analog_) -
               offsetof(Impl_, version_) +
               sizeof(Impl_::is_clockface_analog_));

  // @@protoc_insertion_point(copy_constructor:meshtastic.DeviceUIConfig)
}
PROTOBUF_NDEBUG_INLINE DeviceUIConfig::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        calibration_data_(arena) {}

inline void DeviceUIConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, node_filter_),
           0,
           offsetof(Impl_, is_clockface_analog_) -
               offsetof(Impl_, node_filter_) +
               sizeof(Impl_::is_clockface_analog_));
}
DeviceUIConfig::~DeviceUIConfig() {
  // @@protoc_insertion_point(destructor:meshtastic.DeviceUIConfig)
  SharedDtor(*this);
}
inline void DeviceUIConfig::SharedDtor(MessageLite& self) {
  DeviceUIConfig& this_ = static_cast<DeviceUIConfig&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.calibration_data_.Destroy();
  delete this_._impl_.node_filter_;
  delete this_._impl_.node_highlight_;
  delete this_._impl_.map_data_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DeviceUIConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DeviceUIConfig(arena);
}
constexpr auto DeviceUIConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DeviceUIConfig),
                                            alignof(DeviceUIConfig));
}
constexpr auto DeviceUIConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DeviceUIConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DeviceUIConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DeviceUIConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DeviceUIConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DeviceUIConfig>(), &DeviceUIConfig::ByteSizeLong,
              &DeviceUIConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_._cached_size_),
          false,
      },
      &DeviceUIConfig::kDescriptorMethods,
      &descriptor_table_meshtastic_2fdevice_5fui_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull DeviceUIConfig_class_data_ =
        DeviceUIConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
DeviceUIConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DeviceUIConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DeviceUIConfig_class_data_.tc_table);
  return DeviceUIConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 18, 3, 0, 2>
DeviceUIConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_._has_bits_),
    0, // no _extensions_
    18, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294705152,  // skipmap
    offsetof(decltype(_table_), field_entries),
    18,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    DeviceUIConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::DeviceUIConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 version = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceUIConfig, _impl_.version_), 4>(),
     {8, 4, 0, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.version_)}},
    // uint32 screen_brightness = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceUIConfig, _impl_.screen_brightness_), 5>(),
     {16, 5, 0, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.screen_brightness_)}},
    // uint32 screen_timeout = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceUIConfig, _impl_.screen_timeout_), 6>(),
     {24, 6, 0, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.screen_timeout_)}},
    // bool screen_lock = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DeviceUIConfig, _impl_.screen_lock_), 8>(),
     {32, 8, 0, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.screen_lock_)}},
    // bool settings_lock = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DeviceUIConfig, _impl_.settings_lock_), 9>(),
     {40, 9, 0, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.settings_lock_)}},
    // uint32 pin_code = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceUIConfig, _impl_.pin_code_), 7>(),
     {48, 7, 0, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.pin_code_)}},
    // .meshtastic.Theme theme = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceUIConfig, _impl_.theme_), 12>(),
     {56, 12, 0, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.theme_)}},
    // bool alert_enabled = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DeviceUIConfig, _impl_.alert_enabled_), 10>(),
     {64, 10, 0, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.alert_enabled_)}},
    // bool banner_enabled = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DeviceUIConfig, _impl_.banner_enabled_), 11>(),
     {72, 11, 0, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.banner_enabled_)}},
    // uint32 ring_tone_id = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceUIConfig, _impl_.ring_tone_id_), 13>(),
     {80, 13, 0, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.ring_tone_id_)}},
    // .meshtastic.Language language = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceUIConfig, _impl_.language_), 14>(),
     {88, 14, 0, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.language_)}},
    // .meshtastic.NodeFilter node_filter = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 1, 0, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.node_filter_)}},
    // .meshtastic.NodeHighlight node_highlight = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 2, 1, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.node_highlight_)}},
    // bytes calibration_data = 14;
    {::_pbi::TcParser::FastBS1,
     {114, 0, 0, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.calibration_data_)}},
    // .meshtastic.Map map_data = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 3, 2, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.map_data_)}},
    // .meshtastic.CompassMode compass_mode = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 15, 0, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.compass_mode_)}},
    // uint32 screen_rgb_color = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 16, 0, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.screen_rgb_color_)}},
    // bool is_clockface_analog = 18;
    {::_pbi::TcParser::FastV8S2,
     {400, 17, 0, PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.is_clockface_analog_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 version = 1;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.version_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 screen_brightness = 2;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.screen_brightness_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 screen_timeout = 3;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.screen_timeout_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bool screen_lock = 4;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.screen_lock_), _Internal::kHasBitsOffset + 8, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool settings_lock = 5;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.settings_lock_), _Internal::kHasBitsOffset + 9, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // uint32 pin_code = 6;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.pin_code_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .meshtastic.Theme theme = 7;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.theme_), _Internal::kHasBitsOffset + 12, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // bool alert_enabled = 8;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.alert_enabled_), _Internal::kHasBitsOffset + 10, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool banner_enabled = 9;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.banner_enabled_), _Internal::kHasBitsOffset + 11, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // uint32 ring_tone_id = 10;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.ring_tone_id_), _Internal::kHasBitsOffset + 13, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .meshtastic.Language language = 11;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.language_), _Internal::kHasBitsOffset + 14, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .meshtastic.NodeFilter node_filter = 12;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.node_filter_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.NodeHighlight node_highlight = 13;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.node_highlight_), _Internal::kHasBitsOffset + 2, 1, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes calibration_data = 14;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.calibration_data_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // .meshtastic.Map map_data = 15;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.map_data_), _Internal::kHasBitsOffset + 3, 2, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .meshtastic.CompassMode compass_mode = 16;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.compass_mode_), _Internal::kHasBitsOffset + 15, 0, (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // uint32 screen_rgb_color = 17;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.screen_rgb_color_), _Internal::kHasBitsOffset + 16, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bool is_clockface_analog = 18;
    {PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.is_clockface_analog_), _Internal::kHasBitsOffset + 17, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::meshtastic::NodeFilter>()},
      {::_pbi::TcParser::GetTable<::meshtastic::NodeHighlight>()},
      {::_pbi::TcParser::GetTable<::meshtastic::Map>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void DeviceUIConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.DeviceUIConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.calibration_data_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.node_filter_ != nullptr);
      _impl_.node_filter_->Clear();
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(_impl_.node_highlight_ != nullptr);
      _impl_.node_highlight_->Clear();
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      ABSL_DCHECK(_impl_.map_data_ != nullptr);
      _impl_.map_data_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000f0U) != 0) {
    ::memset(&_impl_.version_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pin_code_) -
        reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.pin_code_));
  }
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    ::memset(&_impl_.screen_lock_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.compass_mode_) -
        reinterpret_cast<char*>(&_impl_.screen_lock_)) + sizeof(_impl_.compass_mode_));
  }
  if ((cached_has_bits & 0x00030000U) != 0) {
    ::memset(&_impl_.screen_rgb_color_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_clockface_analog_) -
        reinterpret_cast<char*>(&_impl_.screen_rgb_color_)) + sizeof(_impl_.is_clockface_analog_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DeviceUIConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DeviceUIConfig& this_ = static_cast<const DeviceUIConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DeviceUIConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DeviceUIConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.DeviceUIConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 version = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_version() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_version(), target);
    }
  }

  // uint32 screen_brightness = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (this_._internal_screen_brightness() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_screen_brightness(), target);
    }
  }

  // uint32 screen_timeout = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000040U) != 0) {
    if (this_._internal_screen_timeout() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_screen_timeout(), target);
    }
  }

  // bool screen_lock = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000100U) != 0) {
    if (this_._internal_screen_lock() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          4, this_._internal_screen_lock(), target);
    }
  }

  // bool settings_lock = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000200U) != 0) {
    if (this_._internal_settings_lock() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_settings_lock(), target);
    }
  }

  // uint32 pin_code = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000080U) != 0) {
    if (this_._internal_pin_code() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          6, this_._internal_pin_code(), target);
    }
  }

  // .meshtastic.Theme theme = 7;
  if ((this_._impl_._has_bits_[0] & 0x00001000U) != 0) {
    if (this_._internal_theme() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          7, this_._internal_theme(), target);
    }
  }

  // bool alert_enabled = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000400U) != 0) {
    if (this_._internal_alert_enabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          8, this_._internal_alert_enabled(), target);
    }
  }

  // bool banner_enabled = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000800U) != 0) {
    if (this_._internal_banner_enabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          9, this_._internal_banner_enabled(), target);
    }
  }

  // uint32 ring_tone_id = 10;
  if ((this_._impl_._has_bits_[0] & 0x00002000U) != 0) {
    if (this_._internal_ring_tone_id() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          10, this_._internal_ring_tone_id(), target);
    }
  }

  // .meshtastic.Language language = 11;
  if ((this_._impl_._has_bits_[0] & 0x00004000U) != 0) {
    if (this_._internal_language() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          11, this_._internal_language(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .meshtastic.NodeFilter node_filter = 12;
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, *this_._impl_.node_filter_, this_._impl_.node_filter_->GetCachedSize(), target,
        stream);
  }

  // .meshtastic.NodeHighlight node_highlight = 13;
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, *this_._impl_.node_highlight_, this_._impl_.node_highlight_->GetCachedSize(), target,
        stream);
  }

  // bytes calibration_data = 14;
  if ((cached_has_bits & 0x00000001U) != 0) {
    if (!this_._internal_calibration_data().empty()) {
      const ::std::string& _s = this_._internal_calibration_data();
      target = stream->WriteBytesMaybeAliased(14, _s, target);
    }
  }

  // .meshtastic.Map map_data = 15;
  if ((cached_has_bits & 0x00000008U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, *this_._impl_.map_data_, this_._impl_.map_data_->GetCachedSize(), target,
        stream);
  }

  // .meshtastic.CompassMode compass_mode = 16;
  if ((cached_has_bits & 0x00008000U) != 0) {
    if (this_._internal_compass_mode() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          16, this_._internal_compass_mode(), target);
    }
  }

  // uint32 screen_rgb_color = 17;
  if ((cached_has_bits & 0x00010000U) != 0) {
    if (this_._internal_screen_rgb_color() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          17, this_._internal_screen_rgb_color(), target);
    }
  }

  // bool is_clockface_analog = 18;
  if ((cached_has_bits & 0x00020000U) != 0) {
    if (this_._internal_is_clockface_analog() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          18, this_._internal_is_clockface_analog(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.DeviceUIConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DeviceUIConfig::ByteSizeLong(const MessageLite& base) {
  const DeviceUIConfig& this_ = static_cast<const DeviceUIConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DeviceUIConfig::ByteSizeLong() const {
  const DeviceUIConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.DeviceUIConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    // bytes calibration_data = 14;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_calibration_data().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_calibration_data());
      }
    }
    // .meshtastic.NodeFilter node_filter = 12;
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.node_filter_);
    }
    // .meshtastic.NodeHighlight node_highlight = 13;
    if ((cached_has_bits & 0x00000004U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.node_highlight_);
    }
    // .meshtastic.Map map_data = 15;
    if ((cached_has_bits & 0x00000008U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.map_data_);
    }
    // uint32 version = 1;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_version() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_version());
      }
    }
    // uint32 screen_brightness = 2;
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (this_._internal_screen_brightness() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_screen_brightness());
      }
    }
    // uint32 screen_timeout = 3;
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (this_._internal_screen_timeout() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_screen_timeout());
      }
    }
    // uint32 pin_code = 6;
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (this_._internal_pin_code() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_pin_code());
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    // bool screen_lock = 4;
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (this_._internal_screen_lock() != 0) {
        total_size += 2;
      }
    }
    // bool settings_lock = 5;
    if ((cached_has_bits & 0x00000200U) != 0) {
      if (this_._internal_settings_lock() != 0) {
        total_size += 2;
      }
    }
    // bool alert_enabled = 8;
    if ((cached_has_bits & 0x00000400U) != 0) {
      if (this_._internal_alert_enabled() != 0) {
        total_size += 2;
      }
    }
    // bool banner_enabled = 9;
    if ((cached_has_bits & 0x00000800U) != 0) {
      if (this_._internal_banner_enabled() != 0) {
        total_size += 2;
      }
    }
    // .meshtastic.Theme theme = 7;
    if ((cached_has_bits & 0x00001000U) != 0) {
      if (this_._internal_theme() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_theme());
      }
    }
    // uint32 ring_tone_id = 10;
    if ((cached_has_bits & 0x00002000U) != 0) {
      if (this_._internal_ring_tone_id() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_ring_tone_id());
      }
    }
    // .meshtastic.Language language = 11;
    if ((cached_has_bits & 0x00004000U) != 0) {
      if (this_._internal_language() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_language());
      }
    }
    // .meshtastic.CompassMode compass_mode = 16;
    if ((cached_has_bits & 0x00008000U) != 0) {
      if (this_._internal_compass_mode() != 0) {
        total_size += 2 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_compass_mode());
      }
    }
  }
  if ((cached_has_bits & 0x00030000U) != 0) {
    // uint32 screen_rgb_color = 17;
    if ((cached_has_bits & 0x00010000U) != 0) {
      if (this_._internal_screen_rgb_color() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                        this_._internal_screen_rgb_color());
      }
    }
    // bool is_clockface_analog = 18;
    if ((cached_has_bits & 0x00020000U) != 0) {
      if (this_._internal_is_clockface_analog() != 0) {
        total_size += 3;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DeviceUIConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DeviceUIConfig*>(&to_msg);
  auto& from = static_cast<const DeviceUIConfig&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.DeviceUIConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_calibration_data().empty()) {
        _this->_internal_set_calibration_data(from._internal_calibration_data());
      } else {
        if (_this->_impl_.calibration_data_.IsDefault()) {
          _this->_internal_set_calibration_data("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.node_filter_ != nullptr);
      if (_this->_impl_.node_filter_ == nullptr) {
        _this->_impl_.node_filter_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.node_filter_);
      } else {
        _this->_impl_.node_filter_->MergeFrom(*from._impl_.node_filter_);
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      ABSL_DCHECK(from._impl_.node_highlight_ != nullptr);
      if (_this->_impl_.node_highlight_ == nullptr) {
        _this->_impl_.node_highlight_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.node_highlight_);
      } else {
        _this->_impl_.node_highlight_->MergeFrom(*from._impl_.node_highlight_);
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      ABSL_DCHECK(from._impl_.map_data_ != nullptr);
      if (_this->_impl_.map_data_ == nullptr) {
        _this->_impl_.map_data_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.map_data_);
      } else {
        _this->_impl_.map_data_->MergeFrom(*from._impl_.map_data_);
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_version() != 0) {
        _this->_impl_.version_ = from._impl_.version_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (from._internal_screen_brightness() != 0) {
        _this->_impl_.screen_brightness_ = from._impl_.screen_brightness_;
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (from._internal_screen_timeout() != 0) {
        _this->_impl_.screen_timeout_ = from._impl_.screen_timeout_;
      }
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      if (from._internal_pin_code() != 0) {
        _this->_impl_.pin_code_ = from._impl_.pin_code_;
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00U) != 0) {
    if ((cached_has_bits & 0x00000100U) != 0) {
      if (from._internal_screen_lock() != 0) {
        _this->_impl_.screen_lock_ = from._impl_.screen_lock_;
      }
    }
    if ((cached_has_bits & 0x00000200U) != 0) {
      if (from._internal_settings_lock() != 0) {
        _this->_impl_.settings_lock_ = from._impl_.settings_lock_;
      }
    }
    if ((cached_has_bits & 0x00000400U) != 0) {
      if (from._internal_alert_enabled() != 0) {
        _this->_impl_.alert_enabled_ = from._impl_.alert_enabled_;
      }
    }
    if ((cached_has_bits & 0x00000800U) != 0) {
      if (from._internal_banner_enabled() != 0) {
        _this->_impl_.banner_enabled_ = from._impl_.banner_enabled_;
      }
    }
    if ((cached_has_bits & 0x00001000U) != 0) {
      if (from._internal_theme() != 0) {
        _this->_impl_.theme_ = from._impl_.theme_;
      }
    }
    if ((cached_has_bits & 0x00002000U) != 0) {
      if (from._internal_ring_tone_id() != 0) {
        _this->_impl_.ring_tone_id_ = from._impl_.ring_tone_id_;
      }
    }
    if ((cached_has_bits & 0x00004000U) != 0) {
      if (from._internal_language() != 0) {
        _this->_impl_.language_ = from._impl_.language_;
      }
    }
    if ((cached_has_bits & 0x00008000U) != 0) {
      if (from._internal_compass_mode() != 0) {
        _this->_impl_.compass_mode_ = from._impl_.compass_mode_;
      }
    }
  }
  if ((cached_has_bits & 0x00030000U) != 0) {
    if ((cached_has_bits & 0x00010000U) != 0) {
      if (from._internal_screen_rgb_color() != 0) {
        _this->_impl_.screen_rgb_color_ = from._impl_.screen_rgb_color_;
      }
    }
    if ((cached_has_bits & 0x00020000U) != 0) {
      if (from._internal_is_clockface_analog() != 0) {
        _this->_impl_.is_clockface_analog_ = from._impl_.is_clockface_analog_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceUIConfig::CopyFrom(const DeviceUIConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.DeviceUIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DeviceUIConfig::InternalSwap(DeviceUIConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.calibration_data_, &other->_impl_.calibration_data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.is_clockface_analog_)
      + sizeof(DeviceUIConfig::_impl_.is_clockface_analog_)
      - PROTOBUF_FIELD_OFFSET(DeviceUIConfig, _impl_.node_filter_)>(
          reinterpret_cast<char*>(&_impl_.node_filter_),
          reinterpret_cast<char*>(&other->_impl_.node_filter_));
}

::google::protobuf::Metadata DeviceUIConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NodeFilter::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<NodeFilter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_._has_bits_);
};

NodeFilter::NodeFilter(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, NodeFilter_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.NodeFilter)
}
PROTOBUF_NDEBUG_INLINE NodeFilter::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::meshtastic::NodeFilter& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        node_name_(arena, from.node_name_) {}

NodeFilter::NodeFilter(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const NodeFilter& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, NodeFilter_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  NodeFilter* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, unknown_switch_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, unknown_switch_),
           offsetof(Impl_, channel_) -
               offsetof(Impl_, unknown_switch_) +
               sizeof(Impl_::channel_));

  // @@protoc_insertion_point(copy_constructor:meshtastic.NodeFilter)
}
PROTOBUF_NDEBUG_INLINE NodeFilter::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        node_name_(arena) {}

inline void NodeFilter::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, unknown_switch_),
           0,
           offsetof(Impl_, channel_) -
               offsetof(Impl_, unknown_switch_) +
               sizeof(Impl_::channel_));
}
NodeFilter::~NodeFilter() {
  // @@protoc_insertion_point(destructor:meshtastic.NodeFilter)
  SharedDtor(*this);
}
inline void NodeFilter::SharedDtor(MessageLite& self) {
  NodeFilter& this_ = static_cast<NodeFilter&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.node_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL NodeFilter::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) NodeFilter(arena);
}
constexpr auto NodeFilter::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(NodeFilter),
                                            alignof(NodeFilter));
}
constexpr auto NodeFilter::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_NodeFilter_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &NodeFilter::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<NodeFilter>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &NodeFilter::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<NodeFilter>(), &NodeFilter::ByteSizeLong,
              &NodeFilter::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_._cached_size_),
          false,
      },
      &NodeFilter::kDescriptorMethods,
      &descriptor_table_meshtastic_2fdevice_5fui_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull NodeFilter_class_data_ =
        NodeFilter::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
NodeFilter::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&NodeFilter_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(NodeFilter_class_data_.tc_table);
  return NodeFilter_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 39, 2>
NodeFilter::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    NodeFilter_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::NodeFilter>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool unknown_switch = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NodeFilter, _impl_.unknown_switch_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_.unknown_switch_)}},
    // bool offline_switch = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NodeFilter, _impl_.offline_switch_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_.offline_switch_)}},
    // bool public_key_switch = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NodeFilter, _impl_.public_key_switch_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_.public_key_switch_)}},
    // int32 hops_away = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NodeFilter, _impl_.hops_away_), 5>(),
     {32, 5, 0, PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_.hops_away_)}},
    // bool position_switch = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NodeFilter, _impl_.position_switch_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_.position_switch_)}},
    // string node_name = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_.node_name_)}},
    // int32 channel = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NodeFilter, _impl_.channel_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_.channel_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool unknown_switch = 1;
    {PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_.unknown_switch_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool offline_switch = 2;
    {PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_.offline_switch_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool public_key_switch = 3;
    {PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_.public_key_switch_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // int32 hops_away = 4;
    {PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_.hops_away_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // bool position_switch = 5;
    {PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_.position_switch_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string node_name = 6;
    {PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_.node_name_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 channel = 7;
    {PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_.channel_), _Internal::kHasBitsOffset + 6, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\25\0\0\0\0\0\11\0"
    "meshtastic.NodeFilter"
    "node_name"
  }},
};
PROTOBUF_NOINLINE void NodeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.NodeFilter)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.node_name_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000007eU) != 0) {
    ::memset(&_impl_.unknown_switch_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.channel_) -
        reinterpret_cast<char*>(&_impl_.unknown_switch_)) + sizeof(_impl_.channel_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL NodeFilter::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const NodeFilter& this_ = static_cast<const NodeFilter&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL NodeFilter::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const NodeFilter& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.NodeFilter)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool unknown_switch = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_unknown_switch() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_unknown_switch(), target);
    }
  }

  // bool offline_switch = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_offline_switch() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this_._internal_offline_switch(), target);
    }
  }

  // bool public_key_switch = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_public_key_switch() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_public_key_switch(), target);
    }
  }

  // int32 hops_away = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000020U) != 0) {
    if (this_._internal_hops_away() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
              stream, this_._internal_hops_away(), target);
    }
  }

  // bool position_switch = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_position_switch() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_position_switch(), target);
    }
  }

  // string node_name = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_node_name().empty()) {
      const ::std::string& _s = this_._internal_node_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "meshtastic.NodeFilter.node_name");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  // int32 channel = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040U) != 0) {
    if (this_._internal_channel() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<7>(
              stream, this_._internal_channel(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.NodeFilter)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t NodeFilter::ByteSizeLong(const MessageLite& base) {
  const NodeFilter& this_ = static_cast<const NodeFilter&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t NodeFilter::ByteSizeLong() const {
  const NodeFilter& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.NodeFilter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fU) != 0) {
    // string node_name = 6;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_node_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_node_name());
      }
    }
    // bool unknown_switch = 1;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_unknown_switch() != 0) {
        total_size += 2;
      }
    }
    // bool offline_switch = 2;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_offline_switch() != 0) {
        total_size += 2;
      }
    }
    // bool public_key_switch = 3;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_public_key_switch() != 0) {
        total_size += 2;
      }
    }
    // bool position_switch = 5;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_position_switch() != 0) {
        total_size += 2;
      }
    }
    // int32 hops_away = 4;
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (this_._internal_hops_away() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_hops_away());
      }
    }
    // int32 channel = 7;
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (this_._internal_channel() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_channel());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void NodeFilter::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NodeFilter*>(&to_msg);
  auto& from = static_cast<const NodeFilter&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.NodeFilter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_node_name().empty()) {
        _this->_internal_set_node_name(from._internal_node_name());
      } else {
        if (_this->_impl_.node_name_.IsDefault()) {
          _this->_internal_set_node_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_unknown_switch() != 0) {
        _this->_impl_.unknown_switch_ = from._impl_.unknown_switch_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_offline_switch() != 0) {
        _this->_impl_.offline_switch_ = from._impl_.offline_switch_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_public_key_switch() != 0) {
        _this->_impl_.public_key_switch_ = from._impl_.public_key_switch_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_position_switch() != 0) {
        _this->_impl_.position_switch_ = from._impl_.position_switch_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (from._internal_hops_away() != 0) {
        _this->_impl_.hops_away_ = from._impl_.hops_away_;
      }
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      if (from._internal_channel() != 0) {
        _this->_impl_.channel_ = from._impl_.channel_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NodeFilter::CopyFrom(const NodeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.NodeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NodeFilter::InternalSwap(NodeFilter* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, &other->_impl_.node_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_.channel_)
      + sizeof(NodeFilter::_impl_.channel_)
      - PROTOBUF_FIELD_OFFSET(NodeFilter, _impl_.unknown_switch_)>(
          reinterpret_cast<char*>(&_impl_.unknown_switch_),
          reinterpret_cast<char*>(&other->_impl_.unknown_switch_));
}

::google::protobuf::Metadata NodeFilter::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NodeHighlight::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<NodeHighlight>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(NodeHighlight, _impl_._has_bits_);
};

NodeHighlight::NodeHighlight(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, NodeHighlight_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.NodeHighlight)
}
PROTOBUF_NDEBUG_INLINE NodeHighlight::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::meshtastic::NodeHighlight& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        node_name_(arena, from.node_name_) {}

NodeHighlight::NodeHighlight(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const NodeHighlight& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, NodeHighlight_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  NodeHighlight* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, chat_switch_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, chat_switch_),
           offsetof(Impl_, iaq_switch_) -
               offsetof(Impl_, chat_switch_) +
               sizeof(Impl_::iaq_switch_));

  // @@protoc_insertion_point(copy_constructor:meshtastic.NodeHighlight)
}
PROTOBUF_NDEBUG_INLINE NodeHighlight::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        node_name_(arena) {}

inline void NodeHighlight::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, chat_switch_),
           0,
           offsetof(Impl_, iaq_switch_) -
               offsetof(Impl_, chat_switch_) +
               sizeof(Impl_::iaq_switch_));
}
NodeHighlight::~NodeHighlight() {
  // @@protoc_insertion_point(destructor:meshtastic.NodeHighlight)
  SharedDtor(*this);
}
inline void NodeHighlight::SharedDtor(MessageLite& self) {
  NodeHighlight& this_ = static_cast<NodeHighlight&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.node_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL NodeHighlight::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) NodeHighlight(arena);
}
constexpr auto NodeHighlight::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(NodeHighlight),
                                            alignof(NodeHighlight));
}
constexpr auto NodeHighlight::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_NodeHighlight_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &NodeHighlight::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<NodeHighlight>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &NodeHighlight::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<NodeHighlight>(), &NodeHighlight::ByteSizeLong,
              &NodeHighlight::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(NodeHighlight, _impl_._cached_size_),
          false,
      },
      &NodeHighlight::kDescriptorMethods,
      &descriptor_table_meshtastic_2fdevice_5fui_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull NodeHighlight_class_data_ =
        NodeHighlight::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
NodeHighlight::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&NodeHighlight_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(NodeHighlight_class_data_.tc_table);
  return NodeHighlight_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 42, 2>
NodeHighlight::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NodeHighlight, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    NodeHighlight_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::NodeHighlight>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool chat_switch = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NodeHighlight, _impl_.chat_switch_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(NodeHighlight, _impl_.chat_switch_)}},
    // bool position_switch = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NodeHighlight, _impl_.position_switch_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(NodeHighlight, _impl_.position_switch_)}},
    // bool telemetry_switch = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NodeHighlight, _impl_.telemetry_switch_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(NodeHighlight, _impl_.telemetry_switch_)}},
    // bool iaq_switch = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NodeHighlight, _impl_.iaq_switch_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(NodeHighlight, _impl_.iaq_switch_)}},
    // string node_name = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(NodeHighlight, _impl_.node_name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool chat_switch = 1;
    {PROTOBUF_FIELD_OFFSET(NodeHighlight, _impl_.chat_switch_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool position_switch = 2;
    {PROTOBUF_FIELD_OFFSET(NodeHighlight, _impl_.position_switch_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool telemetry_switch = 3;
    {PROTOBUF_FIELD_OFFSET(NodeHighlight, _impl_.telemetry_switch_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool iaq_switch = 4;
    {PROTOBUF_FIELD_OFFSET(NodeHighlight, _impl_.iaq_switch_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string node_name = 5;
    {PROTOBUF_FIELD_OFFSET(NodeHighlight, _impl_.node_name_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\30\0\0\0\0\11\0\0"
    "meshtastic.NodeHighlight"
    "node_name"
  }},
};
PROTOBUF_NOINLINE void NodeHighlight::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.NodeHighlight)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.node_name_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.chat_switch_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.iaq_switch_) -
      reinterpret_cast<char*>(&_impl_.chat_switch_)) + sizeof(_impl_.iaq_switch_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL NodeHighlight::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const NodeHighlight& this_ = static_cast<const NodeHighlight&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL NodeHighlight::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const NodeHighlight& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.NodeHighlight)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool chat_switch = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_chat_switch() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_chat_switch(), target);
    }
  }

  // bool position_switch = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_position_switch() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this_._internal_position_switch(), target);
    }
  }

  // bool telemetry_switch = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_telemetry_switch() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_telemetry_switch(), target);
    }
  }

  // bool iaq_switch = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_iaq_switch() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          4, this_._internal_iaq_switch(), target);
    }
  }

  // string node_name = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_node_name().empty()) {
      const ::std::string& _s = this_._internal_node_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "meshtastic.NodeHighlight.node_name");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.NodeHighlight)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t NodeHighlight::ByteSizeLong(const MessageLite& base) {
  const NodeHighlight& this_ = static_cast<const NodeHighlight&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t NodeHighlight::ByteSizeLong() const {
  const NodeHighlight& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.NodeHighlight)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    // string node_name = 5;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_node_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_node_name());
      }
    }
    // bool chat_switch = 1;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_chat_switch() != 0) {
        total_size += 2;
      }
    }
    // bool position_switch = 2;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_position_switch() != 0) {
        total_size += 2;
      }
    }
    // bool telemetry_switch = 3;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_telemetry_switch() != 0) {
        total_size += 2;
      }
    }
    // bool iaq_switch = 4;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_iaq_switch() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void NodeHighlight::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NodeHighlight*>(&to_msg);
  auto& from = static_cast<const NodeHighlight&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.NodeHighlight)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_node_name().empty()) {
        _this->_internal_set_node_name(from._internal_node_name());
      } else {
        if (_this->_impl_.node_name_.IsDefault()) {
          _this->_internal_set_node_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_chat_switch() != 0) {
        _this->_impl_.chat_switch_ = from._impl_.chat_switch_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_position_switch() != 0) {
        _this->_impl_.position_switch_ = from._impl_.position_switch_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_telemetry_switch() != 0) {
        _this->_impl_.telemetry_switch_ = from._impl_.telemetry_switch_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_iaq_switch() != 0) {
        _this->_impl_.iaq_switch_ = from._impl_.iaq_switch_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NodeHighlight::CopyFrom(const NodeHighlight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.NodeHighlight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NodeHighlight::InternalSwap(NodeHighlight* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_name_, &other->_impl_.node_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeHighlight, _impl_.iaq_switch_)
      + sizeof(NodeHighlight::_impl_.iaq_switch_)
      - PROTOBUF_FIELD_OFFSET(NodeHighlight, _impl_.chat_switch_)>(
          reinterpret_cast<char*>(&_impl_.chat_switch_),
          reinterpret_cast<char*>(&other->_impl_.chat_switch_));
}

::google::protobuf::Metadata NodeHighlight::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GeoPoint::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<GeoPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GeoPoint, _impl_._has_bits_);
};

GeoPoint::GeoPoint(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GeoPoint_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.GeoPoint)
}
GeoPoint::GeoPoint(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const GeoPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GeoPoint_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE GeoPoint::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void GeoPoint::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, zoom_),
           0,
           offsetof(Impl_, longitude_) -
               offsetof(Impl_, zoom_) +
               sizeof(Impl_::longitude_));
}
GeoPoint::~GeoPoint() {
  // @@protoc_insertion_point(destructor:meshtastic.GeoPoint)
  SharedDtor(*this);
}
inline void GeoPoint::SharedDtor(MessageLite& self) {
  GeoPoint& this_ = static_cast<GeoPoint&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL GeoPoint::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) GeoPoint(arena);
}
constexpr auto GeoPoint::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GeoPoint),
                                            alignof(GeoPoint));
}
constexpr auto GeoPoint::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_GeoPoint_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &GeoPoint::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<GeoPoint>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &GeoPoint::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<GeoPoint>(), &GeoPoint::ByteSizeLong,
              &GeoPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(GeoPoint, _impl_._cached_size_),
          false,
      },
      &GeoPoint::kDescriptorMethods,
      &descriptor_table_meshtastic_2fdevice_5fui_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull GeoPoint_class_data_ =
        GeoPoint::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
GeoPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&GeoPoint_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(GeoPoint_class_data_.tc_table);
  return GeoPoint_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2>
GeoPoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GeoPoint, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    GeoPoint_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::GeoPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 zoom = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GeoPoint, _impl_.zoom_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(GeoPoint, _impl_.zoom_)}},
    // int32 latitude = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GeoPoint, _impl_.latitude_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(GeoPoint, _impl_.latitude_)}},
    // int32 longitude = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GeoPoint, _impl_.longitude_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(GeoPoint, _impl_.longitude_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 zoom = 1;
    {PROTOBUF_FIELD_OFFSET(GeoPoint, _impl_.zoom_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 latitude = 2;
    {PROTOBUF_FIELD_OFFSET(GeoPoint, _impl_.latitude_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 longitude = 3;
    {PROTOBUF_FIELD_OFFSET(GeoPoint, _impl_.longitude_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void GeoPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.GeoPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    ::memset(&_impl_.zoom_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.longitude_) -
        reinterpret_cast<char*>(&_impl_.zoom_)) + sizeof(_impl_.longitude_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL GeoPoint::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const GeoPoint& this_ = static_cast<const GeoPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL GeoPoint::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const GeoPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.GeoPoint)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 zoom = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (this_._internal_zoom() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_zoom(), target);
    }
  }

  // int32 latitude = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_latitude() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_latitude(), target);
    }
  }

  // int32 longitude = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_longitude() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_longitude(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.GeoPoint)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t GeoPoint::ByteSizeLong(const MessageLite& base) {
  const GeoPoint& this_ = static_cast<const GeoPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t GeoPoint::ByteSizeLong() const {
  const GeoPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.GeoPoint)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    // int32 zoom = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (this_._internal_zoom() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_zoom());
      }
    }
    // int32 latitude = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_latitude() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_latitude());
      }
    }
    // int32 longitude = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_longitude() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_longitude());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void GeoPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GeoPoint*>(&to_msg);
  auto& from = static_cast<const GeoPoint&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.GeoPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (from._internal_zoom() != 0) {
        _this->_impl_.zoom_ = from._impl_.zoom_;
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_latitude() != 0) {
        _this->_impl_.latitude_ = from._impl_.latitude_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_longitude() != 0) {
        _this->_impl_.longitude_ = from._impl_.longitude_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GeoPoint::CopyFrom(const GeoPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.GeoPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GeoPoint::InternalSwap(GeoPoint* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoPoint, _impl_.longitude_)
      + sizeof(GeoPoint::_impl_.longitude_)
      - PROTOBUF_FIELD_OFFSET(GeoPoint, _impl_.zoom_)>(
          reinterpret_cast<char*>(&_impl_.zoom_),
          reinterpret_cast<char*>(&other->_impl_.zoom_));
}

::google::protobuf::Metadata GeoPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Map::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Map>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Map, _impl_._has_bits_);
};

Map::Map(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Map_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.Map)
}
PROTOBUF_NDEBUG_INLINE Map::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::meshtastic::Map& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        style_(arena, from.style_) {}

Map::Map(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Map& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Map_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Map* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.home_ = ((cached_has_bits & 0x00000002U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.home_)
                : nullptr;
  _impl_.follow_gps_ = from._impl_.follow_gps_;

  // @@protoc_insertion_point(copy_constructor:meshtastic.Map)
}
PROTOBUF_NDEBUG_INLINE Map::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        style_(arena) {}

inline void Map::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, home_),
           0,
           offsetof(Impl_, follow_gps_) -
               offsetof(Impl_, home_) +
               sizeof(Impl_::follow_gps_));
}
Map::~Map() {
  // @@protoc_insertion_point(destructor:meshtastic.Map)
  SharedDtor(*this);
}
inline void Map::SharedDtor(MessageLite& self) {
  Map& this_ = static_cast<Map&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.style_.Destroy();
  delete this_._impl_.home_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Map::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Map(arena);
}
constexpr auto Map::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Map),
                                            alignof(Map));
}
constexpr auto Map::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Map_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Map::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Map>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Map::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Map>(), &Map::ByteSizeLong,
              &Map::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Map, _impl_._cached_size_),
          false,
      },
      &Map::kDescriptorMethods,
      &descriptor_table_meshtastic_2fdevice_5fui_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Map_class_data_ =
        Map::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Map::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Map_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Map_class_data_.tc_table);
  return Map_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 28, 2>
Map::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Map, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Map_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::Map>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .meshtastic.GeoPoint home = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 1, 0, PROTOBUF_FIELD_OFFSET(Map, _impl_.home_)}},
    // string style = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Map, _impl_.style_)}},
    // bool follow_gps = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Map, _impl_.follow_gps_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(Map, _impl_.follow_gps_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .meshtastic.GeoPoint home = 1;
    {PROTOBUF_FIELD_OFFSET(Map, _impl_.home_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string style = 2;
    {PROTOBUF_FIELD_OFFSET(Map, _impl_.style_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool follow_gps = 3;
    {PROTOBUF_FIELD_OFFSET(Map, _impl_.follow_gps_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::meshtastic::GeoPoint>()},
  }},
  {{
    "\16\0\5\0\0\0\0\0"
    "meshtastic.Map"
    "style"
  }},
};
PROTOBUF_NOINLINE void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.Map)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.style_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.home_ != nullptr);
      _impl_.home_->Clear();
    }
  }
  _impl_.follow_gps_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Map::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Map& this_ = static_cast<const Map&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Map::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Map& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.Map)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .meshtastic.GeoPoint home = 1;
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.home_, this_._impl_.home_->GetCachedSize(), target,
        stream);
  }

  // string style = 2;
  if ((cached_has_bits & 0x00000001U) != 0) {
    if (!this_._internal_style().empty()) {
      const ::std::string& _s = this_._internal_style();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "meshtastic.Map.style");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // bool follow_gps = 3;
  if ((cached_has_bits & 0x00000004U) != 0) {
    if (this_._internal_follow_gps() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_follow_gps(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.Map)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Map::ByteSizeLong(const MessageLite& base) {
  const Map& this_ = static_cast<const Map&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Map::ByteSizeLong() const {
  const Map& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.Map)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    // string style = 2;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_style().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_style());
      }
    }
    // .meshtastic.GeoPoint home = 1;
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.home_);
    }
    // bool follow_gps = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_follow_gps() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Map::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Map*>(&to_msg);
  auto& from = static_cast<const Map&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.Map)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_style().empty()) {
        _this->_internal_set_style(from._internal_style());
      } else {
        if (_this->_impl_.style_.IsDefault()) {
          _this->_internal_set_style("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.home_ != nullptr);
      if (_this->_impl_.home_ == nullptr) {
        _this->_impl_.home_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.home_);
      } else {
        _this->_impl_.home_->MergeFrom(*from._impl_.home_);
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_follow_gps() != 0) {
        _this->_impl_.follow_gps_ = from._impl_.follow_gps_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Map::InternalSwap(Map* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.style_, &other->_impl_.style_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Map, _impl_.follow_gps_)
      + sizeof(Map::_impl_.follow_gps_)
      - PROTOBUF_FIELD_OFFSET(Map, _impl_.home_)>(
          reinterpret_cast<char*>(&_impl_.home_),
          reinterpret_cast<char*>(&other->_impl_.home_));
}

::google::protobuf::Metadata Map::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace meshtastic
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_meshtastic_2fdevice_5fui_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
