// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: meshtastic/interdevice.proto
// Protobuf C++ Version: 6.32.0

#ifndef meshtastic_2finterdevice_2eproto_2epb_2eh
#define meshtastic_2finterdevice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6032000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_meshtastic_2finterdevice_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_meshtastic_2finterdevice_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_meshtastic_2finterdevice_2eproto;
}  // extern "C"
namespace meshtastic {
enum MessageType : int;
extern const uint32_t MessageType_internal_data_[];
class InterdeviceMessage;
struct InterdeviceMessageDefaultTypeInternal;
extern InterdeviceMessageDefaultTypeInternal _InterdeviceMessage_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull InterdeviceMessage_class_data_;
class SensorData;
struct SensorDataDefaultTypeInternal;
extern SensorDataDefaultTypeInternal _SensorData_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SensorData_class_data_;
}  // namespace meshtastic
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::meshtastic::MessageType_internal_data_>
    internal::EnumTraitsImpl::value<::meshtastic::MessageType>;
}  // namespace protobuf
}  // namespace google

namespace meshtastic {
enum MessageType : int {
  ACK = 0,
  COLLECT_INTERVAL = 160,
  BEEP_ON = 161,
  BEEP_OFF = 162,
  SHUTDOWN = 163,
  POWER_ON = 164,
  SCD41_TEMP = 176,
  SCD41_HUMIDITY = 177,
  SCD41_CO2 = 178,
  AHT20_TEMP = 179,
  AHT20_HUMIDITY = 180,
  TVOC_INDEX = 181,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t MessageType_internal_data_[];
inline constexpr MessageType MessageType_MIN =
    static_cast<MessageType>(0);
inline constexpr MessageType MessageType_MAX =
    static_cast<MessageType>(181);
inline bool MessageType_IsValid(int value) {
  return ::google::protobuf::internal::ValidateEnum(value, MessageType_internal_data_);
}
inline constexpr int MessageType_ARRAYSIZE = 181 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL MessageType_descriptor();
template <typename T>
const ::std::string& MessageType_Name(T value) {
  static_assert(::std::is_same<T, MessageType>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to MessageType_Name().");
  return ::google::protobuf::internal::NameOfEnum(MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    ::absl::string_view name, MessageType* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(MessageType_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class SensorData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.SensorData) */ {
 public:
  inline SensorData() : SensorData(nullptr) {}
  ~SensorData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SensorData* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SensorData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SensorData(::google::protobuf::internal::ConstantInitialized);

  inline SensorData(const SensorData& from) : SensorData(nullptr, from) {}
  inline SensorData(SensorData&& from) noexcept
      : SensorData(nullptr, ::std::move(from)) {}
  inline SensorData& operator=(const SensorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorData& operator=(SensorData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorData& default_instance() {
    return *reinterpret_cast<const SensorData*>(
        &_SensorData_default_instance_);
  }
  enum DataCase {
    kFloatValue = 2,
    kUint32Value = 3,
    DATA_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SensorData& a, SensorData& b) { a.Swap(&b); }
  inline void Swap(SensorData* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorData* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorData* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SensorData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SensorData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SensorData& from) { SensorData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SensorData* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.SensorData"; }

 protected:
  explicit SensorData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SensorData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SensorData& from);
  SensorData(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SensorData&& from) noexcept
      : SensorData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTypeFieldNumber = 1,
    kFloatValueFieldNumber = 2,
    kUint32ValueFieldNumber = 3,
  };
  // .meshtastic.MessageType type = 1;
  void clear_type() ;
  ::meshtastic::MessageType type() const;
  void set_type(::meshtastic::MessageType value);

  private:
  ::meshtastic::MessageType _internal_type() const;
  void _internal_set_type(::meshtastic::MessageType value);

  public:
  // float float_value = 2;
  bool has_float_value() const;
  void clear_float_value() ;
  float float_value() const;
  void set_float_value(float value);

  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);

  public:
  // uint32 uint32_value = 3;
  bool has_uint32_value() const;
  void clear_uint32_value() ;
  ::uint32_t uint32_value() const;
  void set_uint32_value(::uint32_t value);

  private:
  ::uint32_t _internal_uint32_value() const;
  void _internal_set_uint32_value(::uint32_t value);

  public:
  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:meshtastic.SensorData)
 private:
  class _Internal;
  void set_has_float_value();
  void set_has_uint32_value();
  inline bool has_data() const;
  inline void clear_has_data();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 3,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SensorData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int type_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      float float_value_;
      ::uint32_t uint32_value_;
    } data_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2finterdevice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SensorData_class_data_;
// -------------------------------------------------------------------

class InterdeviceMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.InterdeviceMessage) */ {
 public:
  inline InterdeviceMessage() : InterdeviceMessage(nullptr) {}
  ~InterdeviceMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InterdeviceMessage* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InterdeviceMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InterdeviceMessage(::google::protobuf::internal::ConstantInitialized);

  inline InterdeviceMessage(const InterdeviceMessage& from) : InterdeviceMessage(nullptr, from) {}
  inline InterdeviceMessage(InterdeviceMessage&& from) noexcept
      : InterdeviceMessage(nullptr, ::std::move(from)) {}
  inline InterdeviceMessage& operator=(const InterdeviceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterdeviceMessage& operator=(InterdeviceMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InterdeviceMessage& default_instance() {
    return *reinterpret_cast<const InterdeviceMessage*>(
        &_InterdeviceMessage_default_instance_);
  }
  enum DataCase {
    kNmea = 1,
    kSensor = 2,
    DATA_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(InterdeviceMessage& a, InterdeviceMessage& b) { a.Swap(&b); }
  inline void Swap(InterdeviceMessage* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterdeviceMessage* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InterdeviceMessage* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InterdeviceMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InterdeviceMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InterdeviceMessage& from) { InterdeviceMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InterdeviceMessage* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.InterdeviceMessage"; }

 protected:
  explicit InterdeviceMessage(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  InterdeviceMessage(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const InterdeviceMessage& from);
  InterdeviceMessage(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, InterdeviceMessage&& from) noexcept
      : InterdeviceMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNmeaFieldNumber = 1,
    kSensorFieldNumber = 2,
  };
  // string nmea = 1;
  bool has_nmea() const;
  void clear_nmea() ;
  const ::std::string& nmea() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_nmea(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_nmea();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_nmea();
  void set_allocated_nmea(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_nmea() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_nmea(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_nmea();

  public:
  // .meshtastic.SensorData sensor = 2;
  bool has_sensor() const;
  private:
  bool _internal_has_sensor() const;

  public:
  void clear_sensor() ;
  const ::meshtastic::SensorData& sensor() const;
  [[nodiscard]] ::meshtastic::SensorData* PROTOBUF_NULLABLE release_sensor();
  ::meshtastic::SensorData* PROTOBUF_NONNULL mutable_sensor();
  void set_allocated_sensor(::meshtastic::SensorData* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_sensor(::meshtastic::SensorData* PROTOBUF_NULLABLE value);
  ::meshtastic::SensorData* PROTOBUF_NULLABLE unsafe_arena_release_sensor();

  private:
  const ::meshtastic::SensorData& _internal_sensor() const;
  ::meshtastic::SensorData* PROTOBUF_NONNULL _internal_mutable_sensor();

  public:
  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:meshtastic.InterdeviceMessage)
 private:
  class _Internal;
  void set_has_nmea();
  void set_has_sensor();
  inline bool has_data() const;
  inline void clear_has_data();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2,
                                   1, 42,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const InterdeviceMessage& from_msg);
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr nmea_;
      ::meshtastic::SensorData* PROTOBUF_NULLABLE sensor_;
    } data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2finterdevice_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull InterdeviceMessage_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SensorData

// .meshtastic.MessageType type = 1;
inline void SensorData::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline ::meshtastic::MessageType SensorData::type() const {
  // @@protoc_insertion_point(field_get:meshtastic.SensorData.type)
  return _internal_type();
}
inline void SensorData::set_type(::meshtastic::MessageType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000001U;
  // @@protoc_insertion_point(field_set:meshtastic.SensorData.type)
}
inline ::meshtastic::MessageType SensorData::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::meshtastic::MessageType>(_impl_.type_);
}
inline void SensorData::_internal_set_type(::meshtastic::MessageType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// float float_value = 2;
inline bool SensorData::has_float_value() const {
  return data_case() == kFloatValue;
}
inline void SensorData::set_has_float_value() {
  _impl_._oneof_case_[0] = kFloatValue;
}
inline void SensorData::clear_float_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() == kFloatValue) {
    _impl_.data_.float_value_ = 0;
    clear_has_data();
  }
}
inline float SensorData::float_value() const {
  // @@protoc_insertion_point(field_get:meshtastic.SensorData.float_value)
  return _internal_float_value();
}
inline void SensorData::set_float_value(float value) {
  if (data_case() != kFloatValue) {
    clear_data();
    set_has_float_value();
  }
  _impl_.data_.float_value_ = value;
  // @@protoc_insertion_point(field_set:meshtastic.SensorData.float_value)
}
inline float SensorData::_internal_float_value() const {
  if (data_case() == kFloatValue) {
    return _impl_.data_.float_value_;
  }
  return 0;
}

// uint32 uint32_value = 3;
inline bool SensorData::has_uint32_value() const {
  return data_case() == kUint32Value;
}
inline void SensorData::set_has_uint32_value() {
  _impl_._oneof_case_[0] = kUint32Value;
}
inline void SensorData::clear_uint32_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() == kUint32Value) {
    _impl_.data_.uint32_value_ = 0u;
    clear_has_data();
  }
}
inline ::uint32_t SensorData::uint32_value() const {
  // @@protoc_insertion_point(field_get:meshtastic.SensorData.uint32_value)
  return _internal_uint32_value();
}
inline void SensorData::set_uint32_value(::uint32_t value) {
  if (data_case() != kUint32Value) {
    clear_data();
    set_has_uint32_value();
  }
  _impl_.data_.uint32_value_ = value;
  // @@protoc_insertion_point(field_set:meshtastic.SensorData.uint32_value)
}
inline ::uint32_t SensorData::_internal_uint32_value() const {
  if (data_case() == kUint32Value) {
    return _impl_.data_.uint32_value_;
  }
  return 0u;
}

inline bool SensorData::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void SensorData::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline SensorData::DataCase SensorData::data_case() const {
  return SensorData::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// InterdeviceMessage

// string nmea = 1;
inline bool InterdeviceMessage::has_nmea() const {
  return data_case() == kNmea;
}
inline void InterdeviceMessage::set_has_nmea() {
  _impl_._oneof_case_[0] = kNmea;
}
inline void InterdeviceMessage::clear_nmea() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() == kNmea) {
    _impl_.data_.nmea_.Destroy();
    clear_has_data();
  }
}
inline const ::std::string& InterdeviceMessage::nmea() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.InterdeviceMessage.nmea)
  return _internal_nmea();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void InterdeviceMessage::set_nmea(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() != kNmea) {
    clear_data();

    set_has_nmea();
    _impl_.data_.nmea_.InitDefault();
  }
  _impl_.data_.nmea_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:meshtastic.InterdeviceMessage.nmea)
}
inline ::std::string* PROTOBUF_NONNULL InterdeviceMessage::mutable_nmea()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_nmea();
  // @@protoc_insertion_point(field_mutable:meshtastic.InterdeviceMessage.nmea)
  return _s;
}
inline const ::std::string& InterdeviceMessage::_internal_nmea() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (data_case() != kNmea) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.data_.nmea_.Get();
}
inline void InterdeviceMessage::_internal_set_nmea(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() != kNmea) {
    clear_data();

    set_has_nmea();
    _impl_.data_.nmea_.InitDefault();
  }
  _impl_.data_.nmea_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL InterdeviceMessage::_internal_mutable_nmea() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() != kNmea) {
    clear_data();

    set_has_nmea();
    _impl_.data_.nmea_.InitDefault();
  }
  return _impl_.data_.nmea_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE InterdeviceMessage::release_nmea() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.InterdeviceMessage.nmea)
  if (data_case() != kNmea) {
    return nullptr;
  }
  clear_has_data();
  return _impl_.data_.nmea_.Release();
}
inline void InterdeviceMessage::set_allocated_nmea(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_data()) {
    clear_data();
  }
  if (value != nullptr) {
    set_has_nmea();
    _impl_.data_.nmea_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.InterdeviceMessage.nmea)
}

// .meshtastic.SensorData sensor = 2;
inline bool InterdeviceMessage::has_sensor() const {
  return data_case() == kSensor;
}
inline bool InterdeviceMessage::_internal_has_sensor() const {
  return data_case() == kSensor;
}
inline void InterdeviceMessage::set_has_sensor() {
  _impl_._oneof_case_[0] = kSensor;
}
inline void InterdeviceMessage::clear_sensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() == kSensor) {
    if (GetArena() == nullptr) {
      delete _impl_.data_.sensor_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.sensor_);
    }
    clear_has_data();
  }
}
inline ::meshtastic::SensorData* PROTOBUF_NULLABLE InterdeviceMessage::release_sensor() {
  // @@protoc_insertion_point(field_release:meshtastic.InterdeviceMessage.sensor)
  if (data_case() == kSensor) {
    clear_has_data();
    auto* temp = _impl_.data_.sensor_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.sensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::meshtastic::SensorData& InterdeviceMessage::_internal_sensor() const {
  return data_case() == kSensor ? *_impl_.data_.sensor_ : reinterpret_cast<::meshtastic::SensorData&>(::meshtastic::_SensorData_default_instance_);
}
inline const ::meshtastic::SensorData& InterdeviceMessage::sensor() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.InterdeviceMessage.sensor)
  return _internal_sensor();
}
inline ::meshtastic::SensorData* PROTOBUF_NULLABLE InterdeviceMessage::unsafe_arena_release_sensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meshtastic.InterdeviceMessage.sensor)
  if (data_case() == kSensor) {
    clear_has_data();
    auto* temp = _impl_.data_.sensor_;
    _impl_.data_.sensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InterdeviceMessage::unsafe_arena_set_allocated_sensor(
    ::meshtastic::SensorData* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_data();
  if (value) {
    set_has_sensor();
    _impl_.data_.sensor_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.InterdeviceMessage.sensor)
}
inline ::meshtastic::SensorData* PROTOBUF_NONNULL InterdeviceMessage::_internal_mutable_sensor() {
  if (data_case() != kSensor) {
    clear_data();
    set_has_sensor();
    _impl_.data_.sensor_ = 
        ::google::protobuf::Message::DefaultConstruct<::meshtastic::SensorData>(GetArena());
  }
  return _impl_.data_.sensor_;
}
inline ::meshtastic::SensorData* PROTOBUF_NONNULL InterdeviceMessage::mutable_sensor()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::meshtastic::SensorData* _msg = _internal_mutable_sensor();
  // @@protoc_insertion_point(field_mutable:meshtastic.InterdeviceMessage.sensor)
  return _msg;
}

inline bool InterdeviceMessage::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void InterdeviceMessage::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline InterdeviceMessage::DataCase InterdeviceMessage::data_case() const {
  return InterdeviceMessage::DataCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace meshtastic


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::meshtastic::MessageType> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::meshtastic::MessageType>() {
  return ::meshtastic::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // meshtastic_2finterdevice_2eproto_2epb_2eh
