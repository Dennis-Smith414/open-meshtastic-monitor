// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: meshtastic/device_ui.proto
// Protobuf C++ Version: 6.32.0

#ifndef meshtastic_2fdevice_5fui_2eproto_2epb_2eh
#define meshtastic_2fdevice_5fui_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6032000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_meshtastic_2fdevice_5fui_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_meshtastic_2fdevice_5fui_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_meshtastic_2fdevice_5fui_2eproto;
}  // extern "C"
namespace meshtastic {
enum CompassMode : int;
extern const uint32_t CompassMode_internal_data_[];
enum Language : int;
extern const uint32_t Language_internal_data_[];
enum Theme : int;
extern const uint32_t Theme_internal_data_[];
class DeviceUIConfig;
struct DeviceUIConfigDefaultTypeInternal;
extern DeviceUIConfigDefaultTypeInternal _DeviceUIConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DeviceUIConfig_class_data_;
class GeoPoint;
struct GeoPointDefaultTypeInternal;
extern GeoPointDefaultTypeInternal _GeoPoint_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull GeoPoint_class_data_;
class Map;
struct MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Map_class_data_;
class NodeFilter;
struct NodeFilterDefaultTypeInternal;
extern NodeFilterDefaultTypeInternal _NodeFilter_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull NodeFilter_class_data_;
class NodeHighlight;
struct NodeHighlightDefaultTypeInternal;
extern NodeHighlightDefaultTypeInternal _NodeHighlight_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull NodeHighlight_class_data_;
}  // namespace meshtastic
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::meshtastic::CompassMode_internal_data_>
    internal::EnumTraitsImpl::value<::meshtastic::CompassMode>;
template <>
internal::EnumTraitsT<::meshtastic::Language_internal_data_>
    internal::EnumTraitsImpl::value<::meshtastic::Language>;
template <>
internal::EnumTraitsT<::meshtastic::Theme_internal_data_>
    internal::EnumTraitsImpl::value<::meshtastic::Theme>;
}  // namespace protobuf
}  // namespace google

namespace meshtastic {
enum CompassMode : int {
  DYNAMIC = 0,
  FIXED_RING = 1,
  FREEZE_HEADING = 2,
  CompassMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  CompassMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t CompassMode_internal_data_[];
inline constexpr CompassMode CompassMode_MIN =
    static_cast<CompassMode>(0);
inline constexpr CompassMode CompassMode_MAX =
    static_cast<CompassMode>(2);
inline bool CompassMode_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int CompassMode_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CompassMode_descriptor();
template <typename T>
const ::std::string& CompassMode_Name(T value) {
  static_assert(::std::is_same<T, CompassMode>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to CompassMode_Name().");
  return CompassMode_Name(static_cast<CompassMode>(value));
}
template <>
inline const ::std::string& CompassMode_Name(CompassMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CompassMode_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool CompassMode_Parse(
    ::absl::string_view name, CompassMode* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompassMode>(CompassMode_descriptor(), name,
                                           value);
}
enum Theme : int {
  DARK = 0,
  LIGHT = 1,
  RED = 2,
  Theme_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Theme_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Theme_internal_data_[];
inline constexpr Theme Theme_MIN =
    static_cast<Theme>(0);
inline constexpr Theme Theme_MAX =
    static_cast<Theme>(2);
inline bool Theme_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int Theme_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Theme_descriptor();
template <typename T>
const ::std::string& Theme_Name(T value) {
  static_assert(::std::is_same<T, Theme>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Theme_Name().");
  return Theme_Name(static_cast<Theme>(value));
}
template <>
inline const ::std::string& Theme_Name(Theme value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Theme_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool Theme_Parse(
    ::absl::string_view name, Theme* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Theme>(Theme_descriptor(), name,
                                           value);
}
enum Language : int {
  ENGLISH = 0,
  FRENCH = 1,
  GERMAN = 2,
  ITALIAN = 3,
  PORTUGUESE = 4,
  SPANISH = 5,
  SWEDISH = 6,
  FINNISH = 7,
  POLISH = 8,
  TURKISH = 9,
  SERBIAN = 10,
  RUSSIAN = 11,
  DUTCH = 12,
  GREEK = 13,
  NORWEGIAN = 14,
  SLOVENIAN = 15,
  UKRAINIAN = 16,
  BULGARIAN = 17,
  CZECH = 18,
  SIMPLIFIED_CHINESE = 30,
  TRADITIONAL_CHINESE = 31,
  Language_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Language_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Language_internal_data_[];
inline constexpr Language Language_MIN =
    static_cast<Language>(0);
inline constexpr Language Language_MAX =
    static_cast<Language>(31);
inline bool Language_IsValid(int value) {
  return 0 <= value && value <= 31 && ((3221749759u >> value) & 1) != 0;
}
inline constexpr int Language_ARRAYSIZE = 31 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Language_descriptor();
template <typename T>
const ::std::string& Language_Name(T value) {
  static_assert(::std::is_same<T, Language>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Language_Name().");
  return Language_Name(static_cast<Language>(value));
}
template <>
inline const ::std::string& Language_Name(Language value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Language_descriptor, 0, 31>(
      static_cast<int>(value));
}
inline bool Language_Parse(
    ::absl::string_view name, Language* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Language>(Language_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class NodeHighlight final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.NodeHighlight) */ {
 public:
  inline NodeHighlight() : NodeHighlight(nullptr) {}
  ~NodeHighlight() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NodeHighlight* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NodeHighlight));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NodeHighlight(::google::protobuf::internal::ConstantInitialized);

  inline NodeHighlight(const NodeHighlight& from) : NodeHighlight(nullptr, from) {}
  inline NodeHighlight(NodeHighlight&& from) noexcept
      : NodeHighlight(nullptr, ::std::move(from)) {}
  inline NodeHighlight& operator=(const NodeHighlight& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeHighlight& operator=(NodeHighlight&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeHighlight& default_instance() {
    return *reinterpret_cast<const NodeHighlight*>(
        &_NodeHighlight_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(NodeHighlight& a, NodeHighlight& b) { a.Swap(&b); }
  inline void Swap(NodeHighlight* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeHighlight* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeHighlight* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NodeHighlight>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NodeHighlight& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NodeHighlight& from) { NodeHighlight::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NodeHighlight* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.NodeHighlight"; }

 protected:
  explicit NodeHighlight(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  NodeHighlight(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const NodeHighlight& from);
  NodeHighlight(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, NodeHighlight&& from) noexcept
      : NodeHighlight(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeNameFieldNumber = 5,
    kChatSwitchFieldNumber = 1,
    kPositionSwitchFieldNumber = 2,
    kTelemetrySwitchFieldNumber = 3,
    kIaqSwitchFieldNumber = 4,
  };
  // string node_name = 5;
  void clear_node_name() ;
  const ::std::string& node_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_node_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_node_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_node_name();
  void set_allocated_node_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_node_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_node_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_node_name();

  public:
  // bool chat_switch = 1;
  void clear_chat_switch() ;
  bool chat_switch() const;
  void set_chat_switch(bool value);

  private:
  bool _internal_chat_switch() const;
  void _internal_set_chat_switch(bool value);

  public:
  // bool position_switch = 2;
  void clear_position_switch() ;
  bool position_switch() const;
  void set_position_switch(bool value);

  private:
  bool _internal_position_switch() const;
  void _internal_set_position_switch(bool value);

  public:
  // bool telemetry_switch = 3;
  void clear_telemetry_switch() ;
  bool telemetry_switch() const;
  void set_telemetry_switch(bool value);

  private:
  bool _internal_telemetry_switch() const;
  void _internal_set_telemetry_switch(bool value);

  public:
  // bool iaq_switch = 4;
  void clear_iaq_switch() ;
  bool iaq_switch() const;
  void set_iaq_switch(bool value);

  private:
  bool _internal_iaq_switch() const;
  void _internal_set_iaq_switch(bool value);

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.NodeHighlight)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   0, 42,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const NodeHighlight& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr node_name_;
    bool chat_switch_;
    bool position_switch_;
    bool telemetry_switch_;
    bool iaq_switch_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2fdevice_5fui_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull NodeHighlight_class_data_;
// -------------------------------------------------------------------

class NodeFilter final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.NodeFilter) */ {
 public:
  inline NodeFilter() : NodeFilter(nullptr) {}
  ~NodeFilter() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NodeFilter* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NodeFilter));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NodeFilter(::google::protobuf::internal::ConstantInitialized);

  inline NodeFilter(const NodeFilter& from) : NodeFilter(nullptr, from) {}
  inline NodeFilter(NodeFilter&& from) noexcept
      : NodeFilter(nullptr, ::std::move(from)) {}
  inline NodeFilter& operator=(const NodeFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeFilter& operator=(NodeFilter&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeFilter& default_instance() {
    return *reinterpret_cast<const NodeFilter*>(
        &_NodeFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(NodeFilter& a, NodeFilter& b) { a.Swap(&b); }
  inline void Swap(NodeFilter* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeFilter* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeFilter* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NodeFilter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NodeFilter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NodeFilter& from) { NodeFilter::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NodeFilter* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.NodeFilter"; }

 protected:
  explicit NodeFilter(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  NodeFilter(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const NodeFilter& from);
  NodeFilter(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, NodeFilter&& from) noexcept
      : NodeFilter(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeNameFieldNumber = 6,
    kUnknownSwitchFieldNumber = 1,
    kOfflineSwitchFieldNumber = 2,
    kPublicKeySwitchFieldNumber = 3,
    kPositionSwitchFieldNumber = 5,
    kHopsAwayFieldNumber = 4,
    kChannelFieldNumber = 7,
  };
  // string node_name = 6;
  void clear_node_name() ;
  const ::std::string& node_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_node_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_node_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_node_name();
  void set_allocated_node_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_node_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_node_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_node_name();

  public:
  // bool unknown_switch = 1;
  void clear_unknown_switch() ;
  bool unknown_switch() const;
  void set_unknown_switch(bool value);

  private:
  bool _internal_unknown_switch() const;
  void _internal_set_unknown_switch(bool value);

  public:
  // bool offline_switch = 2;
  void clear_offline_switch() ;
  bool offline_switch() const;
  void set_offline_switch(bool value);

  private:
  bool _internal_offline_switch() const;
  void _internal_set_offline_switch(bool value);

  public:
  // bool public_key_switch = 3;
  void clear_public_key_switch() ;
  bool public_key_switch() const;
  void set_public_key_switch(bool value);

  private:
  bool _internal_public_key_switch() const;
  void _internal_set_public_key_switch(bool value);

  public:
  // bool position_switch = 5;
  void clear_position_switch() ;
  bool position_switch() const;
  void set_position_switch(bool value);

  private:
  bool _internal_position_switch() const;
  void _internal_set_position_switch(bool value);

  public:
  // int32 hops_away = 4;
  void clear_hops_away() ;
  ::int32_t hops_away() const;
  void set_hops_away(::int32_t value);

  private:
  ::int32_t _internal_hops_away() const;
  void _internal_set_hops_away(::int32_t value);

  public:
  // int32 channel = 7;
  void clear_channel() ;
  ::int32_t channel() const;
  void set_channel(::int32_t value);

  private:
  ::int32_t _internal_channel() const;
  void _internal_set_channel(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.NodeFilter)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7,
                                   0, 39,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const NodeFilter& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr node_name_;
    bool unknown_switch_;
    bool offline_switch_;
    bool public_key_switch_;
    bool position_switch_;
    ::int32_t hops_away_;
    ::int32_t channel_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2fdevice_5fui_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull NodeFilter_class_data_;
// -------------------------------------------------------------------

class GeoPoint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.GeoPoint) */ {
 public:
  inline GeoPoint() : GeoPoint(nullptr) {}
  ~GeoPoint() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GeoPoint* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GeoPoint));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GeoPoint(::google::protobuf::internal::ConstantInitialized);

  inline GeoPoint(const GeoPoint& from) : GeoPoint(nullptr, from) {}
  inline GeoPoint(GeoPoint&& from) noexcept
      : GeoPoint(nullptr, ::std::move(from)) {}
  inline GeoPoint& operator=(const GeoPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoPoint& operator=(GeoPoint&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeoPoint& default_instance() {
    return *reinterpret_cast<const GeoPoint*>(
        &_GeoPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(GeoPoint& a, GeoPoint& b) { a.Swap(&b); }
  inline void Swap(GeoPoint* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoPoint* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeoPoint* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GeoPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GeoPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GeoPoint& from) { GeoPoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GeoPoint* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.GeoPoint"; }

 protected:
  explicit GeoPoint(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  GeoPoint(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const GeoPoint& from);
  GeoPoint(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, GeoPoint&& from) noexcept
      : GeoPoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kZoomFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kLongitudeFieldNumber = 3,
  };
  // int32 zoom = 1;
  void clear_zoom() ;
  ::int32_t zoom() const;
  void set_zoom(::int32_t value);

  private:
  ::int32_t _internal_zoom() const;
  void _internal_set_zoom(::int32_t value);

  public:
  // int32 latitude = 2;
  void clear_latitude() ;
  ::int32_t latitude() const;
  void set_latitude(::int32_t value);

  private:
  ::int32_t _internal_latitude() const;
  void _internal_set_latitude(::int32_t value);

  public:
  // int32 longitude = 3;
  void clear_longitude() ;
  ::int32_t longitude() const;
  void set_longitude(::int32_t value);

  private:
  ::int32_t _internal_longitude() const;
  void _internal_set_longitude(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.GeoPoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const GeoPoint& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t zoom_;
    ::int32_t latitude_;
    ::int32_t longitude_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2fdevice_5fui_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull GeoPoint_class_data_;
// -------------------------------------------------------------------

class Map final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.Map) */ {
 public:
  inline Map() : Map(nullptr) {}
  ~Map() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Map* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Map));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Map(::google::protobuf::internal::ConstantInitialized);

  inline Map(const Map& from) : Map(nullptr, from) {}
  inline Map(Map&& from) noexcept
      : Map(nullptr, ::std::move(from)) {}
  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map& operator=(Map&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Map& default_instance() {
    return *reinterpret_cast<const Map*>(
        &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Map& a, Map& b) { a.Swap(&b); }
  inline void Swap(Map* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Map* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Map* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Map>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Map& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Map& from) { Map::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Map* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.Map"; }

 protected:
  explicit Map(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Map(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Map& from);
  Map(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Map&& from) noexcept
      : Map(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStyleFieldNumber = 2,
    kHomeFieldNumber = 1,
    kFollowGpsFieldNumber = 3,
  };
  // string style = 2;
  void clear_style() ;
  const ::std::string& style() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_style(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_style();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_style();
  void set_allocated_style(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_style() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_style(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_style();

  public:
  // .meshtastic.GeoPoint home = 1;
  bool has_home() const;
  void clear_home() ;
  const ::meshtastic::GeoPoint& home() const;
  [[nodiscard]] ::meshtastic::GeoPoint* PROTOBUF_NULLABLE release_home();
  ::meshtastic::GeoPoint* PROTOBUF_NONNULL mutable_home();
  void set_allocated_home(::meshtastic::GeoPoint* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_home(::meshtastic::GeoPoint* PROTOBUF_NULLABLE value);
  ::meshtastic::GeoPoint* PROTOBUF_NULLABLE unsafe_arena_release_home();

  private:
  const ::meshtastic::GeoPoint& _internal_home() const;
  ::meshtastic::GeoPoint* PROTOBUF_NONNULL _internal_mutable_home();

  public:
  // bool follow_gps = 3;
  void clear_follow_gps() ;
  bool follow_gps() const;
  void set_follow_gps(bool value);

  private:
  bool _internal_follow_gps() const;
  void _internal_set_follow_gps(bool value);

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.Map)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   1, 28,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Map& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr style_;
    ::meshtastic::GeoPoint* PROTOBUF_NULLABLE home_;
    bool follow_gps_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2fdevice_5fui_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Map_class_data_;
// -------------------------------------------------------------------

class DeviceUIConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.DeviceUIConfig) */ {
 public:
  inline DeviceUIConfig() : DeviceUIConfig(nullptr) {}
  ~DeviceUIConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DeviceUIConfig* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DeviceUIConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceUIConfig(::google::protobuf::internal::ConstantInitialized);

  inline DeviceUIConfig(const DeviceUIConfig& from) : DeviceUIConfig(nullptr, from) {}
  inline DeviceUIConfig(DeviceUIConfig&& from) noexcept
      : DeviceUIConfig(nullptr, ::std::move(from)) {}
  inline DeviceUIConfig& operator=(const DeviceUIConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceUIConfig& operator=(DeviceUIConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceUIConfig& default_instance() {
    return *reinterpret_cast<const DeviceUIConfig*>(
        &_DeviceUIConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(DeviceUIConfig& a, DeviceUIConfig& b) { a.Swap(&b); }
  inline void Swap(DeviceUIConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceUIConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceUIConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DeviceUIConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceUIConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceUIConfig& from) { DeviceUIConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DeviceUIConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.DeviceUIConfig"; }

 protected:
  explicit DeviceUIConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DeviceUIConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DeviceUIConfig& from);
  DeviceUIConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DeviceUIConfig&& from) noexcept
      : DeviceUIConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCalibrationDataFieldNumber = 14,
    kNodeFilterFieldNumber = 12,
    kNodeHighlightFieldNumber = 13,
    kMapDataFieldNumber = 15,
    kVersionFieldNumber = 1,
    kScreenBrightnessFieldNumber = 2,
    kScreenTimeoutFieldNumber = 3,
    kPinCodeFieldNumber = 6,
    kScreenLockFieldNumber = 4,
    kSettingsLockFieldNumber = 5,
    kAlertEnabledFieldNumber = 8,
    kBannerEnabledFieldNumber = 9,
    kThemeFieldNumber = 7,
    kRingToneIdFieldNumber = 10,
    kLanguageFieldNumber = 11,
    kCompassModeFieldNumber = 16,
    kScreenRgbColorFieldNumber = 17,
    kIsClockfaceAnalogFieldNumber = 18,
  };
  // bytes calibration_data = 14;
  void clear_calibration_data() ;
  const ::std::string& calibration_data() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_calibration_data(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_calibration_data();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_calibration_data();
  void set_allocated_calibration_data(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_calibration_data() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_calibration_data(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_calibration_data();

  public:
  // .meshtastic.NodeFilter node_filter = 12;
  bool has_node_filter() const;
  void clear_node_filter() ;
  const ::meshtastic::NodeFilter& node_filter() const;
  [[nodiscard]] ::meshtastic::NodeFilter* PROTOBUF_NULLABLE release_node_filter();
  ::meshtastic::NodeFilter* PROTOBUF_NONNULL mutable_node_filter();
  void set_allocated_node_filter(::meshtastic::NodeFilter* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_node_filter(::meshtastic::NodeFilter* PROTOBUF_NULLABLE value);
  ::meshtastic::NodeFilter* PROTOBUF_NULLABLE unsafe_arena_release_node_filter();

  private:
  const ::meshtastic::NodeFilter& _internal_node_filter() const;
  ::meshtastic::NodeFilter* PROTOBUF_NONNULL _internal_mutable_node_filter();

  public:
  // .meshtastic.NodeHighlight node_highlight = 13;
  bool has_node_highlight() const;
  void clear_node_highlight() ;
  const ::meshtastic::NodeHighlight& node_highlight() const;
  [[nodiscard]] ::meshtastic::NodeHighlight* PROTOBUF_NULLABLE release_node_highlight();
  ::meshtastic::NodeHighlight* PROTOBUF_NONNULL mutable_node_highlight();
  void set_allocated_node_highlight(::meshtastic::NodeHighlight* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_node_highlight(::meshtastic::NodeHighlight* PROTOBUF_NULLABLE value);
  ::meshtastic::NodeHighlight* PROTOBUF_NULLABLE unsafe_arena_release_node_highlight();

  private:
  const ::meshtastic::NodeHighlight& _internal_node_highlight() const;
  ::meshtastic::NodeHighlight* PROTOBUF_NONNULL _internal_mutable_node_highlight();

  public:
  // .meshtastic.Map map_data = 15;
  bool has_map_data() const;
  void clear_map_data() ;
  const ::meshtastic::Map& map_data() const;
  [[nodiscard]] ::meshtastic::Map* PROTOBUF_NULLABLE release_map_data();
  ::meshtastic::Map* PROTOBUF_NONNULL mutable_map_data();
  void set_allocated_map_data(::meshtastic::Map* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_map_data(::meshtastic::Map* PROTOBUF_NULLABLE value);
  ::meshtastic::Map* PROTOBUF_NULLABLE unsafe_arena_release_map_data();

  private:
  const ::meshtastic::Map& _internal_map_data() const;
  ::meshtastic::Map* PROTOBUF_NONNULL _internal_mutable_map_data();

  public:
  // uint32 version = 1;
  void clear_version() ;
  ::uint32_t version() const;
  void set_version(::uint32_t value);

  private:
  ::uint32_t _internal_version() const;
  void _internal_set_version(::uint32_t value);

  public:
  // uint32 screen_brightness = 2;
  void clear_screen_brightness() ;
  ::uint32_t screen_brightness() const;
  void set_screen_brightness(::uint32_t value);

  private:
  ::uint32_t _internal_screen_brightness() const;
  void _internal_set_screen_brightness(::uint32_t value);

  public:
  // uint32 screen_timeout = 3;
  void clear_screen_timeout() ;
  ::uint32_t screen_timeout() const;
  void set_screen_timeout(::uint32_t value);

  private:
  ::uint32_t _internal_screen_timeout() const;
  void _internal_set_screen_timeout(::uint32_t value);

  public:
  // uint32 pin_code = 6;
  void clear_pin_code() ;
  ::uint32_t pin_code() const;
  void set_pin_code(::uint32_t value);

  private:
  ::uint32_t _internal_pin_code() const;
  void _internal_set_pin_code(::uint32_t value);

  public:
  // bool screen_lock = 4;
  void clear_screen_lock() ;
  bool screen_lock() const;
  void set_screen_lock(bool value);

  private:
  bool _internal_screen_lock() const;
  void _internal_set_screen_lock(bool value);

  public:
  // bool settings_lock = 5;
  void clear_settings_lock() ;
  bool settings_lock() const;
  void set_settings_lock(bool value);

  private:
  bool _internal_settings_lock() const;
  void _internal_set_settings_lock(bool value);

  public:
  // bool alert_enabled = 8;
  void clear_alert_enabled() ;
  bool alert_enabled() const;
  void set_alert_enabled(bool value);

  private:
  bool _internal_alert_enabled() const;
  void _internal_set_alert_enabled(bool value);

  public:
  // bool banner_enabled = 9;
  void clear_banner_enabled() ;
  bool banner_enabled() const;
  void set_banner_enabled(bool value);

  private:
  bool _internal_banner_enabled() const;
  void _internal_set_banner_enabled(bool value);

  public:
  // .meshtastic.Theme theme = 7;
  void clear_theme() ;
  ::meshtastic::Theme theme() const;
  void set_theme(::meshtastic::Theme value);

  private:
  ::meshtastic::Theme _internal_theme() const;
  void _internal_set_theme(::meshtastic::Theme value);

  public:
  // uint32 ring_tone_id = 10;
  void clear_ring_tone_id() ;
  ::uint32_t ring_tone_id() const;
  void set_ring_tone_id(::uint32_t value);

  private:
  ::uint32_t _internal_ring_tone_id() const;
  void _internal_set_ring_tone_id(::uint32_t value);

  public:
  // .meshtastic.Language language = 11;
  void clear_language() ;
  ::meshtastic::Language language() const;
  void set_language(::meshtastic::Language value);

  private:
  ::meshtastic::Language _internal_language() const;
  void _internal_set_language(::meshtastic::Language value);

  public:
  // .meshtastic.CompassMode compass_mode = 16;
  void clear_compass_mode() ;
  ::meshtastic::CompassMode compass_mode() const;
  void set_compass_mode(::meshtastic::CompassMode value);

  private:
  ::meshtastic::CompassMode _internal_compass_mode() const;
  void _internal_set_compass_mode(::meshtastic::CompassMode value);

  public:
  // uint32 screen_rgb_color = 17;
  void clear_screen_rgb_color() ;
  ::uint32_t screen_rgb_color() const;
  void set_screen_rgb_color(::uint32_t value);

  private:
  ::uint32_t _internal_screen_rgb_color() const;
  void _internal_set_screen_rgb_color(::uint32_t value);

  public:
  // bool is_clockface_analog = 18;
  void clear_is_clockface_analog() ;
  bool is_clockface_analog() const;
  void set_is_clockface_analog(bool value);

  private:
  bool _internal_is_clockface_analog() const;
  void _internal_set_is_clockface_analog(bool value);

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.DeviceUIConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 18,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DeviceUIConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr calibration_data_;
    ::meshtastic::NodeFilter* PROTOBUF_NULLABLE node_filter_;
    ::meshtastic::NodeHighlight* PROTOBUF_NULLABLE node_highlight_;
    ::meshtastic::Map* PROTOBUF_NULLABLE map_data_;
    ::uint32_t version_;
    ::uint32_t screen_brightness_;
    ::uint32_t screen_timeout_;
    ::uint32_t pin_code_;
    bool screen_lock_;
    bool settings_lock_;
    bool alert_enabled_;
    bool banner_enabled_;
    int theme_;
    ::uint32_t ring_tone_id_;
    int language_;
    int compass_mode_;
    ::uint32_t screen_rgb_color_;
    bool is_clockface_analog_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2fdevice_5fui_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DeviceUIConfig_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DeviceUIConfig

// uint32 version = 1;
inline void DeviceUIConfig::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010U;
}
inline ::uint32_t DeviceUIConfig::version() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.version)
  return _internal_version();
}
inline void DeviceUIConfig::set_version(::uint32_t value) {
  _internal_set_version(value);
  _impl_._has_bits_[0] |= 0x00000010U;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceUIConfig.version)
}
inline ::uint32_t DeviceUIConfig::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void DeviceUIConfig::_internal_set_version(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// uint32 screen_brightness = 2;
inline void DeviceUIConfig::clear_screen_brightness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screen_brightness_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020U;
}
inline ::uint32_t DeviceUIConfig::screen_brightness() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.screen_brightness)
  return _internal_screen_brightness();
}
inline void DeviceUIConfig::set_screen_brightness(::uint32_t value) {
  _internal_set_screen_brightness(value);
  _impl_._has_bits_[0] |= 0x00000020U;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceUIConfig.screen_brightness)
}
inline ::uint32_t DeviceUIConfig::_internal_screen_brightness() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.screen_brightness_;
}
inline void DeviceUIConfig::_internal_set_screen_brightness(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screen_brightness_ = value;
}

// uint32 screen_timeout = 3;
inline void DeviceUIConfig::clear_screen_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screen_timeout_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040U;
}
inline ::uint32_t DeviceUIConfig::screen_timeout() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.screen_timeout)
  return _internal_screen_timeout();
}
inline void DeviceUIConfig::set_screen_timeout(::uint32_t value) {
  _internal_set_screen_timeout(value);
  _impl_._has_bits_[0] |= 0x00000040U;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceUIConfig.screen_timeout)
}
inline ::uint32_t DeviceUIConfig::_internal_screen_timeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.screen_timeout_;
}
inline void DeviceUIConfig::_internal_set_screen_timeout(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screen_timeout_ = value;
}

// bool screen_lock = 4;
inline void DeviceUIConfig::clear_screen_lock() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screen_lock_ = false;
  _impl_._has_bits_[0] &= ~0x00000100U;
}
inline bool DeviceUIConfig::screen_lock() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.screen_lock)
  return _internal_screen_lock();
}
inline void DeviceUIConfig::set_screen_lock(bool value) {
  _internal_set_screen_lock(value);
  _impl_._has_bits_[0] |= 0x00000100U;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceUIConfig.screen_lock)
}
inline bool DeviceUIConfig::_internal_screen_lock() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.screen_lock_;
}
inline void DeviceUIConfig::_internal_set_screen_lock(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screen_lock_ = value;
}

// bool settings_lock = 5;
inline void DeviceUIConfig::clear_settings_lock() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.settings_lock_ = false;
  _impl_._has_bits_[0] &= ~0x00000200U;
}
inline bool DeviceUIConfig::settings_lock() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.settings_lock)
  return _internal_settings_lock();
}
inline void DeviceUIConfig::set_settings_lock(bool value) {
  _internal_set_settings_lock(value);
  _impl_._has_bits_[0] |= 0x00000200U;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceUIConfig.settings_lock)
}
inline bool DeviceUIConfig::_internal_settings_lock() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.settings_lock_;
}
inline void DeviceUIConfig::_internal_set_settings_lock(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.settings_lock_ = value;
}

// uint32 pin_code = 6;
inline void DeviceUIConfig::clear_pin_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pin_code_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080U;
}
inline ::uint32_t DeviceUIConfig::pin_code() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.pin_code)
  return _internal_pin_code();
}
inline void DeviceUIConfig::set_pin_code(::uint32_t value) {
  _internal_set_pin_code(value);
  _impl_._has_bits_[0] |= 0x00000080U;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceUIConfig.pin_code)
}
inline ::uint32_t DeviceUIConfig::_internal_pin_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pin_code_;
}
inline void DeviceUIConfig::_internal_set_pin_code(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pin_code_ = value;
}

// .meshtastic.Theme theme = 7;
inline void DeviceUIConfig::clear_theme() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000U;
}
inline ::meshtastic::Theme DeviceUIConfig::theme() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.theme)
  return _internal_theme();
}
inline void DeviceUIConfig::set_theme(::meshtastic::Theme value) {
  _internal_set_theme(value);
  _impl_._has_bits_[0] |= 0x00001000U;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceUIConfig.theme)
}
inline ::meshtastic::Theme DeviceUIConfig::_internal_theme() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::meshtastic::Theme>(_impl_.theme_);
}
inline void DeviceUIConfig::_internal_set_theme(::meshtastic::Theme value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_ = value;
}

// bool alert_enabled = 8;
inline void DeviceUIConfig::clear_alert_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000400U;
}
inline bool DeviceUIConfig::alert_enabled() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.alert_enabled)
  return _internal_alert_enabled();
}
inline void DeviceUIConfig::set_alert_enabled(bool value) {
  _internal_set_alert_enabled(value);
  _impl_._has_bits_[0] |= 0x00000400U;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceUIConfig.alert_enabled)
}
inline bool DeviceUIConfig::_internal_alert_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alert_enabled_;
}
inline void DeviceUIConfig::_internal_set_alert_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alert_enabled_ = value;
}

// bool banner_enabled = 9;
inline void DeviceUIConfig::clear_banner_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.banner_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000800U;
}
inline bool DeviceUIConfig::banner_enabled() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.banner_enabled)
  return _internal_banner_enabled();
}
inline void DeviceUIConfig::set_banner_enabled(bool value) {
  _internal_set_banner_enabled(value);
  _impl_._has_bits_[0] |= 0x00000800U;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceUIConfig.banner_enabled)
}
inline bool DeviceUIConfig::_internal_banner_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.banner_enabled_;
}
inline void DeviceUIConfig::_internal_set_banner_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.banner_enabled_ = value;
}

// uint32 ring_tone_id = 10;
inline void DeviceUIConfig::clear_ring_tone_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ring_tone_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000U;
}
inline ::uint32_t DeviceUIConfig::ring_tone_id() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.ring_tone_id)
  return _internal_ring_tone_id();
}
inline void DeviceUIConfig::set_ring_tone_id(::uint32_t value) {
  _internal_set_ring_tone_id(value);
  _impl_._has_bits_[0] |= 0x00002000U;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceUIConfig.ring_tone_id)
}
inline ::uint32_t DeviceUIConfig::_internal_ring_tone_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ring_tone_id_;
}
inline void DeviceUIConfig::_internal_set_ring_tone_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ring_tone_id_ = value;
}

// .meshtastic.Language language = 11;
inline void DeviceUIConfig::clear_language() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000U;
}
inline ::meshtastic::Language DeviceUIConfig::language() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.language)
  return _internal_language();
}
inline void DeviceUIConfig::set_language(::meshtastic::Language value) {
  _internal_set_language(value);
  _impl_._has_bits_[0] |= 0x00004000U;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceUIConfig.language)
}
inline ::meshtastic::Language DeviceUIConfig::_internal_language() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::meshtastic::Language>(_impl_.language_);
}
inline void DeviceUIConfig::_internal_set_language(::meshtastic::Language value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_ = value;
}

// .meshtastic.NodeFilter node_filter = 12;
inline bool DeviceUIConfig::has_node_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.node_filter_ != nullptr);
  return value;
}
inline void DeviceUIConfig::clear_node_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.node_filter_ != nullptr) _impl_.node_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline const ::meshtastic::NodeFilter& DeviceUIConfig::_internal_node_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::meshtastic::NodeFilter* p = _impl_.node_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::meshtastic::NodeFilter&>(::meshtastic::_NodeFilter_default_instance_);
}
inline const ::meshtastic::NodeFilter& DeviceUIConfig::node_filter() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.node_filter)
  return _internal_node_filter();
}
inline void DeviceUIConfig::unsafe_arena_set_allocated_node_filter(
    ::meshtastic::NodeFilter* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.node_filter_);
  }
  _impl_.node_filter_ = reinterpret_cast<::meshtastic::NodeFilter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.DeviceUIConfig.node_filter)
}
inline ::meshtastic::NodeFilter* PROTOBUF_NULLABLE DeviceUIConfig::release_node_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002U;
  ::meshtastic::NodeFilter* released = _impl_.node_filter_;
  _impl_.node_filter_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::meshtastic::NodeFilter* PROTOBUF_NULLABLE DeviceUIConfig::unsafe_arena_release_node_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.DeviceUIConfig.node_filter)

  _impl_._has_bits_[0] &= ~0x00000002U;
  ::meshtastic::NodeFilter* temp = _impl_.node_filter_;
  _impl_.node_filter_ = nullptr;
  return temp;
}
inline ::meshtastic::NodeFilter* PROTOBUF_NONNULL DeviceUIConfig::_internal_mutable_node_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.node_filter_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::meshtastic::NodeFilter>(GetArena());
    _impl_.node_filter_ = reinterpret_cast<::meshtastic::NodeFilter*>(p);
  }
  return _impl_.node_filter_;
}
inline ::meshtastic::NodeFilter* PROTOBUF_NONNULL DeviceUIConfig::mutable_node_filter()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002U;
  ::meshtastic::NodeFilter* _msg = _internal_mutable_node_filter();
  // @@protoc_insertion_point(field_mutable:meshtastic.DeviceUIConfig.node_filter)
  return _msg;
}
inline void DeviceUIConfig::set_allocated_node_filter(::meshtastic::NodeFilter* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.node_filter_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }

  _impl_.node_filter_ = reinterpret_cast<::meshtastic::NodeFilter*>(value);
  // @@protoc_insertion_point(field_set_allocated:meshtastic.DeviceUIConfig.node_filter)
}

// .meshtastic.NodeHighlight node_highlight = 13;
inline bool DeviceUIConfig::has_node_highlight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.node_highlight_ != nullptr);
  return value;
}
inline void DeviceUIConfig::clear_node_highlight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.node_highlight_ != nullptr) _impl_.node_highlight_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004U;
}
inline const ::meshtastic::NodeHighlight& DeviceUIConfig::_internal_node_highlight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::meshtastic::NodeHighlight* p = _impl_.node_highlight_;
  return p != nullptr ? *p : reinterpret_cast<const ::meshtastic::NodeHighlight&>(::meshtastic::_NodeHighlight_default_instance_);
}
inline const ::meshtastic::NodeHighlight& DeviceUIConfig::node_highlight() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.node_highlight)
  return _internal_node_highlight();
}
inline void DeviceUIConfig::unsafe_arena_set_allocated_node_highlight(
    ::meshtastic::NodeHighlight* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.node_highlight_);
  }
  _impl_.node_highlight_ = reinterpret_cast<::meshtastic::NodeHighlight*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.DeviceUIConfig.node_highlight)
}
inline ::meshtastic::NodeHighlight* PROTOBUF_NULLABLE DeviceUIConfig::release_node_highlight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004U;
  ::meshtastic::NodeHighlight* released = _impl_.node_highlight_;
  _impl_.node_highlight_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::meshtastic::NodeHighlight* PROTOBUF_NULLABLE DeviceUIConfig::unsafe_arena_release_node_highlight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.DeviceUIConfig.node_highlight)

  _impl_._has_bits_[0] &= ~0x00000004U;
  ::meshtastic::NodeHighlight* temp = _impl_.node_highlight_;
  _impl_.node_highlight_ = nullptr;
  return temp;
}
inline ::meshtastic::NodeHighlight* PROTOBUF_NONNULL DeviceUIConfig::_internal_mutable_node_highlight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.node_highlight_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::meshtastic::NodeHighlight>(GetArena());
    _impl_.node_highlight_ = reinterpret_cast<::meshtastic::NodeHighlight*>(p);
  }
  return _impl_.node_highlight_;
}
inline ::meshtastic::NodeHighlight* PROTOBUF_NONNULL DeviceUIConfig::mutable_node_highlight()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004U;
  ::meshtastic::NodeHighlight* _msg = _internal_mutable_node_highlight();
  // @@protoc_insertion_point(field_mutable:meshtastic.DeviceUIConfig.node_highlight)
  return _msg;
}
inline void DeviceUIConfig::set_allocated_node_highlight(::meshtastic::NodeHighlight* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.node_highlight_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }

  _impl_.node_highlight_ = reinterpret_cast<::meshtastic::NodeHighlight*>(value);
  // @@protoc_insertion_point(field_set_allocated:meshtastic.DeviceUIConfig.node_highlight)
}

// bytes calibration_data = 14;
inline void DeviceUIConfig::clear_calibration_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.calibration_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& DeviceUIConfig::calibration_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.calibration_data)
  return _internal_calibration_data();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DeviceUIConfig::set_calibration_data(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.calibration_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:meshtastic.DeviceUIConfig.calibration_data)
}
inline ::std::string* PROTOBUF_NONNULL DeviceUIConfig::mutable_calibration_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_calibration_data();
  // @@protoc_insertion_point(field_mutable:meshtastic.DeviceUIConfig.calibration_data)
  return _s;
}
inline const ::std::string& DeviceUIConfig::_internal_calibration_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.calibration_data_.Get();
}
inline void DeviceUIConfig::_internal_set_calibration_data(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.calibration_data_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL DeviceUIConfig::_internal_mutable_calibration_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.calibration_data_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE DeviceUIConfig::release_calibration_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.DeviceUIConfig.calibration_data)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.calibration_data_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.calibration_data_.Set("", GetArena());
  }
  return released;
}
inline void DeviceUIConfig::set_allocated_calibration_data(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.calibration_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.calibration_data_.IsDefault()) {
    _impl_.calibration_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.DeviceUIConfig.calibration_data)
}

// .meshtastic.Map map_data = 15;
inline bool DeviceUIConfig::has_map_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.map_data_ != nullptr);
  return value;
}
inline void DeviceUIConfig::clear_map_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.map_data_ != nullptr) _impl_.map_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008U;
}
inline const ::meshtastic::Map& DeviceUIConfig::_internal_map_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::meshtastic::Map* p = _impl_.map_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::meshtastic::Map&>(::meshtastic::_Map_default_instance_);
}
inline const ::meshtastic::Map& DeviceUIConfig::map_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.map_data)
  return _internal_map_data();
}
inline void DeviceUIConfig::unsafe_arena_set_allocated_map_data(
    ::meshtastic::Map* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.map_data_);
  }
  _impl_.map_data_ = reinterpret_cast<::meshtastic::Map*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.DeviceUIConfig.map_data)
}
inline ::meshtastic::Map* PROTOBUF_NULLABLE DeviceUIConfig::release_map_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008U;
  ::meshtastic::Map* released = _impl_.map_data_;
  _impl_.map_data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::meshtastic::Map* PROTOBUF_NULLABLE DeviceUIConfig::unsafe_arena_release_map_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.DeviceUIConfig.map_data)

  _impl_._has_bits_[0] &= ~0x00000008U;
  ::meshtastic::Map* temp = _impl_.map_data_;
  _impl_.map_data_ = nullptr;
  return temp;
}
inline ::meshtastic::Map* PROTOBUF_NONNULL DeviceUIConfig::_internal_mutable_map_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.map_data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::meshtastic::Map>(GetArena());
    _impl_.map_data_ = reinterpret_cast<::meshtastic::Map*>(p);
  }
  return _impl_.map_data_;
}
inline ::meshtastic::Map* PROTOBUF_NONNULL DeviceUIConfig::mutable_map_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008U;
  ::meshtastic::Map* _msg = _internal_mutable_map_data();
  // @@protoc_insertion_point(field_mutable:meshtastic.DeviceUIConfig.map_data)
  return _msg;
}
inline void DeviceUIConfig::set_allocated_map_data(::meshtastic::Map* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.map_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008U;
  }

  _impl_.map_data_ = reinterpret_cast<::meshtastic::Map*>(value);
  // @@protoc_insertion_point(field_set_allocated:meshtastic.DeviceUIConfig.map_data)
}

// .meshtastic.CompassMode compass_mode = 16;
inline void DeviceUIConfig::clear_compass_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compass_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000U;
}
inline ::meshtastic::CompassMode DeviceUIConfig::compass_mode() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.compass_mode)
  return _internal_compass_mode();
}
inline void DeviceUIConfig::set_compass_mode(::meshtastic::CompassMode value) {
  _internal_set_compass_mode(value);
  _impl_._has_bits_[0] |= 0x00008000U;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceUIConfig.compass_mode)
}
inline ::meshtastic::CompassMode DeviceUIConfig::_internal_compass_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::meshtastic::CompassMode>(_impl_.compass_mode_);
}
inline void DeviceUIConfig::_internal_set_compass_mode(::meshtastic::CompassMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compass_mode_ = value;
}

// uint32 screen_rgb_color = 17;
inline void DeviceUIConfig::clear_screen_rgb_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screen_rgb_color_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000U;
}
inline ::uint32_t DeviceUIConfig::screen_rgb_color() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.screen_rgb_color)
  return _internal_screen_rgb_color();
}
inline void DeviceUIConfig::set_screen_rgb_color(::uint32_t value) {
  _internal_set_screen_rgb_color(value);
  _impl_._has_bits_[0] |= 0x00010000U;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceUIConfig.screen_rgb_color)
}
inline ::uint32_t DeviceUIConfig::_internal_screen_rgb_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.screen_rgb_color_;
}
inline void DeviceUIConfig::_internal_set_screen_rgb_color(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.screen_rgb_color_ = value;
}

// bool is_clockface_analog = 18;
inline void DeviceUIConfig::clear_is_clockface_analog() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_clockface_analog_ = false;
  _impl_._has_bits_[0] &= ~0x00020000U;
}
inline bool DeviceUIConfig::is_clockface_analog() const {
  // @@protoc_insertion_point(field_get:meshtastic.DeviceUIConfig.is_clockface_analog)
  return _internal_is_clockface_analog();
}
inline void DeviceUIConfig::set_is_clockface_analog(bool value) {
  _internal_set_is_clockface_analog(value);
  _impl_._has_bits_[0] |= 0x00020000U;
  // @@protoc_insertion_point(field_set:meshtastic.DeviceUIConfig.is_clockface_analog)
}
inline bool DeviceUIConfig::_internal_is_clockface_analog() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_clockface_analog_;
}
inline void DeviceUIConfig::_internal_set_is_clockface_analog(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_clockface_analog_ = value;
}

// -------------------------------------------------------------------

// NodeFilter

// bool unknown_switch = 1;
inline void NodeFilter::clear_unknown_switch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unknown_switch_ = false;
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline bool NodeFilter::unknown_switch() const {
  // @@protoc_insertion_point(field_get:meshtastic.NodeFilter.unknown_switch)
  return _internal_unknown_switch();
}
inline void NodeFilter::set_unknown_switch(bool value) {
  _internal_set_unknown_switch(value);
  _impl_._has_bits_[0] |= 0x00000002U;
  // @@protoc_insertion_point(field_set:meshtastic.NodeFilter.unknown_switch)
}
inline bool NodeFilter::_internal_unknown_switch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unknown_switch_;
}
inline void NodeFilter::_internal_set_unknown_switch(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unknown_switch_ = value;
}

// bool offline_switch = 2;
inline void NodeFilter::clear_offline_switch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offline_switch_ = false;
  _impl_._has_bits_[0] &= ~0x00000004U;
}
inline bool NodeFilter::offline_switch() const {
  // @@protoc_insertion_point(field_get:meshtastic.NodeFilter.offline_switch)
  return _internal_offline_switch();
}
inline void NodeFilter::set_offline_switch(bool value) {
  _internal_set_offline_switch(value);
  _impl_._has_bits_[0] |= 0x00000004U;
  // @@protoc_insertion_point(field_set:meshtastic.NodeFilter.offline_switch)
}
inline bool NodeFilter::_internal_offline_switch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.offline_switch_;
}
inline void NodeFilter::_internal_set_offline_switch(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offline_switch_ = value;
}

// bool public_key_switch = 3;
inline void NodeFilter::clear_public_key_switch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public_key_switch_ = false;
  _impl_._has_bits_[0] &= ~0x00000008U;
}
inline bool NodeFilter::public_key_switch() const {
  // @@protoc_insertion_point(field_get:meshtastic.NodeFilter.public_key_switch)
  return _internal_public_key_switch();
}
inline void NodeFilter::set_public_key_switch(bool value) {
  _internal_set_public_key_switch(value);
  _impl_._has_bits_[0] |= 0x00000008U;
  // @@protoc_insertion_point(field_set:meshtastic.NodeFilter.public_key_switch)
}
inline bool NodeFilter::_internal_public_key_switch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.public_key_switch_;
}
inline void NodeFilter::_internal_set_public_key_switch(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public_key_switch_ = value;
}

// int32 hops_away = 4;
inline void NodeFilter::clear_hops_away() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hops_away_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020U;
}
inline ::int32_t NodeFilter::hops_away() const {
  // @@protoc_insertion_point(field_get:meshtastic.NodeFilter.hops_away)
  return _internal_hops_away();
}
inline void NodeFilter::set_hops_away(::int32_t value) {
  _internal_set_hops_away(value);
  _impl_._has_bits_[0] |= 0x00000020U;
  // @@protoc_insertion_point(field_set:meshtastic.NodeFilter.hops_away)
}
inline ::int32_t NodeFilter::_internal_hops_away() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hops_away_;
}
inline void NodeFilter::_internal_set_hops_away(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hops_away_ = value;
}

// bool position_switch = 5;
inline void NodeFilter::clear_position_switch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_switch_ = false;
  _impl_._has_bits_[0] &= ~0x00000010U;
}
inline bool NodeFilter::position_switch() const {
  // @@protoc_insertion_point(field_get:meshtastic.NodeFilter.position_switch)
  return _internal_position_switch();
}
inline void NodeFilter::set_position_switch(bool value) {
  _internal_set_position_switch(value);
  _impl_._has_bits_[0] |= 0x00000010U;
  // @@protoc_insertion_point(field_set:meshtastic.NodeFilter.position_switch)
}
inline bool NodeFilter::_internal_position_switch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.position_switch_;
}
inline void NodeFilter::_internal_set_position_switch(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_switch_ = value;
}

// string node_name = 6;
inline void NodeFilter::clear_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& NodeFilter::node_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.NodeFilter.node_name)
  return _internal_node_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void NodeFilter::set_node_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.node_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:meshtastic.NodeFilter.node_name)
}
inline ::std::string* PROTOBUF_NONNULL NodeFilter::mutable_node_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_node_name();
  // @@protoc_insertion_point(field_mutable:meshtastic.NodeFilter.node_name)
  return _s;
}
inline const ::std::string& NodeFilter::_internal_node_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_name_.Get();
}
inline void NodeFilter::_internal_set_node_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.node_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL NodeFilter::_internal_mutable_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.node_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE NodeFilter::release_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.NodeFilter.node_name)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.node_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.node_name_.Set("", GetArena());
  }
  return released;
}
inline void NodeFilter::set_allocated_node_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.node_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_name_.IsDefault()) {
    _impl_.node_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.NodeFilter.node_name)
}

// int32 channel = 7;
inline void NodeFilter::clear_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040U;
}
inline ::int32_t NodeFilter::channel() const {
  // @@protoc_insertion_point(field_get:meshtastic.NodeFilter.channel)
  return _internal_channel();
}
inline void NodeFilter::set_channel(::int32_t value) {
  _internal_set_channel(value);
  _impl_._has_bits_[0] |= 0x00000040U;
  // @@protoc_insertion_point(field_set:meshtastic.NodeFilter.channel)
}
inline ::int32_t NodeFilter::_internal_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_;
}
inline void NodeFilter::_internal_set_channel(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_ = value;
}

// -------------------------------------------------------------------

// NodeHighlight

// bool chat_switch = 1;
inline void NodeHighlight::clear_chat_switch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chat_switch_ = false;
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline bool NodeHighlight::chat_switch() const {
  // @@protoc_insertion_point(field_get:meshtastic.NodeHighlight.chat_switch)
  return _internal_chat_switch();
}
inline void NodeHighlight::set_chat_switch(bool value) {
  _internal_set_chat_switch(value);
  _impl_._has_bits_[0] |= 0x00000002U;
  // @@protoc_insertion_point(field_set:meshtastic.NodeHighlight.chat_switch)
}
inline bool NodeHighlight::_internal_chat_switch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chat_switch_;
}
inline void NodeHighlight::_internal_set_chat_switch(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chat_switch_ = value;
}

// bool position_switch = 2;
inline void NodeHighlight::clear_position_switch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_switch_ = false;
  _impl_._has_bits_[0] &= ~0x00000004U;
}
inline bool NodeHighlight::position_switch() const {
  // @@protoc_insertion_point(field_get:meshtastic.NodeHighlight.position_switch)
  return _internal_position_switch();
}
inline void NodeHighlight::set_position_switch(bool value) {
  _internal_set_position_switch(value);
  _impl_._has_bits_[0] |= 0x00000004U;
  // @@protoc_insertion_point(field_set:meshtastic.NodeHighlight.position_switch)
}
inline bool NodeHighlight::_internal_position_switch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.position_switch_;
}
inline void NodeHighlight::_internal_set_position_switch(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_switch_ = value;
}

// bool telemetry_switch = 3;
inline void NodeHighlight::clear_telemetry_switch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.telemetry_switch_ = false;
  _impl_._has_bits_[0] &= ~0x00000008U;
}
inline bool NodeHighlight::telemetry_switch() const {
  // @@protoc_insertion_point(field_get:meshtastic.NodeHighlight.telemetry_switch)
  return _internal_telemetry_switch();
}
inline void NodeHighlight::set_telemetry_switch(bool value) {
  _internal_set_telemetry_switch(value);
  _impl_._has_bits_[0] |= 0x00000008U;
  // @@protoc_insertion_point(field_set:meshtastic.NodeHighlight.telemetry_switch)
}
inline bool NodeHighlight::_internal_telemetry_switch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.telemetry_switch_;
}
inline void NodeHighlight::_internal_set_telemetry_switch(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.telemetry_switch_ = value;
}

// bool iaq_switch = 4;
inline void NodeHighlight::clear_iaq_switch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iaq_switch_ = false;
  _impl_._has_bits_[0] &= ~0x00000010U;
}
inline bool NodeHighlight::iaq_switch() const {
  // @@protoc_insertion_point(field_get:meshtastic.NodeHighlight.iaq_switch)
  return _internal_iaq_switch();
}
inline void NodeHighlight::set_iaq_switch(bool value) {
  _internal_set_iaq_switch(value);
  _impl_._has_bits_[0] |= 0x00000010U;
  // @@protoc_insertion_point(field_set:meshtastic.NodeHighlight.iaq_switch)
}
inline bool NodeHighlight::_internal_iaq_switch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.iaq_switch_;
}
inline void NodeHighlight::_internal_set_iaq_switch(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iaq_switch_ = value;
}

// string node_name = 5;
inline void NodeHighlight::clear_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& NodeHighlight::node_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.NodeHighlight.node_name)
  return _internal_node_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void NodeHighlight::set_node_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.node_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:meshtastic.NodeHighlight.node_name)
}
inline ::std::string* PROTOBUF_NONNULL NodeHighlight::mutable_node_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_node_name();
  // @@protoc_insertion_point(field_mutable:meshtastic.NodeHighlight.node_name)
  return _s;
}
inline const ::std::string& NodeHighlight::_internal_node_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_name_.Get();
}
inline void NodeHighlight::_internal_set_node_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.node_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL NodeHighlight::_internal_mutable_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.node_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE NodeHighlight::release_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.NodeHighlight.node_name)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.node_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.node_name_.Set("", GetArena());
  }
  return released;
}
inline void NodeHighlight::set_allocated_node_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.node_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_name_.IsDefault()) {
    _impl_.node_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.NodeHighlight.node_name)
}

// -------------------------------------------------------------------

// GeoPoint

// int32 zoom = 1;
inline void GeoPoint::clear_zoom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zoom_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline ::int32_t GeoPoint::zoom() const {
  // @@protoc_insertion_point(field_get:meshtastic.GeoPoint.zoom)
  return _internal_zoom();
}
inline void GeoPoint::set_zoom(::int32_t value) {
  _internal_set_zoom(value);
  _impl_._has_bits_[0] |= 0x00000001U;
  // @@protoc_insertion_point(field_set:meshtastic.GeoPoint.zoom)
}
inline ::int32_t GeoPoint::_internal_zoom() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.zoom_;
}
inline void GeoPoint::_internal_set_zoom(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zoom_ = value;
}

// int32 latitude = 2;
inline void GeoPoint::clear_latitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline ::int32_t GeoPoint::latitude() const {
  // @@protoc_insertion_point(field_get:meshtastic.GeoPoint.latitude)
  return _internal_latitude();
}
inline void GeoPoint::set_latitude(::int32_t value) {
  _internal_set_latitude(value);
  _impl_._has_bits_[0] |= 0x00000002U;
  // @@protoc_insertion_point(field_set:meshtastic.GeoPoint.latitude)
}
inline ::int32_t GeoPoint::_internal_latitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latitude_;
}
inline void GeoPoint::_internal_set_latitude(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_ = value;
}

// int32 longitude = 3;
inline void GeoPoint::clear_longitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004U;
}
inline ::int32_t GeoPoint::longitude() const {
  // @@protoc_insertion_point(field_get:meshtastic.GeoPoint.longitude)
  return _internal_longitude();
}
inline void GeoPoint::set_longitude(::int32_t value) {
  _internal_set_longitude(value);
  _impl_._has_bits_[0] |= 0x00000004U;
  // @@protoc_insertion_point(field_set:meshtastic.GeoPoint.longitude)
}
inline ::int32_t GeoPoint::_internal_longitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longitude_;
}
inline void GeoPoint::_internal_set_longitude(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_ = value;
}

// -------------------------------------------------------------------

// Map

// .meshtastic.GeoPoint home = 1;
inline bool Map::has_home() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.home_ != nullptr);
  return value;
}
inline void Map::clear_home() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.home_ != nullptr) _impl_.home_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline const ::meshtastic::GeoPoint& Map::_internal_home() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::meshtastic::GeoPoint* p = _impl_.home_;
  return p != nullptr ? *p : reinterpret_cast<const ::meshtastic::GeoPoint&>(::meshtastic::_GeoPoint_default_instance_);
}
inline const ::meshtastic::GeoPoint& Map::home() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.Map.home)
  return _internal_home();
}
inline void Map::unsafe_arena_set_allocated_home(
    ::meshtastic::GeoPoint* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.home_);
  }
  _impl_.home_ = reinterpret_cast<::meshtastic::GeoPoint*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.Map.home)
}
inline ::meshtastic::GeoPoint* PROTOBUF_NULLABLE Map::release_home() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002U;
  ::meshtastic::GeoPoint* released = _impl_.home_;
  _impl_.home_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::meshtastic::GeoPoint* PROTOBUF_NULLABLE Map::unsafe_arena_release_home() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.Map.home)

  _impl_._has_bits_[0] &= ~0x00000002U;
  ::meshtastic::GeoPoint* temp = _impl_.home_;
  _impl_.home_ = nullptr;
  return temp;
}
inline ::meshtastic::GeoPoint* PROTOBUF_NONNULL Map::_internal_mutable_home() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.home_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::meshtastic::GeoPoint>(GetArena());
    _impl_.home_ = reinterpret_cast<::meshtastic::GeoPoint*>(p);
  }
  return _impl_.home_;
}
inline ::meshtastic::GeoPoint* PROTOBUF_NONNULL Map::mutable_home()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002U;
  ::meshtastic::GeoPoint* _msg = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:meshtastic.Map.home)
  return _msg;
}
inline void Map::set_allocated_home(::meshtastic::GeoPoint* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.home_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }

  _impl_.home_ = reinterpret_cast<::meshtastic::GeoPoint*>(value);
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Map.home)
}

// string style = 2;
inline void Map::clear_style() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.style_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& Map::style() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.Map.style)
  return _internal_style();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Map::set_style(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.style_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:meshtastic.Map.style)
}
inline ::std::string* PROTOBUF_NONNULL Map::mutable_style()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:meshtastic.Map.style)
  return _s;
}
inline const ::std::string& Map::_internal_style() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.style_.Get();
}
inline void Map::_internal_set_style(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.style_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Map::_internal_mutable_style() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.style_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Map::release_style() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.Map.style)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.style_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.style_.Set("", GetArena());
  }
  return released;
}
inline void Map::set_allocated_style(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.style_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.style_.IsDefault()) {
    _impl_.style_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Map.style)
}

// bool follow_gps = 3;
inline void Map::clear_follow_gps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.follow_gps_ = false;
  _impl_._has_bits_[0] &= ~0x00000004U;
}
inline bool Map::follow_gps() const {
  // @@protoc_insertion_point(field_get:meshtastic.Map.follow_gps)
  return _internal_follow_gps();
}
inline void Map::set_follow_gps(bool value) {
  _internal_set_follow_gps(value);
  _impl_._has_bits_[0] |= 0x00000004U;
  // @@protoc_insertion_point(field_set:meshtastic.Map.follow_gps)
}
inline bool Map::_internal_follow_gps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.follow_gps_;
}
inline void Map::_internal_set_follow_gps(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.follow_gps_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace meshtastic


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::meshtastic::CompassMode> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::meshtastic::CompassMode>() {
  return ::meshtastic::CompassMode_descriptor();
}
template <>
struct is_proto_enum<::meshtastic::Theme> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::meshtastic::Theme>() {
  return ::meshtastic::Theme_descriptor();
}
template <>
struct is_proto_enum<::meshtastic::Language> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::meshtastic::Language>() {
  return ::meshtastic::Language_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // meshtastic_2fdevice_5fui_2eproto_2epb_2eh
