// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: meshtastic/atak.proto
// Protobuf C++ Version: 6.32.0

#ifndef meshtastic_2fatak_2eproto_2epb_2eh
#define meshtastic_2fatak_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6032000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_meshtastic_2fatak_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_meshtastic_2fatak_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_meshtastic_2fatak_2eproto;
}  // extern "C"
namespace meshtastic {
enum MemberRole : int;
extern const uint32_t MemberRole_internal_data_[];
enum Team : int;
extern const uint32_t Team_internal_data_[];
class Contact;
struct ContactDefaultTypeInternal;
extern ContactDefaultTypeInternal _Contact_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Contact_class_data_;
class GeoChat;
struct GeoChatDefaultTypeInternal;
extern GeoChatDefaultTypeInternal _GeoChat_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull GeoChat_class_data_;
class Group;
struct GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Group_class_data_;
class PLI;
struct PLIDefaultTypeInternal;
extern PLIDefaultTypeInternal _PLI_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull PLI_class_data_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Status_class_data_;
class TAKPacket;
struct TAKPacketDefaultTypeInternal;
extern TAKPacketDefaultTypeInternal _TAKPacket_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TAKPacket_class_data_;
}  // namespace meshtastic
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::meshtastic::MemberRole_internal_data_>
    internal::EnumTraitsImpl::value<::meshtastic::MemberRole>;
template <>
internal::EnumTraitsT<::meshtastic::Team_internal_data_>
    internal::EnumTraitsImpl::value<::meshtastic::Team>;
}  // namespace protobuf
}  // namespace google

namespace meshtastic {
enum Team : int {
  Unspecifed_Color = 0,
  White = 1,
  Yellow = 2,
  Orange = 3,
  Magenta = 4,
  Red = 5,
  Maroon = 6,
  Purple = 7,
  Dark_Blue = 8,
  Blue = 9,
  Cyan = 10,
  Teal = 11,
  Green = 12,
  Dark_Green = 13,
  Brown = 14,
  Team_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Team_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Team_internal_data_[];
inline constexpr Team Team_MIN =
    static_cast<Team>(0);
inline constexpr Team Team_MAX =
    static_cast<Team>(14);
inline bool Team_IsValid(int value) {
  return 0 <= value && value <= 14;
}
inline constexpr int Team_ARRAYSIZE = 14 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Team_descriptor();
template <typename T>
const ::std::string& Team_Name(T value) {
  static_assert(::std::is_same<T, Team>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Team_Name().");
  return Team_Name(static_cast<Team>(value));
}
template <>
inline const ::std::string& Team_Name(Team value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Team_descriptor, 0, 14>(
      static_cast<int>(value));
}
inline bool Team_Parse(
    ::absl::string_view name, Team* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Team>(Team_descriptor(), name,
                                           value);
}
enum MemberRole : int {
  Unspecifed = 0,
  TeamMember = 1,
  TeamLead = 2,
  HQ = 3,
  Sniper = 4,
  Medic = 5,
  ForwardObserver = 6,
  RTO = 7,
  K9 = 8,
  MemberRole_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  MemberRole_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t MemberRole_internal_data_[];
inline constexpr MemberRole MemberRole_MIN =
    static_cast<MemberRole>(0);
inline constexpr MemberRole MemberRole_MAX =
    static_cast<MemberRole>(8);
inline bool MemberRole_IsValid(int value) {
  return 0 <= value && value <= 8;
}
inline constexpr int MemberRole_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL MemberRole_descriptor();
template <typename T>
const ::std::string& MemberRole_Name(T value) {
  static_assert(::std::is_same<T, MemberRole>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to MemberRole_Name().");
  return MemberRole_Name(static_cast<MemberRole>(value));
}
template <>
inline const ::std::string& MemberRole_Name(MemberRole value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MemberRole_descriptor, 0, 8>(
      static_cast<int>(value));
}
inline bool MemberRole_Parse(
    ::absl::string_view name, MemberRole* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<MemberRole>(MemberRole_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class Status final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Status* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Status));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Status(::google::protobuf::internal::ConstantInitialized);

  inline Status(const Status& from) : Status(nullptr, from) {}
  inline Status(Status&& from) noexcept
      : Status(nullptr, ::std::move(from)) {}
  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *reinterpret_cast<const Status*>(
        &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Status& a, Status& b) { a.Swap(&b); }
  inline void Swap(Status* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Status>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Status& from) { Status::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Status* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.Status"; }

 protected:
  explicit Status(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Status(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Status& from);
  Status(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Status&& from) noexcept
      : Status(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBatteryFieldNumber = 1,
  };
  // uint32 battery = 1;
  void clear_battery() ;
  ::uint32_t battery() const;
  void set_battery(::uint32_t value);

  private:
  ::uint32_t _internal_battery() const;
  void _internal_set_battery(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.Status)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Status& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t battery_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2fatak_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Status_class_data_;
// -------------------------------------------------------------------

class PLI final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.PLI) */ {
 public:
  inline PLI() : PLI(nullptr) {}
  ~PLI() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PLI* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PLI));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PLI(::google::protobuf::internal::ConstantInitialized);

  inline PLI(const PLI& from) : PLI(nullptr, from) {}
  inline PLI(PLI&& from) noexcept
      : PLI(nullptr, ::std::move(from)) {}
  inline PLI& operator=(const PLI& from) {
    CopyFrom(from);
    return *this;
  }
  inline PLI& operator=(PLI&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PLI& default_instance() {
    return *reinterpret_cast<const PLI*>(
        &_PLI_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(PLI& a, PLI& b) { a.Swap(&b); }
  inline void Swap(PLI* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PLI* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PLI* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PLI>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PLI& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PLI& from) { PLI::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PLI* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.PLI"; }

 protected:
  explicit PLI(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  PLI(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const PLI& from);
  PLI(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, PLI&& from) noexcept
      : PLI(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLatitudeIFieldNumber = 1,
    kLongitudeIFieldNumber = 2,
    kAltitudeFieldNumber = 3,
    kSpeedFieldNumber = 4,
    kCourseFieldNumber = 5,
  };
  // sfixed32 latitude_i = 1;
  void clear_latitude_i() ;
  ::int32_t latitude_i() const;
  void set_latitude_i(::int32_t value);

  private:
  ::int32_t _internal_latitude_i() const;
  void _internal_set_latitude_i(::int32_t value);

  public:
  // sfixed32 longitude_i = 2;
  void clear_longitude_i() ;
  ::int32_t longitude_i() const;
  void set_longitude_i(::int32_t value);

  private:
  ::int32_t _internal_longitude_i() const;
  void _internal_set_longitude_i(::int32_t value);

  public:
  // int32 altitude = 3;
  void clear_altitude() ;
  ::int32_t altitude() const;
  void set_altitude(::int32_t value);

  private:
  ::int32_t _internal_altitude() const;
  void _internal_set_altitude(::int32_t value);

  public:
  // uint32 speed = 4;
  void clear_speed() ;
  ::uint32_t speed() const;
  void set_speed(::uint32_t value);

  private:
  ::uint32_t _internal_speed() const;
  void _internal_set_speed(::uint32_t value);

  public:
  // uint32 course = 5;
  void clear_course() ;
  ::uint32_t course() const;
  void set_course(::uint32_t value);

  private:
  ::uint32_t _internal_course() const;
  void _internal_set_course(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.PLI)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const PLI& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t latitude_i_;
    ::int32_t longitude_i_;
    ::int32_t altitude_;
    ::uint32_t speed_;
    ::uint32_t course_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2fatak_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull PLI_class_data_;
// -------------------------------------------------------------------

class Group final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.Group) */ {
 public:
  inline Group() : Group(nullptr) {}
  ~Group() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Group* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Group));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Group(::google::protobuf::internal::ConstantInitialized);

  inline Group(const Group& from) : Group(nullptr, from) {}
  inline Group(Group&& from) noexcept
      : Group(nullptr, ::std::move(from)) {}
  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline Group& operator=(Group&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Group& default_instance() {
    return *reinterpret_cast<const Group*>(
        &_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Group& a, Group& b) { a.Swap(&b); }
  inline void Swap(Group* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Group* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Group* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Group>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Group& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Group& from) { Group::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Group* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.Group"; }

 protected:
  explicit Group(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Group(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Group& from);
  Group(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Group&& from) noexcept
      : Group(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRoleFieldNumber = 1,
    kTeamFieldNumber = 2,
  };
  // .meshtastic.MemberRole role = 1;
  void clear_role() ;
  ::meshtastic::MemberRole role() const;
  void set_role(::meshtastic::MemberRole value);

  private:
  ::meshtastic::MemberRole _internal_role() const;
  void _internal_set_role(::meshtastic::MemberRole value);

  public:
  // .meshtastic.Team team = 2;
  void clear_team() ;
  ::meshtastic::Team team() const;
  void set_team(::meshtastic::Team value);

  private:
  ::meshtastic::Team _internal_team() const;
  void _internal_set_team(::meshtastic::Team value);

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.Group)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Group& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int role_;
    int team_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2fatak_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Group_class_data_;
// -------------------------------------------------------------------

class GeoChat final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.GeoChat) */ {
 public:
  inline GeoChat() : GeoChat(nullptr) {}
  ~GeoChat() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GeoChat* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GeoChat));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GeoChat(::google::protobuf::internal::ConstantInitialized);

  inline GeoChat(const GeoChat& from) : GeoChat(nullptr, from) {}
  inline GeoChat(GeoChat&& from) noexcept
      : GeoChat(nullptr, ::std::move(from)) {}
  inline GeoChat& operator=(const GeoChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoChat& operator=(GeoChat&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeoChat& default_instance() {
    return *reinterpret_cast<const GeoChat*>(
        &_GeoChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GeoChat& a, GeoChat& b) { a.Swap(&b); }
  inline void Swap(GeoChat* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoChat* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeoChat* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GeoChat>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GeoChat& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GeoChat& from) { GeoChat::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GeoChat* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.GeoChat"; }

 protected:
  explicit GeoChat(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  GeoChat(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const GeoChat& from);
  GeoChat(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, GeoChat&& from) noexcept
      : GeoChat(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
    kToFieldNumber = 2,
    kToCallsignFieldNumber = 3,
  };
  // string message = 1;
  void clear_message() ;
  const ::std::string& message() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_message();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_message();
  void set_allocated_message(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_message() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_message(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_message();

  public:
  // optional string to = 2;
  bool has_to() const;
  void clear_to() ;
  const ::std::string& to() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_to(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_to();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_to();
  void set_allocated_to(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_to() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_to(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_to();

  public:
  // optional string to_callsign = 3;
  bool has_to_callsign() const;
  void clear_to_callsign() ;
  const ::std::string& to_callsign() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_to_callsign(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_to_callsign();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_to_callsign();
  void set_allocated_to_callsign(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_to_callsign() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_to_callsign(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_to_callsign();

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.GeoChat)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 47,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const GeoChat& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr to_;
    ::google::protobuf::internal::ArenaStringPtr to_callsign_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2fatak_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull GeoChat_class_data_;
// -------------------------------------------------------------------

class Contact final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.Contact) */ {
 public:
  inline Contact() : Contact(nullptr) {}
  ~Contact() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Contact* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Contact));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Contact(::google::protobuf::internal::ConstantInitialized);

  inline Contact(const Contact& from) : Contact(nullptr, from) {}
  inline Contact(Contact&& from) noexcept
      : Contact(nullptr, ::std::move(from)) {}
  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }
  inline Contact& operator=(Contact&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Contact& default_instance() {
    return *reinterpret_cast<const Contact*>(
        &_Contact_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Contact& a, Contact& b) { a.Swap(&b); }
  inline void Swap(Contact* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Contact* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Contact* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Contact>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Contact& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Contact& from) { Contact::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Contact* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.Contact"; }

 protected:
  explicit Contact(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Contact(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Contact& from);
  Contact(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Contact&& from) noexcept
      : Contact(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCallsignFieldNumber = 1,
    kDeviceCallsignFieldNumber = 2,
  };
  // string callsign = 1;
  void clear_callsign() ;
  const ::std::string& callsign() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_callsign(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_callsign();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_callsign();
  void set_allocated_callsign(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_callsign() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_callsign(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_callsign();

  public:
  // string device_callsign = 2;
  void clear_device_callsign() ;
  const ::std::string& device_callsign() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_device_callsign(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_device_callsign();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_device_callsign();
  void set_allocated_device_callsign(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_device_callsign() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_device_callsign(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_device_callsign();

  public:
  // @@protoc_insertion_point(class_scope:meshtastic.Contact)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 50,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Contact& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr callsign_;
    ::google::protobuf::internal::ArenaStringPtr device_callsign_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2fatak_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Contact_class_data_;
// -------------------------------------------------------------------

class TAKPacket final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:meshtastic.TAKPacket) */ {
 public:
  inline TAKPacket() : TAKPacket(nullptr) {}
  ~TAKPacket() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TAKPacket* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TAKPacket));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TAKPacket(::google::protobuf::internal::ConstantInitialized);

  inline TAKPacket(const TAKPacket& from) : TAKPacket(nullptr, from) {}
  inline TAKPacket(TAKPacket&& from) noexcept
      : TAKPacket(nullptr, ::std::move(from)) {}
  inline TAKPacket& operator=(const TAKPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline TAKPacket& operator=(TAKPacket&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TAKPacket& default_instance() {
    return *reinterpret_cast<const TAKPacket*>(
        &_TAKPacket_default_instance_);
  }
  enum PayloadVariantCase {
    kPli = 5,
    kChat = 6,
    kDetail = 7,
    PAYLOAD_VARIANT_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TAKPacket& a, TAKPacket& b) { a.Swap(&b); }
  inline void Swap(TAKPacket* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TAKPacket* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TAKPacket* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TAKPacket>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TAKPacket& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TAKPacket& from) { TAKPacket::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TAKPacket* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "meshtastic.TAKPacket"; }

 protected:
  explicit TAKPacket(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TAKPacket(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TAKPacket& from);
  TAKPacket(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TAKPacket&& from) noexcept
      : TAKPacket(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContactFieldNumber = 2,
    kGroupFieldNumber = 3,
    kStatusFieldNumber = 4,
    kIsCompressedFieldNumber = 1,
    kPliFieldNumber = 5,
    kChatFieldNumber = 6,
    kDetailFieldNumber = 7,
  };
  // .meshtastic.Contact contact = 2;
  bool has_contact() const;
  void clear_contact() ;
  const ::meshtastic::Contact& contact() const;
  [[nodiscard]] ::meshtastic::Contact* PROTOBUF_NULLABLE release_contact();
  ::meshtastic::Contact* PROTOBUF_NONNULL mutable_contact();
  void set_allocated_contact(::meshtastic::Contact* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_contact(::meshtastic::Contact* PROTOBUF_NULLABLE value);
  ::meshtastic::Contact* PROTOBUF_NULLABLE unsafe_arena_release_contact();

  private:
  const ::meshtastic::Contact& _internal_contact() const;
  ::meshtastic::Contact* PROTOBUF_NONNULL _internal_mutable_contact();

  public:
  // .meshtastic.Group group = 3;
  bool has_group() const;
  void clear_group() ;
  const ::meshtastic::Group& group() const;
  [[nodiscard]] ::meshtastic::Group* PROTOBUF_NULLABLE release_group();
  ::meshtastic::Group* PROTOBUF_NONNULL mutable_group();
  void set_allocated_group(::meshtastic::Group* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_group(::meshtastic::Group* PROTOBUF_NULLABLE value);
  ::meshtastic::Group* PROTOBUF_NULLABLE unsafe_arena_release_group();

  private:
  const ::meshtastic::Group& _internal_group() const;
  ::meshtastic::Group* PROTOBUF_NONNULL _internal_mutable_group();

  public:
  // .meshtastic.Status status = 4;
  bool has_status() const;
  void clear_status() ;
  const ::meshtastic::Status& status() const;
  [[nodiscard]] ::meshtastic::Status* PROTOBUF_NULLABLE release_status();
  ::meshtastic::Status* PROTOBUF_NONNULL mutable_status();
  void set_allocated_status(::meshtastic::Status* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_status(::meshtastic::Status* PROTOBUF_NULLABLE value);
  ::meshtastic::Status* PROTOBUF_NULLABLE unsafe_arena_release_status();

  private:
  const ::meshtastic::Status& _internal_status() const;
  ::meshtastic::Status* PROTOBUF_NONNULL _internal_mutable_status();

  public:
  // bool is_compressed = 1;
  void clear_is_compressed() ;
  bool is_compressed() const;
  void set_is_compressed(bool value);

  private:
  bool _internal_is_compressed() const;
  void _internal_set_is_compressed(bool value);

  public:
  // .meshtastic.PLI pli = 5;
  bool has_pli() const;
  private:
  bool _internal_has_pli() const;

  public:
  void clear_pli() ;
  const ::meshtastic::PLI& pli() const;
  [[nodiscard]] ::meshtastic::PLI* PROTOBUF_NULLABLE release_pli();
  ::meshtastic::PLI* PROTOBUF_NONNULL mutable_pli();
  void set_allocated_pli(::meshtastic::PLI* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_pli(::meshtastic::PLI* PROTOBUF_NULLABLE value);
  ::meshtastic::PLI* PROTOBUF_NULLABLE unsafe_arena_release_pli();

  private:
  const ::meshtastic::PLI& _internal_pli() const;
  ::meshtastic::PLI* PROTOBUF_NONNULL _internal_mutable_pli();

  public:
  // .meshtastic.GeoChat chat = 6;
  bool has_chat() const;
  private:
  bool _internal_has_chat() const;

  public:
  void clear_chat() ;
  const ::meshtastic::GeoChat& chat() const;
  [[nodiscard]] ::meshtastic::GeoChat* PROTOBUF_NULLABLE release_chat();
  ::meshtastic::GeoChat* PROTOBUF_NONNULL mutable_chat();
  void set_allocated_chat(::meshtastic::GeoChat* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_chat(::meshtastic::GeoChat* PROTOBUF_NULLABLE value);
  ::meshtastic::GeoChat* PROTOBUF_NULLABLE unsafe_arena_release_chat();

  private:
  const ::meshtastic::GeoChat& _internal_chat() const;
  ::meshtastic::GeoChat* PROTOBUF_NONNULL _internal_mutable_chat();

  public:
  // bytes detail = 7;
  bool has_detail() const;
  void clear_detail() ;
  const ::std::string& detail() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_detail(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_detail();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_detail();
  void set_allocated_detail(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_detail() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_detail(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_detail();

  public:
  void clear_payload_variant();
  PayloadVariantCase payload_variant_case() const;
  // @@protoc_insertion_point(class_scope:meshtastic.TAKPacket)
 private:
  class _Internal;
  void set_has_pli();
  void set_has_chat();
  void set_has_detail();
  inline bool has_payload_variant() const;
  inline void clear_has_payload_variant();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 7,
                                   5, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TAKPacket& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::meshtastic::Contact* PROTOBUF_NULLABLE contact_;
    ::meshtastic::Group* PROTOBUF_NULLABLE group_;
    ::meshtastic::Status* PROTOBUF_NULLABLE status_;
    bool is_compressed_;
    union PayloadVariantUnion {
      constexpr PayloadVariantUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::meshtastic::PLI* PROTOBUF_NULLABLE pli_;
      ::meshtastic::GeoChat* PROTOBUF_NULLABLE chat_;
      ::google::protobuf::internal::ArenaStringPtr detail_;
    } payload_variant_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshtastic_2fatak_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TAKPacket_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TAKPacket

// bool is_compressed = 1;
inline void TAKPacket::clear_is_compressed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_compressed_ = false;
  _impl_._has_bits_[0] &= ~0x00000008U;
}
inline bool TAKPacket::is_compressed() const {
  // @@protoc_insertion_point(field_get:meshtastic.TAKPacket.is_compressed)
  return _internal_is_compressed();
}
inline void TAKPacket::set_is_compressed(bool value) {
  _internal_set_is_compressed(value);
  _impl_._has_bits_[0] |= 0x00000008U;
  // @@protoc_insertion_point(field_set:meshtastic.TAKPacket.is_compressed)
}
inline bool TAKPacket::_internal_is_compressed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_compressed_;
}
inline void TAKPacket::_internal_set_is_compressed(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_compressed_ = value;
}

// .meshtastic.Contact contact = 2;
inline bool TAKPacket::has_contact() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contact_ != nullptr);
  return value;
}
inline void TAKPacket::clear_contact() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.contact_ != nullptr) _impl_.contact_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::meshtastic::Contact& TAKPacket::_internal_contact() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::meshtastic::Contact* p = _impl_.contact_;
  return p != nullptr ? *p : reinterpret_cast<const ::meshtastic::Contact&>(::meshtastic::_Contact_default_instance_);
}
inline const ::meshtastic::Contact& TAKPacket::contact() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.TAKPacket.contact)
  return _internal_contact();
}
inline void TAKPacket::unsafe_arena_set_allocated_contact(
    ::meshtastic::Contact* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.contact_);
  }
  _impl_.contact_ = reinterpret_cast<::meshtastic::Contact*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.TAKPacket.contact)
}
inline ::meshtastic::Contact* PROTOBUF_NULLABLE TAKPacket::release_contact() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001U;
  ::meshtastic::Contact* released = _impl_.contact_;
  _impl_.contact_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::meshtastic::Contact* PROTOBUF_NULLABLE TAKPacket::unsafe_arena_release_contact() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.TAKPacket.contact)

  _impl_._has_bits_[0] &= ~0x00000001U;
  ::meshtastic::Contact* temp = _impl_.contact_;
  _impl_.contact_ = nullptr;
  return temp;
}
inline ::meshtastic::Contact* PROTOBUF_NONNULL TAKPacket::_internal_mutable_contact() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.contact_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::meshtastic::Contact>(GetArena());
    _impl_.contact_ = reinterpret_cast<::meshtastic::Contact*>(p);
  }
  return _impl_.contact_;
}
inline ::meshtastic::Contact* PROTOBUF_NONNULL TAKPacket::mutable_contact()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001U;
  ::meshtastic::Contact* _msg = _internal_mutable_contact();
  // @@protoc_insertion_point(field_mutable:meshtastic.TAKPacket.contact)
  return _msg;
}
inline void TAKPacket::set_allocated_contact(::meshtastic::Contact* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.contact_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }

  _impl_.contact_ = reinterpret_cast<::meshtastic::Contact*>(value);
  // @@protoc_insertion_point(field_set_allocated:meshtastic.TAKPacket.contact)
}

// .meshtastic.Group group = 3;
inline bool TAKPacket::has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.group_ != nullptr);
  return value;
}
inline void TAKPacket::clear_group() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.group_ != nullptr) _impl_.group_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline const ::meshtastic::Group& TAKPacket::_internal_group() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::meshtastic::Group* p = _impl_.group_;
  return p != nullptr ? *p : reinterpret_cast<const ::meshtastic::Group&>(::meshtastic::_Group_default_instance_);
}
inline const ::meshtastic::Group& TAKPacket::group() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.TAKPacket.group)
  return _internal_group();
}
inline void TAKPacket::unsafe_arena_set_allocated_group(
    ::meshtastic::Group* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.group_);
  }
  _impl_.group_ = reinterpret_cast<::meshtastic::Group*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.TAKPacket.group)
}
inline ::meshtastic::Group* PROTOBUF_NULLABLE TAKPacket::release_group() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002U;
  ::meshtastic::Group* released = _impl_.group_;
  _impl_.group_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::meshtastic::Group* PROTOBUF_NULLABLE TAKPacket::unsafe_arena_release_group() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.TAKPacket.group)

  _impl_._has_bits_[0] &= ~0x00000002U;
  ::meshtastic::Group* temp = _impl_.group_;
  _impl_.group_ = nullptr;
  return temp;
}
inline ::meshtastic::Group* PROTOBUF_NONNULL TAKPacket::_internal_mutable_group() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.group_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::meshtastic::Group>(GetArena());
    _impl_.group_ = reinterpret_cast<::meshtastic::Group*>(p);
  }
  return _impl_.group_;
}
inline ::meshtastic::Group* PROTOBUF_NONNULL TAKPacket::mutable_group()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002U;
  ::meshtastic::Group* _msg = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:meshtastic.TAKPacket.group)
  return _msg;
}
inline void TAKPacket::set_allocated_group(::meshtastic::Group* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.group_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }

  _impl_.group_ = reinterpret_cast<::meshtastic::Group*>(value);
  // @@protoc_insertion_point(field_set_allocated:meshtastic.TAKPacket.group)
}

// .meshtastic.Status status = 4;
inline bool TAKPacket::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004U) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline void TAKPacket::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004U;
}
inline const ::meshtastic::Status& TAKPacket::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::meshtastic::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::meshtastic::Status&>(::meshtastic::_Status_default_instance_);
}
inline const ::meshtastic::Status& TAKPacket::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.TAKPacket.status)
  return _internal_status();
}
inline void TAKPacket::unsafe_arena_set_allocated_status(
    ::meshtastic::Status* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = reinterpret_cast<::meshtastic::Status*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.TAKPacket.status)
}
inline ::meshtastic::Status* PROTOBUF_NULLABLE TAKPacket::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004U;
  ::meshtastic::Status* released = _impl_.status_;
  _impl_.status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::meshtastic::Status* PROTOBUF_NULLABLE TAKPacket::unsafe_arena_release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.TAKPacket.status)

  _impl_._has_bits_[0] &= ~0x00000004U;
  ::meshtastic::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::meshtastic::Status* PROTOBUF_NONNULL TAKPacket::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::meshtastic::Status>(GetArena());
    _impl_.status_ = reinterpret_cast<::meshtastic::Status*>(p);
  }
  return _impl_.status_;
}
inline ::meshtastic::Status* PROTOBUF_NONNULL TAKPacket::mutable_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004U;
  ::meshtastic::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:meshtastic.TAKPacket.status)
  return _msg;
}
inline void TAKPacket::set_allocated_status(::meshtastic::Status* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }

  _impl_.status_ = reinterpret_cast<::meshtastic::Status*>(value);
  // @@protoc_insertion_point(field_set_allocated:meshtastic.TAKPacket.status)
}

// .meshtastic.PLI pli = 5;
inline bool TAKPacket::has_pli() const {
  return payload_variant_case() == kPli;
}
inline bool TAKPacket::_internal_has_pli() const {
  return payload_variant_case() == kPli;
}
inline void TAKPacket::set_has_pli() {
  _impl_._oneof_case_[0] = kPli;
}
inline void TAKPacket::clear_pli() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_variant_case() == kPli) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_variant_.pli_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_variant_.pli_);
    }
    clear_has_payload_variant();
  }
}
inline ::meshtastic::PLI* PROTOBUF_NULLABLE TAKPacket::release_pli() {
  // @@protoc_insertion_point(field_release:meshtastic.TAKPacket.pli)
  if (payload_variant_case() == kPli) {
    clear_has_payload_variant();
    auto* temp = _impl_.payload_variant_.pli_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_variant_.pli_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::meshtastic::PLI& TAKPacket::_internal_pli() const {
  return payload_variant_case() == kPli ? *_impl_.payload_variant_.pli_ : reinterpret_cast<::meshtastic::PLI&>(::meshtastic::_PLI_default_instance_);
}
inline const ::meshtastic::PLI& TAKPacket::pli() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.TAKPacket.pli)
  return _internal_pli();
}
inline ::meshtastic::PLI* PROTOBUF_NULLABLE TAKPacket::unsafe_arena_release_pli() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meshtastic.TAKPacket.pli)
  if (payload_variant_case() == kPli) {
    clear_has_payload_variant();
    auto* temp = _impl_.payload_variant_.pli_;
    _impl_.payload_variant_.pli_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TAKPacket::unsafe_arena_set_allocated_pli(
    ::meshtastic::PLI* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload_variant();
  if (value) {
    set_has_pli();
    _impl_.payload_variant_.pli_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.TAKPacket.pli)
}
inline ::meshtastic::PLI* PROTOBUF_NONNULL TAKPacket::_internal_mutable_pli() {
  if (payload_variant_case() != kPli) {
    clear_payload_variant();
    set_has_pli();
    _impl_.payload_variant_.pli_ = 
        ::google::protobuf::Message::DefaultConstruct<::meshtastic::PLI>(GetArena());
  }
  return _impl_.payload_variant_.pli_;
}
inline ::meshtastic::PLI* PROTOBUF_NONNULL TAKPacket::mutable_pli()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::meshtastic::PLI* _msg = _internal_mutable_pli();
  // @@protoc_insertion_point(field_mutable:meshtastic.TAKPacket.pli)
  return _msg;
}

// .meshtastic.GeoChat chat = 6;
inline bool TAKPacket::has_chat() const {
  return payload_variant_case() == kChat;
}
inline bool TAKPacket::_internal_has_chat() const {
  return payload_variant_case() == kChat;
}
inline void TAKPacket::set_has_chat() {
  _impl_._oneof_case_[0] = kChat;
}
inline void TAKPacket::clear_chat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_variant_case() == kChat) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_variant_.chat_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_variant_.chat_);
    }
    clear_has_payload_variant();
  }
}
inline ::meshtastic::GeoChat* PROTOBUF_NULLABLE TAKPacket::release_chat() {
  // @@protoc_insertion_point(field_release:meshtastic.TAKPacket.chat)
  if (payload_variant_case() == kChat) {
    clear_has_payload_variant();
    auto* temp = _impl_.payload_variant_.chat_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_variant_.chat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::meshtastic::GeoChat& TAKPacket::_internal_chat() const {
  return payload_variant_case() == kChat ? *_impl_.payload_variant_.chat_ : reinterpret_cast<::meshtastic::GeoChat&>(::meshtastic::_GeoChat_default_instance_);
}
inline const ::meshtastic::GeoChat& TAKPacket::chat() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.TAKPacket.chat)
  return _internal_chat();
}
inline ::meshtastic::GeoChat* PROTOBUF_NULLABLE TAKPacket::unsafe_arena_release_chat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meshtastic.TAKPacket.chat)
  if (payload_variant_case() == kChat) {
    clear_has_payload_variant();
    auto* temp = _impl_.payload_variant_.chat_;
    _impl_.payload_variant_.chat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TAKPacket::unsafe_arena_set_allocated_chat(
    ::meshtastic::GeoChat* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload_variant();
  if (value) {
    set_has_chat();
    _impl_.payload_variant_.chat_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshtastic.TAKPacket.chat)
}
inline ::meshtastic::GeoChat* PROTOBUF_NONNULL TAKPacket::_internal_mutable_chat() {
  if (payload_variant_case() != kChat) {
    clear_payload_variant();
    set_has_chat();
    _impl_.payload_variant_.chat_ = 
        ::google::protobuf::Message::DefaultConstruct<::meshtastic::GeoChat>(GetArena());
  }
  return _impl_.payload_variant_.chat_;
}
inline ::meshtastic::GeoChat* PROTOBUF_NONNULL TAKPacket::mutable_chat()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::meshtastic::GeoChat* _msg = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:meshtastic.TAKPacket.chat)
  return _msg;
}

// bytes detail = 7;
inline bool TAKPacket::has_detail() const {
  return payload_variant_case() == kDetail;
}
inline void TAKPacket::set_has_detail() {
  _impl_._oneof_case_[0] = kDetail;
}
inline void TAKPacket::clear_detail() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_variant_case() == kDetail) {
    _impl_.payload_variant_.detail_.Destroy();
    clear_has_payload_variant();
  }
}
inline const ::std::string& TAKPacket::detail() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.TAKPacket.detail)
  return _internal_detail();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TAKPacket::set_detail(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_variant_case() != kDetail) {
    clear_payload_variant();

    set_has_detail();
    _impl_.payload_variant_.detail_.InitDefault();
  }
  _impl_.payload_variant_.detail_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:meshtastic.TAKPacket.detail)
}
inline ::std::string* PROTOBUF_NONNULL TAKPacket::mutable_detail()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:meshtastic.TAKPacket.detail)
  return _s;
}
inline const ::std::string& TAKPacket::_internal_detail() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (payload_variant_case() != kDetail) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.payload_variant_.detail_.Get();
}
inline void TAKPacket::_internal_set_detail(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_variant_case() != kDetail) {
    clear_payload_variant();

    set_has_detail();
    _impl_.payload_variant_.detail_.InitDefault();
  }
  _impl_.payload_variant_.detail_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL TAKPacket::_internal_mutable_detail() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_variant_case() != kDetail) {
    clear_payload_variant();

    set_has_detail();
    _impl_.payload_variant_.detail_.InitDefault();
  }
  return _impl_.payload_variant_.detail_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE TAKPacket::release_detail() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.TAKPacket.detail)
  if (payload_variant_case() != kDetail) {
    return nullptr;
  }
  clear_has_payload_variant();
  return _impl_.payload_variant_.detail_.Release();
}
inline void TAKPacket::set_allocated_detail(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_payload_variant()) {
    clear_payload_variant();
  }
  if (value != nullptr) {
    set_has_detail();
    _impl_.payload_variant_.detail_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.TAKPacket.detail)
}

inline bool TAKPacket::has_payload_variant() const {
  return payload_variant_case() != PAYLOAD_VARIANT_NOT_SET;
}
inline void TAKPacket::clear_has_payload_variant() {
  _impl_._oneof_case_[0] = PAYLOAD_VARIANT_NOT_SET;
}
inline TAKPacket::PayloadVariantCase TAKPacket::payload_variant_case() const {
  return TAKPacket::PayloadVariantCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GeoChat

// string message = 1;
inline void GeoChat::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& GeoChat::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.GeoChat.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void GeoChat::set_message(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:meshtastic.GeoChat.message)
}
inline ::std::string* PROTOBUF_NONNULL GeoChat::mutable_message()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:meshtastic.GeoChat.message)
  return _s;
}
inline const ::std::string& GeoChat::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void GeoChat::_internal_set_message(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.message_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL GeoChat::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.message_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE GeoChat::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.GeoChat.message)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.message_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.message_.Set("", GetArena());
  }
  return released;
}
inline void GeoChat::set_allocated_message(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.GeoChat.message)
}

// optional string to = 2;
inline bool GeoChat::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002U) != 0;
  return value;
}
inline void GeoChat::clear_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline const ::std::string& GeoChat::to() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.GeoChat.to)
  return _internal_to();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void GeoChat::set_to(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  _impl_.to_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:meshtastic.GeoChat.to)
}
inline ::std::string* PROTOBUF_NONNULL GeoChat::mutable_to()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:meshtastic.GeoChat.to)
  return _s;
}
inline const ::std::string& GeoChat::_internal_to() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.to_.Get();
}
inline void GeoChat::_internal_set_to(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  _impl_.to_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL GeoChat::_internal_mutable_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  return _impl_.to_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE GeoChat::release_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.GeoChat.to)
  if ((_impl_._has_bits_[0] & 0x00000002U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002U;
  auto* released = _impl_.to_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.to_.Set("", GetArena());
  }
  return released;
}
inline void GeoChat::set_allocated_to(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }
  _impl_.to_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.to_.IsDefault()) {
    _impl_.to_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.GeoChat.to)
}

// optional string to_callsign = 3;
inline bool GeoChat::has_to_callsign() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004U) != 0;
  return value;
}
inline void GeoChat::clear_to_callsign() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_callsign_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004U;
}
inline const ::std::string& GeoChat::to_callsign() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.GeoChat.to_callsign)
  return _internal_to_callsign();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void GeoChat::set_to_callsign(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004U;
  _impl_.to_callsign_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:meshtastic.GeoChat.to_callsign)
}
inline ::std::string* PROTOBUF_NONNULL GeoChat::mutable_to_callsign()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_to_callsign();
  // @@protoc_insertion_point(field_mutable:meshtastic.GeoChat.to_callsign)
  return _s;
}
inline const ::std::string& GeoChat::_internal_to_callsign() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.to_callsign_.Get();
}
inline void GeoChat::_internal_set_to_callsign(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004U;
  _impl_.to_callsign_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL GeoChat::_internal_mutable_to_callsign() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004U;
  return _impl_.to_callsign_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE GeoChat::release_to_callsign() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.GeoChat.to_callsign)
  if ((_impl_._has_bits_[0] & 0x00000004U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004U;
  auto* released = _impl_.to_callsign_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.to_callsign_.Set("", GetArena());
  }
  return released;
}
inline void GeoChat::set_allocated_to_callsign(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }
  _impl_.to_callsign_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.to_callsign_.IsDefault()) {
    _impl_.to_callsign_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.GeoChat.to_callsign)
}

// -------------------------------------------------------------------

// Group

// .meshtastic.MemberRole role = 1;
inline void Group::clear_role() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.role_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline ::meshtastic::MemberRole Group::role() const {
  // @@protoc_insertion_point(field_get:meshtastic.Group.role)
  return _internal_role();
}
inline void Group::set_role(::meshtastic::MemberRole value) {
  _internal_set_role(value);
  _impl_._has_bits_[0] |= 0x00000001U;
  // @@protoc_insertion_point(field_set:meshtastic.Group.role)
}
inline ::meshtastic::MemberRole Group::_internal_role() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::meshtastic::MemberRole>(_impl_.role_);
}
inline void Group::_internal_set_role(::meshtastic::MemberRole value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.role_ = value;
}

// .meshtastic.Team team = 2;
inline void Group::clear_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline ::meshtastic::Team Group::team() const {
  // @@protoc_insertion_point(field_get:meshtastic.Group.team)
  return _internal_team();
}
inline void Group::set_team(::meshtastic::Team value) {
  _internal_set_team(value);
  _impl_._has_bits_[0] |= 0x00000002U;
  // @@protoc_insertion_point(field_set:meshtastic.Group.team)
}
inline ::meshtastic::Team Group::_internal_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::meshtastic::Team>(_impl_.team_);
}
inline void Group::_internal_set_team(::meshtastic::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.team_ = value;
}

// -------------------------------------------------------------------

// Status

// uint32 battery = 1;
inline void Status::clear_battery() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.battery_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline ::uint32_t Status::battery() const {
  // @@protoc_insertion_point(field_get:meshtastic.Status.battery)
  return _internal_battery();
}
inline void Status::set_battery(::uint32_t value) {
  _internal_set_battery(value);
  _impl_._has_bits_[0] |= 0x00000001U;
  // @@protoc_insertion_point(field_set:meshtastic.Status.battery)
}
inline ::uint32_t Status::_internal_battery() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.battery_;
}
inline void Status::_internal_set_battery(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.battery_ = value;
}

// -------------------------------------------------------------------

// Contact

// string callsign = 1;
inline void Contact::clear_callsign() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callsign_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& Contact::callsign() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.Contact.callsign)
  return _internal_callsign();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Contact::set_callsign(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.callsign_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:meshtastic.Contact.callsign)
}
inline ::std::string* PROTOBUF_NONNULL Contact::mutable_callsign()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_callsign();
  // @@protoc_insertion_point(field_mutable:meshtastic.Contact.callsign)
  return _s;
}
inline const ::std::string& Contact::_internal_callsign() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.callsign_.Get();
}
inline void Contact::_internal_set_callsign(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.callsign_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Contact::_internal_mutable_callsign() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.callsign_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Contact::release_callsign() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.Contact.callsign)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.callsign_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.callsign_.Set("", GetArena());
  }
  return released;
}
inline void Contact::set_allocated_callsign(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.callsign_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.callsign_.IsDefault()) {
    _impl_.callsign_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Contact.callsign)
}

// string device_callsign = 2;
inline void Contact::clear_device_callsign() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_callsign_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline const ::std::string& Contact::device_callsign() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshtastic.Contact.device_callsign)
  return _internal_device_callsign();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Contact::set_device_callsign(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  _impl_.device_callsign_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:meshtastic.Contact.device_callsign)
}
inline ::std::string* PROTOBUF_NONNULL Contact::mutable_device_callsign()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_device_callsign();
  // @@protoc_insertion_point(field_mutable:meshtastic.Contact.device_callsign)
  return _s;
}
inline const ::std::string& Contact::_internal_device_callsign() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_callsign_.Get();
}
inline void Contact::_internal_set_device_callsign(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  _impl_.device_callsign_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Contact::_internal_mutable_device_callsign() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  return _impl_.device_callsign_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Contact::release_device_callsign() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshtastic.Contact.device_callsign)
  if ((_impl_._has_bits_[0] & 0x00000002U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002U;
  auto* released = _impl_.device_callsign_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.device_callsign_.Set("", GetArena());
  }
  return released;
}
inline void Contact::set_allocated_device_callsign(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }
  _impl_.device_callsign_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_callsign_.IsDefault()) {
    _impl_.device_callsign_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:meshtastic.Contact.device_callsign)
}

// -------------------------------------------------------------------

// PLI

// sfixed32 latitude_i = 1;
inline void PLI::clear_latitude_i() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_i_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline ::int32_t PLI::latitude_i() const {
  // @@protoc_insertion_point(field_get:meshtastic.PLI.latitude_i)
  return _internal_latitude_i();
}
inline void PLI::set_latitude_i(::int32_t value) {
  _internal_set_latitude_i(value);
  _impl_._has_bits_[0] |= 0x00000001U;
  // @@protoc_insertion_point(field_set:meshtastic.PLI.latitude_i)
}
inline ::int32_t PLI::_internal_latitude_i() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latitude_i_;
}
inline void PLI::_internal_set_latitude_i(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_i_ = value;
}

// sfixed32 longitude_i = 2;
inline void PLI::clear_longitude_i() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_i_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline ::int32_t PLI::longitude_i() const {
  // @@protoc_insertion_point(field_get:meshtastic.PLI.longitude_i)
  return _internal_longitude_i();
}
inline void PLI::set_longitude_i(::int32_t value) {
  _internal_set_longitude_i(value);
  _impl_._has_bits_[0] |= 0x00000002U;
  // @@protoc_insertion_point(field_set:meshtastic.PLI.longitude_i)
}
inline ::int32_t PLI::_internal_longitude_i() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longitude_i_;
}
inline void PLI::_internal_set_longitude_i(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_i_ = value;
}

// int32 altitude = 3;
inline void PLI::clear_altitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.altitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004U;
}
inline ::int32_t PLI::altitude() const {
  // @@protoc_insertion_point(field_get:meshtastic.PLI.altitude)
  return _internal_altitude();
}
inline void PLI::set_altitude(::int32_t value) {
  _internal_set_altitude(value);
  _impl_._has_bits_[0] |= 0x00000004U;
  // @@protoc_insertion_point(field_set:meshtastic.PLI.altitude)
}
inline ::int32_t PLI::_internal_altitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.altitude_;
}
inline void PLI::_internal_set_altitude(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.altitude_ = value;
}

// uint32 speed = 4;
inline void PLI::clear_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008U;
}
inline ::uint32_t PLI::speed() const {
  // @@protoc_insertion_point(field_get:meshtastic.PLI.speed)
  return _internal_speed();
}
inline void PLI::set_speed(::uint32_t value) {
  _internal_set_speed(value);
  _impl_._has_bits_[0] |= 0x00000008U;
  // @@protoc_insertion_point(field_set:meshtastic.PLI.speed)
}
inline ::uint32_t PLI::_internal_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_;
}
inline void PLI::_internal_set_speed(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_ = value;
}

// uint32 course = 5;
inline void PLI::clear_course() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.course_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010U;
}
inline ::uint32_t PLI::course() const {
  // @@protoc_insertion_point(field_get:meshtastic.PLI.course)
  return _internal_course();
}
inline void PLI::set_course(::uint32_t value) {
  _internal_set_course(value);
  _impl_._has_bits_[0] |= 0x00000010U;
  // @@protoc_insertion_point(field_set:meshtastic.PLI.course)
}
inline ::uint32_t PLI::_internal_course() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.course_;
}
inline void PLI::_internal_set_course(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.course_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace meshtastic


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::meshtastic::Team> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::meshtastic::Team>() {
  return ::meshtastic::Team_descriptor();
}
template <>
struct is_proto_enum<::meshtastic::MemberRole> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::meshtastic::MemberRole>() {
  return ::meshtastic::MemberRole_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // meshtastic_2fatak_2eproto_2epb_2eh
