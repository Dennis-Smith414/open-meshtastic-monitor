// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: meshtastic/mqtt.proto
// Protobuf C++ Version: 6.31.1

#include "meshtastic/mqtt.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace meshtastic {

inline constexpr MapReport::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        long_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        short_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        firmware_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        role_{static_cast< ::meshtastic::Config_DeviceConfig_Role >(0)},
        hw_model_{static_cast< ::meshtastic::HardwareModel >(0)},
        region_{static_cast< ::meshtastic::Config_LoRaConfig_RegionCode >(0)},
        modem_preset_{static_cast< ::meshtastic::Config_LoRaConfig_ModemPreset >(0)},
        latitude_i_{0},
        longitude_i_{0},
        altitude_{0},
        has_default_channel_{false},
        has_opted_report_location_{false},
        position_precision_{0u},
        num_online_local_nodes_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR MapReport::MapReport(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MapReport_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MapReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapReportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapReportDefaultTypeInternal() {}
  union {
    MapReport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapReportDefaultTypeInternal _MapReport_default_instance_;

inline constexpr ServiceEnvelope::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        channel_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        gateway_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        packet_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ServiceEnvelope::ServiceEnvelope(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ServiceEnvelope_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ServiceEnvelopeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceEnvelopeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceEnvelopeDefaultTypeInternal() {}
  union {
    ServiceEnvelope _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceEnvelopeDefaultTypeInternal _ServiceEnvelope_default_instance_;
}  // namespace meshtastic
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_meshtastic_2fmqtt_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_meshtastic_2fmqtt_2eproto = nullptr;
const ::uint32_t
    TableStruct_meshtastic_2fmqtt_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::ServiceEnvelope, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::ServiceEnvelope, _impl_.packet_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::ServiceEnvelope, _impl_.channel_id_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::ServiceEnvelope, _impl_.gateway_id_),
        2,
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::meshtastic::MapReport, _impl_._has_bits_),
        17, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::meshtastic::MapReport, _impl_.long_name_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::MapReport, _impl_.short_name_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::MapReport, _impl_.role_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::MapReport, _impl_.hw_model_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::MapReport, _impl_.firmware_version_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::MapReport, _impl_.region_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::MapReport, _impl_.modem_preset_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::MapReport, _impl_.has_default_channel_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::MapReport, _impl_.latitude_i_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::MapReport, _impl_.longitude_i_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::MapReport, _impl_.altitude_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::MapReport, _impl_.position_precision_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::MapReport, _impl_.num_online_local_nodes_),
        PROTOBUF_FIELD_OFFSET(::meshtastic::MapReport, _impl_.has_opted_report_location_),
        0,
        1,
        3,
        4,
        2,
        5,
        6,
        10,
        7,
        8,
        9,
        12,
        13,
        11,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::meshtastic::ServiceEnvelope)},
        {9, sizeof(::meshtastic::MapReport)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::meshtastic::_ServiceEnvelope_default_instance_._instance,
    &::meshtastic::_MapReport_default_instance_._instance,
};
const char descriptor_table_protodef_meshtastic_2fmqtt_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\025meshtastic/mqtt.proto\022\nmeshtastic\032\027mes"
    "htastic/config.proto\032\025meshtastic/mesh.pr"
    "oto\"a\n\017ServiceEnvelope\022&\n\006packet\030\001 \001(\0132\026"
    ".meshtastic.MeshPacket\022\022\n\nchannel_id\030\002 \001"
    "(\t\022\022\n\ngateway_id\030\003 \001(\t\"\337\003\n\tMapReport\022\021\n\t"
    "long_name\030\001 \001(\t\022\022\n\nshort_name\030\002 \001(\t\0222\n\004r"
    "ole\030\003 \001(\0162$.meshtastic.Config.DeviceConf"
    "ig.Role\022+\n\010hw_model\030\004 \001(\0162\031.meshtastic.H"
    "ardwareModel\022\030\n\020firmware_version\030\005 \001(\t\0228"
    "\n\006region\030\006 \001(\0162(.meshtastic.Config.LoRaC"
    "onfig.RegionCode\022\?\n\014modem_preset\030\007 \001(\0162)"
    ".meshtastic.Config.LoRaConfig.ModemPrese"
    "t\022\033\n\023has_default_channel\030\010 \001(\010\022\022\n\nlatitu"
    "de_i\030\t \001(\017\022\023\n\013longitude_i\030\n \001(\017\022\020\n\010altit"
    "ude\030\013 \001(\005\022\032\n\022position_precision\030\014 \001(\r\022\036\n"
    "\026num_online_local_nodes\030\r \001(\r\022!\n\031has_opt"
    "ed_report_location\030\016 \001(\010B_\n\023com.geeksvil"
    "le.meshB\nMQTTProtosZ\"github.com/meshtast"
    "ic/go/generated\252\002\024Meshtastic.Protobufs\272\002"
    "\000b\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_meshtastic_2fmqtt_2eproto_deps[2] = {
        &::descriptor_table_meshtastic_2fconfig_2eproto,
        &::descriptor_table_meshtastic_2fmesh_2eproto,
};
static ::absl::once_flag descriptor_table_meshtastic_2fmqtt_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_meshtastic_2fmqtt_2eproto = {
    false,
    false,
    769,
    descriptor_table_protodef_meshtastic_2fmqtt_2eproto,
    "meshtastic/mqtt.proto",
    &descriptor_table_meshtastic_2fmqtt_2eproto_once,
    descriptor_table_meshtastic_2fmqtt_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_meshtastic_2fmqtt_2eproto::offsets,
    file_level_enum_descriptors_meshtastic_2fmqtt_2eproto,
    file_level_service_descriptors_meshtastic_2fmqtt_2eproto,
};
namespace meshtastic {
// ===================================================================

class ServiceEnvelope::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ServiceEnvelope>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ServiceEnvelope, _impl_._has_bits_);
};

void ServiceEnvelope::clear_packet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.packet_ != nullptr) _impl_.packet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ServiceEnvelope::ServiceEnvelope(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ServiceEnvelope_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.ServiceEnvelope)
}
PROTOBUF_NDEBUG_INLINE ServiceEnvelope::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::meshtastic::ServiceEnvelope& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        channel_id_(arena, from.channel_id_),
        gateway_id_(arena, from.gateway_id_) {}

ServiceEnvelope::ServiceEnvelope(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ServiceEnvelope& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ServiceEnvelope_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ServiceEnvelope* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.packet_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.packet_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:meshtastic.ServiceEnvelope)
}
PROTOBUF_NDEBUG_INLINE ServiceEnvelope::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        channel_id_(arena),
        gateway_id_(arena) {}

inline void ServiceEnvelope::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.packet_ = {};
}
ServiceEnvelope::~ServiceEnvelope() {
  // @@protoc_insertion_point(destructor:meshtastic.ServiceEnvelope)
  SharedDtor(*this);
}
inline void ServiceEnvelope::SharedDtor(MessageLite& self) {
  ServiceEnvelope& this_ = static_cast<ServiceEnvelope&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.channel_id_.Destroy();
  this_._impl_.gateway_id_.Destroy();
  delete this_._impl_.packet_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ServiceEnvelope::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ServiceEnvelope(arena);
}
constexpr auto ServiceEnvelope::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ServiceEnvelope),
                                            alignof(ServiceEnvelope));
}
constexpr auto ServiceEnvelope::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ServiceEnvelope_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ServiceEnvelope::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ServiceEnvelope>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ServiceEnvelope::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ServiceEnvelope>(), &ServiceEnvelope::ByteSizeLong,
              &ServiceEnvelope::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ServiceEnvelope, _impl_._cached_size_),
          false,
      },
      &ServiceEnvelope::kDescriptorMethods,
      &descriptor_table_meshtastic_2fmqtt_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ServiceEnvelope_class_data_ =
        ServiceEnvelope::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ServiceEnvelope::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ServiceEnvelope_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ServiceEnvelope_class_data_.tc_table);
  return ServiceEnvelope_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 55, 2>
ServiceEnvelope::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ServiceEnvelope, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ServiceEnvelope_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::ServiceEnvelope>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .meshtastic.MeshPacket packet = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 2, 0, PROTOBUF_FIELD_OFFSET(ServiceEnvelope, _impl_.packet_)}},
    // string channel_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ServiceEnvelope, _impl_.channel_id_)}},
    // string gateway_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(ServiceEnvelope, _impl_.gateway_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .meshtastic.MeshPacket packet = 1;
    {PROTOBUF_FIELD_OFFSET(ServiceEnvelope, _impl_.packet_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string channel_id = 2;
    {PROTOBUF_FIELD_OFFSET(ServiceEnvelope, _impl_.channel_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string gateway_id = 3;
    {PROTOBUF_FIELD_OFFSET(ServiceEnvelope, _impl_.gateway_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::meshtastic::MeshPacket>()},
  }},
  {{
    "\32\0\12\12\0\0\0\0"
    "meshtastic.ServiceEnvelope"
    "channel_id"
    "gateway_id"
  }},
};
PROTOBUF_NOINLINE void ServiceEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.ServiceEnvelope)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.channel_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.gateway_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.packet_ != nullptr);
      _impl_.packet_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ServiceEnvelope::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ServiceEnvelope& this_ = static_cast<const ServiceEnvelope&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ServiceEnvelope::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ServiceEnvelope& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.ServiceEnvelope)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .meshtastic.MeshPacket packet = 1;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.packet_, this_._impl_.packet_->GetCachedSize(), target,
        stream);
  }

  // string channel_id = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!this_._internal_channel_id().empty()) {
      const ::std::string& _s = this_._internal_channel_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "meshtastic.ServiceEnvelope.channel_id");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string gateway_id = 3;
  if ((cached_has_bits & 0x00000002u) != 0) {
    if (!this_._internal_gateway_id().empty()) {
      const ::std::string& _s = this_._internal_gateway_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "meshtastic.ServiceEnvelope.gateway_id");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.ServiceEnvelope)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ServiceEnvelope::ByteSizeLong(const MessageLite& base) {
  const ServiceEnvelope& this_ = static_cast<const ServiceEnvelope&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ServiceEnvelope::ByteSizeLong() const {
  const ServiceEnvelope& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.ServiceEnvelope)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string channel_id = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_channel_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_channel_id());
      }
    }
    // string gateway_id = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_gateway_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_gateway_id());
      }
    }
    // .meshtastic.MeshPacket packet = 1;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.packet_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ServiceEnvelope::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ServiceEnvelope*>(&to_msg);
  auto& from = static_cast<const ServiceEnvelope&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.ServiceEnvelope)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_channel_id().empty()) {
        _this->_internal_set_channel_id(from._internal_channel_id());
      } else {
        if (_this->_impl_.channel_id_.IsDefault()) {
          _this->_internal_set_channel_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_gateway_id().empty()) {
        _this->_internal_set_gateway_id(from._internal_gateway_id());
      } else {
        if (_this->_impl_.gateway_id_.IsDefault()) {
          _this->_internal_set_gateway_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.packet_ != nullptr);
      if (_this->_impl_.packet_ == nullptr) {
        _this->_impl_.packet_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.packet_);
      } else {
        _this->_impl_.packet_->MergeFrom(*from._impl_.packet_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceEnvelope::CopyFrom(const ServiceEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.ServiceEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ServiceEnvelope::InternalSwap(ServiceEnvelope* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, &other->_impl_.channel_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gateway_id_, &other->_impl_.gateway_id_, arena);
  swap(_impl_.packet_, other->_impl_.packet_);
}

::google::protobuf::Metadata ServiceEnvelope::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MapReport::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<MapReport>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MapReport, _impl_._has_bits_);
};

MapReport::MapReport(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MapReport_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshtastic.MapReport)
}
PROTOBUF_NDEBUG_INLINE MapReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::meshtastic::MapReport& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        long_name_(arena, from.long_name_),
        short_name_(arena, from.short_name_),
        firmware_version_(arena, from.firmware_version_) {}

MapReport::MapReport(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MapReport& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MapReport_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MapReport* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, role_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, role_),
           offsetof(Impl_, num_online_local_nodes_) -
               offsetof(Impl_, role_) +
               sizeof(Impl_::num_online_local_nodes_));

  // @@protoc_insertion_point(copy_constructor:meshtastic.MapReport)
}
PROTOBUF_NDEBUG_INLINE MapReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        long_name_(arena),
        short_name_(arena),
        firmware_version_(arena) {}

inline void MapReport::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, role_),
           0,
           offsetof(Impl_, num_online_local_nodes_) -
               offsetof(Impl_, role_) +
               sizeof(Impl_::num_online_local_nodes_));
}
MapReport::~MapReport() {
  // @@protoc_insertion_point(destructor:meshtastic.MapReport)
  SharedDtor(*this);
}
inline void MapReport::SharedDtor(MessageLite& self) {
  MapReport& this_ = static_cast<MapReport&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.long_name_.Destroy();
  this_._impl_.short_name_.Destroy();
  this_._impl_.firmware_version_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MapReport::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MapReport(arena);
}
constexpr auto MapReport::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MapReport),
                                            alignof(MapReport));
}
constexpr auto MapReport::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MapReport_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MapReport::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MapReport>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MapReport::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MapReport>(), &MapReport::ByteSizeLong,
              &MapReport::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MapReport, _impl_._cached_size_),
          false,
      },
      &MapReport::kDescriptorMethods,
      &descriptor_table_meshtastic_2fmqtt_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull MapReport_class_data_ =
        MapReport::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
MapReport::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MapReport_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MapReport_class_data_.tc_table);
  return MapReport_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 0, 72, 2>
MapReport::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MapReport, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    MapReport_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::meshtastic::MapReport>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string long_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MapReport, _impl_.long_name_)}},
    // string short_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(MapReport, _impl_.short_name_)}},
    // .meshtastic.Config.DeviceConfig.Role role = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MapReport, _impl_.role_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(MapReport, _impl_.role_)}},
    // .meshtastic.HardwareModel hw_model = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MapReport, _impl_.hw_model_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(MapReport, _impl_.hw_model_)}},
    // string firmware_version = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(MapReport, _impl_.firmware_version_)}},
    // .meshtastic.Config.LoRaConfig.RegionCode region = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MapReport, _impl_.region_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(MapReport, _impl_.region_)}},
    // .meshtastic.Config.LoRaConfig.ModemPreset modem_preset = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MapReport, _impl_.modem_preset_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(MapReport, _impl_.modem_preset_)}},
    // bool has_default_channel = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MapReport, _impl_.has_default_channel_), 10>(),
     {64, 10, 0, PROTOBUF_FIELD_OFFSET(MapReport, _impl_.has_default_channel_)}},
    // sfixed32 latitude_i = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 7, 0, PROTOBUF_FIELD_OFFSET(MapReport, _impl_.latitude_i_)}},
    // sfixed32 longitude_i = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 8, 0, PROTOBUF_FIELD_OFFSET(MapReport, _impl_.longitude_i_)}},
    // int32 altitude = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MapReport, _impl_.altitude_), 9>(),
     {88, 9, 0, PROTOBUF_FIELD_OFFSET(MapReport, _impl_.altitude_)}},
    // uint32 position_precision = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MapReport, _impl_.position_precision_), 12>(),
     {96, 12, 0, PROTOBUF_FIELD_OFFSET(MapReport, _impl_.position_precision_)}},
    // uint32 num_online_local_nodes = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MapReport, _impl_.num_online_local_nodes_), 13>(),
     {104, 13, 0, PROTOBUF_FIELD_OFFSET(MapReport, _impl_.num_online_local_nodes_)}},
    // bool has_opted_report_location = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MapReport, _impl_.has_opted_report_location_), 11>(),
     {112, 11, 0, PROTOBUF_FIELD_OFFSET(MapReport, _impl_.has_opted_report_location_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string long_name = 1;
    {PROTOBUF_FIELD_OFFSET(MapReport, _impl_.long_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string short_name = 2;
    {PROTOBUF_FIELD_OFFSET(MapReport, _impl_.short_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .meshtastic.Config.DeviceConfig.Role role = 3;
    {PROTOBUF_FIELD_OFFSET(MapReport, _impl_.role_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .meshtastic.HardwareModel hw_model = 4;
    {PROTOBUF_FIELD_OFFSET(MapReport, _impl_.hw_model_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string firmware_version = 5;
    {PROTOBUF_FIELD_OFFSET(MapReport, _impl_.firmware_version_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .meshtastic.Config.LoRaConfig.RegionCode region = 6;
    {PROTOBUF_FIELD_OFFSET(MapReport, _impl_.region_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .meshtastic.Config.LoRaConfig.ModemPreset modem_preset = 7;
    {PROTOBUF_FIELD_OFFSET(MapReport, _impl_.modem_preset_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // bool has_default_channel = 8;
    {PROTOBUF_FIELD_OFFSET(MapReport, _impl_.has_default_channel_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // sfixed32 latitude_i = 9;
    {PROTOBUF_FIELD_OFFSET(MapReport, _impl_.latitude_i_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kSFixed32)},
    // sfixed32 longitude_i = 10;
    {PROTOBUF_FIELD_OFFSET(MapReport, _impl_.longitude_i_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kSFixed32)},
    // int32 altitude = 11;
    {PROTOBUF_FIELD_OFFSET(MapReport, _impl_.altitude_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // uint32 position_precision = 12;
    {PROTOBUF_FIELD_OFFSET(MapReport, _impl_.position_precision_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 num_online_local_nodes = 13;
    {PROTOBUF_FIELD_OFFSET(MapReport, _impl_.num_online_local_nodes_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bool has_opted_report_location = 14;
    {PROTOBUF_FIELD_OFFSET(MapReport, _impl_.has_opted_report_location_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\24\11\12\0\0\20\0\0\0\0\0\0\0\0\0\0"
    "meshtastic.MapReport"
    "long_name"
    "short_name"
    "firmware_version"
  }},
};
PROTOBUF_NOINLINE void MapReport::Clear() {
// @@protoc_insertion_point(message_clear_start:meshtastic.MapReport)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.long_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.short_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.firmware_version_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000f8u) != 0) {
    ::memset(&_impl_.role_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.latitude_i_) -
        reinterpret_cast<char*>(&_impl_.role_)) + sizeof(_impl_.latitude_i_));
  }
  if ((cached_has_bits & 0x00003f00u) != 0) {
    ::memset(&_impl_.longitude_i_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.num_online_local_nodes_) -
        reinterpret_cast<char*>(&_impl_.longitude_i_)) + sizeof(_impl_.num_online_local_nodes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MapReport::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MapReport& this_ = static_cast<const MapReport&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MapReport::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MapReport& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:meshtastic.MapReport)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string long_name = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_long_name().empty()) {
      const ::std::string& _s = this_._internal_long_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "meshtastic.MapReport.long_name");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string short_name = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_short_name().empty()) {
      const ::std::string& _s = this_._internal_short_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "meshtastic.MapReport.short_name");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // .meshtastic.Config.DeviceConfig.Role role = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_role() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          3, this_._internal_role(), target);
    }
  }

  // .meshtastic.HardwareModel hw_model = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_hw_model() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          4, this_._internal_hw_model(), target);
    }
  }

  // string firmware_version = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_firmware_version().empty()) {
      const ::std::string& _s = this_._internal_firmware_version();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "meshtastic.MapReport.firmware_version");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // .meshtastic.Config.LoRaConfig.RegionCode region = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_region() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          6, this_._internal_region(), target);
    }
  }

  // .meshtastic.Config.LoRaConfig.ModemPreset modem_preset = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_modem_preset() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          7, this_._internal_modem_preset(), target);
    }
  }

  // bool has_default_channel = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000400u) != 0) {
    if (this_._internal_has_default_channel() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          8, this_._internal_has_default_channel(), target);
    }
  }

  // sfixed32 latitude_i = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_latitude_i() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(
          9, this_._internal_latitude_i(), target);
    }
  }

  // sfixed32 longitude_i = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (this_._internal_longitude_i() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(
          10, this_._internal_longitude_i(), target);
    }
  }

  // int32 altitude = 11;
  if ((this_._impl_._has_bits_[0] & 0x00000200u) != 0) {
    if (this_._internal_altitude() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<11>(
              stream, this_._internal_altitude(), target);
    }
  }

  // uint32 position_precision = 12;
  if ((this_._impl_._has_bits_[0] & 0x00001000u) != 0) {
    if (this_._internal_position_precision() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          12, this_._internal_position_precision(), target);
    }
  }

  // uint32 num_online_local_nodes = 13;
  if ((this_._impl_._has_bits_[0] & 0x00002000u) != 0) {
    if (this_._internal_num_online_local_nodes() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          13, this_._internal_num_online_local_nodes(), target);
    }
  }

  // bool has_opted_report_location = 14;
  if ((this_._impl_._has_bits_[0] & 0x00000800u) != 0) {
    if (this_._internal_has_opted_report_location() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          14, this_._internal_has_opted_report_location(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshtastic.MapReport)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MapReport::ByteSizeLong(const MessageLite& base) {
  const MapReport& this_ = static_cast<const MapReport&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MapReport::ByteSizeLong() const {
  const MapReport& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:meshtastic.MapReport)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string long_name = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_long_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_long_name());
      }
    }
    // string short_name = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_short_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_short_name());
      }
    }
    // string firmware_version = 5;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_firmware_version().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_firmware_version());
      }
    }
    // .meshtastic.Config.DeviceConfig.Role role = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_role() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_role());
      }
    }
    // .meshtastic.HardwareModel hw_model = 4;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_hw_model() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_hw_model());
      }
    }
    // .meshtastic.Config.LoRaConfig.RegionCode region = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_region() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_region());
      }
    }
    // .meshtastic.Config.LoRaConfig.ModemPreset modem_preset = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_modem_preset() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_modem_preset());
      }
    }
    // sfixed32 latitude_i = 9;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_latitude_i() != 0) {
        total_size += 5;
      }
    }
  }
  if ((cached_has_bits & 0x00003f00u) != 0) {
    // sfixed32 longitude_i = 10;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_longitude_i() != 0) {
        total_size += 5;
      }
    }
    // int32 altitude = 11;
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (this_._internal_altitude() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_altitude());
      }
    }
    // bool has_default_channel = 8;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_has_default_channel() != 0) {
        total_size += 2;
      }
    }
    // bool has_opted_report_location = 14;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (this_._internal_has_opted_report_location() != 0) {
        total_size += 2;
      }
    }
    // uint32 position_precision = 12;
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (this_._internal_position_precision() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_position_precision());
      }
    }
    // uint32 num_online_local_nodes = 13;
    if ((cached_has_bits & 0x00002000u) != 0) {
      if (this_._internal_num_online_local_nodes() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_num_online_local_nodes());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MapReport::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MapReport*>(&to_msg);
  auto& from = static_cast<const MapReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:meshtastic.MapReport)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_long_name().empty()) {
        _this->_internal_set_long_name(from._internal_long_name());
      } else {
        if (_this->_impl_.long_name_.IsDefault()) {
          _this->_internal_set_long_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_short_name().empty()) {
        _this->_internal_set_short_name(from._internal_short_name());
      } else {
        if (_this->_impl_.short_name_.IsDefault()) {
          _this->_internal_set_short_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_firmware_version().empty()) {
        _this->_internal_set_firmware_version(from._internal_firmware_version());
      } else {
        if (_this->_impl_.firmware_version_.IsDefault()) {
          _this->_internal_set_firmware_version("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_role() != 0) {
        _this->_impl_.role_ = from._impl_.role_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_hw_model() != 0) {
        _this->_impl_.hw_model_ = from._impl_.hw_model_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_region() != 0) {
        _this->_impl_.region_ = from._impl_.region_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_modem_preset() != 0) {
        _this->_impl_.modem_preset_ = from._impl_.modem_preset_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_latitude_i() != 0) {
        _this->_impl_.latitude_i_ = from._impl_.latitude_i_;
      }
    }
  }
  if ((cached_has_bits & 0x00003f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (from._internal_longitude_i() != 0) {
        _this->_impl_.longitude_i_ = from._impl_.longitude_i_;
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (from._internal_altitude() != 0) {
        _this->_impl_.altitude_ = from._impl_.altitude_;
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_has_default_channel() != 0) {
        _this->_impl_.has_default_channel_ = from._impl_.has_default_channel_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (from._internal_has_opted_report_location() != 0) {
        _this->_impl_.has_opted_report_location_ = from._impl_.has_opted_report_location_;
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (from._internal_position_precision() != 0) {
        _this->_impl_.position_precision_ = from._impl_.position_precision_;
      }
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      if (from._internal_num_online_local_nodes() != 0) {
        _this->_impl_.num_online_local_nodes_ = from._impl_.num_online_local_nodes_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MapReport::CopyFrom(const MapReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshtastic.MapReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MapReport::InternalSwap(MapReport* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.long_name_, &other->_impl_.long_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.short_name_, &other->_impl_.short_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.firmware_version_, &other->_impl_.firmware_version_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapReport, _impl_.num_online_local_nodes_)
      + sizeof(MapReport::_impl_.num_online_local_nodes_)
      - PROTOBUF_FIELD_OFFSET(MapReport, _impl_.role_)>(
          reinterpret_cast<char*>(&_impl_.role_),
          reinterpret_cast<char*>(&other->_impl_.role_));
}

::google::protobuf::Metadata MapReport::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace meshtastic
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_meshtastic_2fmqtt_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
